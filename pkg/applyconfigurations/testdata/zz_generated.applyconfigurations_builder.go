// +build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package cronjob

import (
	"encoding/json"
	"k8s.io/api/batch/v1beta1"
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// AssociativeTypeApplyConfiguration represents a declarative configuration of the AssociativeType type for use
// with apply.
type AssociativeTypeApplyConfiguration struct {
	fields associativeTypeFields
}

// associativeType owns all fields except inlined fields
type associativeTypeFields struct {
	Name      *string `json:"name,omitempty"`
	Secondary *int    `json:"secondary,omitempty"`
	Foo       *string `json:"foo,omitempty"`
}

// SetName sets the Name field in the declarative configuration to the given value
func (b *AssociativeTypeApplyConfiguration) SetName(value string) *AssociativeTypeApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field in the declarative configuration
func (b *AssociativeTypeApplyConfiguration) RemoveName(value string) *AssociativeTypeApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field in the declarative configuration
func (b *AssociativeTypeApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecondary sets the Secondary field in the declarative configuration to the given value
func (b *AssociativeTypeApplyConfiguration) SetSecondary(value int) *AssociativeTypeApplyConfiguration {
	b.fields.Secondary = &value
	return b
}

// RemoveSecondary removes the Secondary field in the declarative configuration
func (b *AssociativeTypeApplyConfiguration) RemoveSecondary(value int) *AssociativeTypeApplyConfiguration {
	b.fields.Secondary = nil
	return b
}

// GetSecondary gets the Secondary field in the declarative configuration
func (b *AssociativeTypeApplyConfiguration) GetSecondary() (value int, ok bool) {
	if v := b.fields.Secondary; v != nil {
		return *v, true
	}
	return value, false
}

// SetFoo sets the Foo field in the declarative configuration to the given value
func (b *AssociativeTypeApplyConfiguration) SetFoo(value string) *AssociativeTypeApplyConfiguration {
	b.fields.Foo = &value
	return b
}

// RemoveFoo removes the Foo field in the declarative configuration
func (b *AssociativeTypeApplyConfiguration) RemoveFoo(value string) *AssociativeTypeApplyConfiguration {
	b.fields.Foo = nil
	return b
}

// GetFoo gets the Foo field in the declarative configuration
func (b *AssociativeTypeApplyConfiguration) GetFoo() (value string, ok bool) {
	if v := b.fields.Foo; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts AssociativeType to unstructured.
func (b *AssociativeTypeApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to AssociativeTypeApplyConfiguration, replacing the contents
// of AssociativeTypeApplyConfiguration.
func (b *AssociativeTypeApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &associativeTypeFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals AssociativeTypeApplyConfiguration to JSON.
func (b *AssociativeTypeApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into AssociativeTypeApplyConfiguration, replacing the contents of
// AssociativeTypeApplyConfiguration.
func (b *AssociativeTypeApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *AssociativeTypeApplyConfiguration) preMarshal() {
}
func (b *AssociativeTypeApplyConfiguration) postUnmarshal() {
}

// AssociativeTypeList represents a listAlias of AssociativeTypeApplyConfiguration.
type AssociativeTypeList []*AssociativeTypeApplyConfiguration

// AssociativeTypeMap represents a map of AssociativeTypeApplyConfiguration.
type AssociativeTypeMap map[string]AssociativeTypeApplyConfiguration

// CronJobApplyConfiguration represents a declarative configuration of the CronJob type for use
// with apply.
type CronJobApplyConfiguration struct {
	metav1.TypeMeta // inlined type
	fields          cronJobFields
}

// cronJob owns all fields except inlined fields
type cronJobFields struct {
	*metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec               *CronJobSpecApplyConfiguration   `json:"spec,omitempty"`
	Status             *CronJobStatusApplyConfiguration `json:"status,omitempty"`
}

// SetSpec sets the Spec field in the declarative configuration to the given value
func (b *CronJobApplyConfiguration) SetSpec(value CronJobSpecApplyConfiguration) *CronJobApplyConfiguration {
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field in the declarative configuration
func (b *CronJobApplyConfiguration) RemoveSpec(value CronJobSpecApplyConfiguration) *CronJobApplyConfiguration {
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field in the declarative configuration
func (b *CronJobApplyConfiguration) GetSpec() (value CronJobSpecApplyConfiguration, ok bool) {
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value
func (b *CronJobApplyConfiguration) SetStatus(value CronJobStatusApplyConfiguration) *CronJobApplyConfiguration {
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field in the declarative configuration
func (b *CronJobApplyConfiguration) RemoveStatus(value CronJobStatusApplyConfiguration) *CronJobApplyConfiguration {
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field in the declarative configuration
func (b *CronJobApplyConfiguration) GetStatus() (value CronJobStatusApplyConfiguration, ok bool) {
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CronJob to unstructured.
func (b *CronJobApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CronJobApplyConfiguration, replacing the contents
// of CronJobApplyConfiguration.
func (b *CronJobApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &cronJobFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CronJobApplyConfiguration to JSON.
func (b *CronJobApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CronJobApplyConfiguration, replacing the contents of
// CronJobApplyConfiguration.
func (b *CronJobApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *CronJobApplyConfiguration) preMarshal() {
}
func (b *CronJobApplyConfiguration) postUnmarshal() {
}

// CronJobList represents a listAlias of CronJobApplyConfiguration.
type CronJobList []*CronJobApplyConfiguration

// CronJobMap represents a map of CronJobApplyConfiguration.
type CronJobMap map[string]CronJobApplyConfiguration

// CronJobListApplyConfiguration represents a declarative configuration of the CronJobList type for use
// with apply.
type CronJobListApplyConfiguration struct {
	metav1.TypeMeta // inlined type
	fields          cronJobListFields
}

// cronJobList owns all fields except inlined fields
type cronJobListFields struct {
	*metav1.ListMeta `json:"metadata,omitempty"`
	Items            *[]CronJobApplyConfiguration `json:"items,omitempty"`
}

// SetItems sets the Items field in the declarative configuration to the given value
func (b *CronJobListApplyConfiguration) SetItems(value []CronJobApplyConfiguration) *CronJobListApplyConfiguration {
	b.fields.Items = &value
	return b
}

// RemoveItems removes the Items field in the declarative configuration
func (b *CronJobListApplyConfiguration) RemoveItems(value []CronJobApplyConfiguration) *CronJobListApplyConfiguration {
	b.fields.Items = nil
	return b
}

// GetItems gets the Items field in the declarative configuration
func (b *CronJobListApplyConfiguration) GetItems() (value []CronJobApplyConfiguration, ok bool) {
	if v := b.fields.Items; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CronJobList to unstructured.
func (b *CronJobListApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CronJobListApplyConfiguration, replacing the contents
// of CronJobListApplyConfiguration.
func (b *CronJobListApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &cronJobListFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CronJobListApplyConfiguration to JSON.
func (b *CronJobListApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CronJobListApplyConfiguration, replacing the contents of
// CronJobListApplyConfiguration.
func (b *CronJobListApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *CronJobListApplyConfiguration) preMarshal() {
}
func (b *CronJobListApplyConfiguration) postUnmarshal() {
}

// CronJobListList represents a listAlias of CronJobListApplyConfiguration.
type CronJobListList []*CronJobListApplyConfiguration

// CronJobListMap represents a map of CronJobListApplyConfiguration.
type CronJobListMap map[string]CronJobListApplyConfiguration

// CronJobSpecApplyConfiguration represents a declarative configuration of the CronJobSpec type for use
// with apply.
type CronJobSpecApplyConfiguration struct {
	fields cronJobSpecFields
}

// cronJobSpec owns all fields except inlined fields
type cronJobSpecFields struct {
	Schedule                   *string                              `json:"schedule,omitempty"`
	StartingDeadlineSeconds    **int64                              `json:"startingDeadlineSeconds,omitempty"`
	ConcurrencyPolicy          *ConcurrencyPolicy                   `json:"concurrencyPolicy,omitempty"`
	Suspend                    **bool                               `json:"suspend,omitempty"`
	NoReallySuspend            **TotallyABool                       `json:"noReallySuspend,omitempty"`
	BinaryName                 *[]byte                              `json:"binaryName,omitempty"`
	CanBeNull                  *string                              `json:"canBeNull,omitempty"`
	JobTemplate                *v1beta1.JobTemplateSpec             `json:"jobTemplate,omitempty"`
	SuccessfulJobsHistoryLimit **int32                              `json:"successfulJobsHistoryLimit,omitempty"`
	FailedJobsHistoryLimit     **int32                              `json:"failedJobsHistoryLimit,omitempty"`
	ByteSliceData              *map[string][]byte                   `json:"byteSliceData,omitempty"`
	StringSliceData            *map[string][]string                 `json:"stringSliceData,omitempty"`
	PtrData                    *map[string]*string                  `json:"ptrData,omitempty"`
	TwoOfAKindPart0            *string                              `json:"twoOfAKindPart0,omitempty"`
	TwoOfAKindPart1            *LongerString                        `json:"twoOfAKindPart1,omitempty"`
	DefaultedString            *string                              `json:"defaultedString,omitempty"`
	DefaultedSlice             *[]string                            `json:"defaultedSlice,omitempty"`
	DefaultedObject            *[]RootObjectApplyConfiguration      `json:"defaultedObject,omitempty"`
	PatternObject              *string                              `json:"patternObject,omitempty"`
	EmbeddedResource           *runtime.RawExtension                `json:"embeddedResource,omitempty"`
	UnprunedJSON               *NestedObjectApplyConfiguration      `json:"unprunedJSON,omitempty"`
	UnprunedEmbeddedResource   *runtime.RawExtension                `json:"unprunedEmbeddedResource,omitempty"`
	UnprunedFromType           *PreservedApplyConfiguration         `json:"unprunedFomType,omitempty"`
	AssociativeList            *[]AssociativeTypeApplyConfiguration `json:"associativeList,omitempty"`
	MapOfInfo                  *map[string][]byte                   `json:"mapOfInfo,omitempty"`
	StructWithSeveralFields    *NestedObjectApplyConfiguration      `json:"structWithSeveralFields,omitempty"`
	JustNestedObject           **JustNestedObjectApplyConfiguration `json:"justNestedObject,omitempty"`
	MinMaxProperties           *MinMaxObjectApplyConfiguration      `json:"minMaxProperties,omitempty"`
}

// SetSchedule sets the Schedule field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetSchedule(value string) *CronJobSpecApplyConfiguration {
	b.fields.Schedule = &value
	return b
}

// RemoveSchedule removes the Schedule field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveSchedule(value string) *CronJobSpecApplyConfiguration {
	b.fields.Schedule = nil
	return b
}

// GetSchedule gets the Schedule field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetSchedule() (value string, ok bool) {
	if v := b.fields.Schedule; v != nil {
		return *v, true
	}
	return value, false
}

// SetStartingDeadlineSeconds sets the StartingDeadlineSeconds field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetStartingDeadlineSeconds(value *int64) *CronJobSpecApplyConfiguration {
	b.fields.StartingDeadlineSeconds = &value
	return b
}

// RemoveStartingDeadlineSeconds removes the StartingDeadlineSeconds field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveStartingDeadlineSeconds(value *int64) *CronJobSpecApplyConfiguration {
	b.fields.StartingDeadlineSeconds = nil
	return b
}

// GetStartingDeadlineSeconds gets the StartingDeadlineSeconds field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetStartingDeadlineSeconds() (value *int64, ok bool) {
	if v := b.fields.StartingDeadlineSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetConcurrencyPolicy sets the ConcurrencyPolicy field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetConcurrencyPolicy(value ConcurrencyPolicy) *CronJobSpecApplyConfiguration {
	b.fields.ConcurrencyPolicy = &value
	return b
}

// RemoveConcurrencyPolicy removes the ConcurrencyPolicy field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveConcurrencyPolicy(value ConcurrencyPolicy) *CronJobSpecApplyConfiguration {
	b.fields.ConcurrencyPolicy = nil
	return b
}

// GetConcurrencyPolicy gets the ConcurrencyPolicy field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetConcurrencyPolicy() (value ConcurrencyPolicy, ok bool) {
	if v := b.fields.ConcurrencyPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetSuspend sets the Suspend field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetSuspend(value *bool) *CronJobSpecApplyConfiguration {
	b.fields.Suspend = &value
	return b
}

// RemoveSuspend removes the Suspend field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveSuspend(value *bool) *CronJobSpecApplyConfiguration {
	b.fields.Suspend = nil
	return b
}

// GetSuspend gets the Suspend field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetSuspend() (value *bool, ok bool) {
	if v := b.fields.Suspend; v != nil {
		return *v, true
	}
	return value, false
}

// SetInternalData sets the InternalData field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetInternalData(value string) *CronJobSpecApplyConfiguration {
	return b
}

// RemoveInternalData removes the InternalData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveInternalData(value string) *CronJobSpecApplyConfiguration {
	b.fields.InternalData = nil
	return b
}

// GetInternalData gets the InternalData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetInternalData() (value string, ok bool) {
}

// SetNoReallySuspend sets the NoReallySuspend field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetNoReallySuspend(value *TotallyABool) *CronJobSpecApplyConfiguration {
	b.fields.NoReallySuspend = &value
	return b
}

// RemoveNoReallySuspend removes the NoReallySuspend field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveNoReallySuspend(value *TotallyABool) *CronJobSpecApplyConfiguration {
	b.fields.NoReallySuspend = nil
	return b
}

// GetNoReallySuspend gets the NoReallySuspend field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetNoReallySuspend() (value *TotallyABool, ok bool) {
	if v := b.fields.NoReallySuspend; v != nil {
		return *v, true
	}
	return value, false
}

// SetBinaryName sets the BinaryName field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetBinaryName(value []byte) *CronJobSpecApplyConfiguration {
	b.fields.BinaryName = &value
	return b
}

// RemoveBinaryName removes the BinaryName field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveBinaryName(value []byte) *CronJobSpecApplyConfiguration {
	b.fields.BinaryName = nil
	return b
}

// GetBinaryName gets the BinaryName field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetBinaryName() (value []byte, ok bool) {
	if v := b.fields.BinaryName; v != nil {
		return *v, true
	}
	return value, false
}

// SetCanBeNull sets the CanBeNull field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetCanBeNull(value string) *CronJobSpecApplyConfiguration {
	b.fields.CanBeNull = &value
	return b
}

// RemoveCanBeNull removes the CanBeNull field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveCanBeNull(value string) *CronJobSpecApplyConfiguration {
	b.fields.CanBeNull = nil
	return b
}

// GetCanBeNull gets the CanBeNull field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetCanBeNull() (value string, ok bool) {
	if v := b.fields.CanBeNull; v != nil {
		return *v, true
	}
	return value, false
}

// SetJobTemplate sets the JobTemplate field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetJobTemplate(value v1beta1.JobTemplateSpec) *CronJobSpecApplyConfiguration {
	b.fields.JobTemplate = &value
	return b
}

// RemoveJobTemplate removes the JobTemplate field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveJobTemplate(value v1beta1.JobTemplateSpec) *CronJobSpecApplyConfiguration {
	b.fields.JobTemplate = nil
	return b
}

// GetJobTemplate gets the JobTemplate field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetJobTemplate() (value v1beta1.JobTemplateSpec, ok bool) {
	if v := b.fields.JobTemplate; v != nil {
		return *v, true
	}
	return value, false
}

// SetSuccessfulJobsHistoryLimit sets the SuccessfulJobsHistoryLimit field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetSuccessfulJobsHistoryLimit(value *int32) *CronJobSpecApplyConfiguration {
	b.fields.SuccessfulJobsHistoryLimit = &value
	return b
}

// RemoveSuccessfulJobsHistoryLimit removes the SuccessfulJobsHistoryLimit field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveSuccessfulJobsHistoryLimit(value *int32) *CronJobSpecApplyConfiguration {
	b.fields.SuccessfulJobsHistoryLimit = nil
	return b
}

// GetSuccessfulJobsHistoryLimit gets the SuccessfulJobsHistoryLimit field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetSuccessfulJobsHistoryLimit() (value *int32, ok bool) {
	if v := b.fields.SuccessfulJobsHistoryLimit; v != nil {
		return *v, true
	}
	return value, false
}

// SetFailedJobsHistoryLimit sets the FailedJobsHistoryLimit field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetFailedJobsHistoryLimit(value *int32) *CronJobSpecApplyConfiguration {
	b.fields.FailedJobsHistoryLimit = &value
	return b
}

// RemoveFailedJobsHistoryLimit removes the FailedJobsHistoryLimit field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveFailedJobsHistoryLimit(value *int32) *CronJobSpecApplyConfiguration {
	b.fields.FailedJobsHistoryLimit = nil
	return b
}

// GetFailedJobsHistoryLimit gets the FailedJobsHistoryLimit field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetFailedJobsHistoryLimit() (value *int32, ok bool) {
	if v := b.fields.FailedJobsHistoryLimit; v != nil {
		return *v, true
	}
	return value, false
}

// SetByteSliceData sets the ByteSliceData field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetByteSliceData(value map[string][]byte) *CronJobSpecApplyConfiguration {
	b.fields.ByteSliceData = &value
	return b
}

// RemoveByteSliceData removes the ByteSliceData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveByteSliceData(value map[string][]byte) *CronJobSpecApplyConfiguration {
	b.fields.ByteSliceData = nil
	return b
}

// GetByteSliceData gets the ByteSliceData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetByteSliceData() (value map[string][]byte, ok bool) {
	if v := b.fields.ByteSliceData; v != nil {
		return *v, true
	}
	return value, false
}

// SetStringSliceData sets the StringSliceData field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetStringSliceData(value map[string][]string) *CronJobSpecApplyConfiguration {
	b.fields.StringSliceData = &value
	return b
}

// RemoveStringSliceData removes the StringSliceData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveStringSliceData(value map[string][]string) *CronJobSpecApplyConfiguration {
	b.fields.StringSliceData = nil
	return b
}

// GetStringSliceData gets the StringSliceData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetStringSliceData() (value map[string][]string, ok bool) {
	if v := b.fields.StringSliceData; v != nil {
		return *v, true
	}
	return value, false
}

// SetPtrData sets the PtrData field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetPtrData(value map[string]*string) *CronJobSpecApplyConfiguration {
	b.fields.PtrData = &value
	return b
}

// RemovePtrData removes the PtrData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemovePtrData(value map[string]*string) *CronJobSpecApplyConfiguration {
	b.fields.PtrData = nil
	return b
}

// GetPtrData gets the PtrData field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetPtrData() (value map[string]*string, ok bool) {
	if v := b.fields.PtrData; v != nil {
		return *v, true
	}
	return value, false
}

// SetTwoOfAKindPart0 sets the TwoOfAKindPart0 field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetTwoOfAKindPart0(value string) *CronJobSpecApplyConfiguration {
	b.fields.TwoOfAKindPart0 = &value
	return b
}

// RemoveTwoOfAKindPart0 removes the TwoOfAKindPart0 field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveTwoOfAKindPart0(value string) *CronJobSpecApplyConfiguration {
	b.fields.TwoOfAKindPart0 = nil
	return b
}

// GetTwoOfAKindPart0 gets the TwoOfAKindPart0 field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetTwoOfAKindPart0() (value string, ok bool) {
	if v := b.fields.TwoOfAKindPart0; v != nil {
		return *v, true
	}
	return value, false
}

// SetTwoOfAKindPart1 sets the TwoOfAKindPart1 field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetTwoOfAKindPart1(value LongerString) *CronJobSpecApplyConfiguration {
	b.fields.TwoOfAKindPart1 = &value
	return b
}

// RemoveTwoOfAKindPart1 removes the TwoOfAKindPart1 field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveTwoOfAKindPart1(value LongerString) *CronJobSpecApplyConfiguration {
	b.fields.TwoOfAKindPart1 = nil
	return b
}

// GetTwoOfAKindPart1 gets the TwoOfAKindPart1 field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetTwoOfAKindPart1() (value LongerString, ok bool) {
	if v := b.fields.TwoOfAKindPart1; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultedString sets the DefaultedString field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetDefaultedString(value string) *CronJobSpecApplyConfiguration {
	b.fields.DefaultedString = &value
	return b
}

// RemoveDefaultedString removes the DefaultedString field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveDefaultedString(value string) *CronJobSpecApplyConfiguration {
	b.fields.DefaultedString = nil
	return b
}

// GetDefaultedString gets the DefaultedString field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetDefaultedString() (value string, ok bool) {
	if v := b.fields.DefaultedString; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultedSlice sets the DefaultedSlice field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetDefaultedSlice(value []string) *CronJobSpecApplyConfiguration {
	b.fields.DefaultedSlice = &value
	return b
}

// RemoveDefaultedSlice removes the DefaultedSlice field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveDefaultedSlice(value []string) *CronJobSpecApplyConfiguration {
	b.fields.DefaultedSlice = nil
	return b
}

// GetDefaultedSlice gets the DefaultedSlice field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetDefaultedSlice() (value []string, ok bool) {
	if v := b.fields.DefaultedSlice; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultedObject sets the DefaultedObject field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetDefaultedObject(value []RootObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.DefaultedObject = &value
	return b
}

// RemoveDefaultedObject removes the DefaultedObject field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveDefaultedObject(value []RootObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.DefaultedObject = nil
	return b
}

// GetDefaultedObject gets the DefaultedObject field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetDefaultedObject() (value []RootObjectApplyConfiguration, ok bool) {
	if v := b.fields.DefaultedObject; v != nil {
		return *v, true
	}
	return value, false
}

// SetPatternObject sets the PatternObject field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetPatternObject(value string) *CronJobSpecApplyConfiguration {
	b.fields.PatternObject = &value
	return b
}

// RemovePatternObject removes the PatternObject field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemovePatternObject(value string) *CronJobSpecApplyConfiguration {
	b.fields.PatternObject = nil
	return b
}

// GetPatternObject gets the PatternObject field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetPatternObject() (value string, ok bool) {
	if v := b.fields.PatternObject; v != nil {
		return *v, true
	}
	return value, false
}

// SetEmbeddedResource sets the EmbeddedResource field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetEmbeddedResource(value runtime.RawExtension) *CronJobSpecApplyConfiguration {
	b.fields.EmbeddedResource = &value
	return b
}

// RemoveEmbeddedResource removes the EmbeddedResource field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveEmbeddedResource(value runtime.RawExtension) *CronJobSpecApplyConfiguration {
	b.fields.EmbeddedResource = nil
	return b
}

// GetEmbeddedResource gets the EmbeddedResource field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetEmbeddedResource() (value runtime.RawExtension, ok bool) {
	if v := b.fields.EmbeddedResource; v != nil {
		return *v, true
	}
	return value, false
}

// SetUnprunedJSON sets the UnprunedJSON field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetUnprunedJSON(value NestedObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.UnprunedJSON = &value
	return b
}

// RemoveUnprunedJSON removes the UnprunedJSON field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveUnprunedJSON(value NestedObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.UnprunedJSON = nil
	return b
}

// GetUnprunedJSON gets the UnprunedJSON field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetUnprunedJSON() (value NestedObjectApplyConfiguration, ok bool) {
	if v := b.fields.UnprunedJSON; v != nil {
		return *v, true
	}
	return value, false
}

// SetUnprunedEmbeddedResource sets the UnprunedEmbeddedResource field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetUnprunedEmbeddedResource(value runtime.RawExtension) *CronJobSpecApplyConfiguration {
	b.fields.UnprunedEmbeddedResource = &value
	return b
}

// RemoveUnprunedEmbeddedResource removes the UnprunedEmbeddedResource field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveUnprunedEmbeddedResource(value runtime.RawExtension) *CronJobSpecApplyConfiguration {
	b.fields.UnprunedEmbeddedResource = nil
	return b
}

// GetUnprunedEmbeddedResource gets the UnprunedEmbeddedResource field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetUnprunedEmbeddedResource() (value runtime.RawExtension, ok bool) {
	if v := b.fields.UnprunedEmbeddedResource; v != nil {
		return *v, true
	}
	return value, false
}

// SetUnprunedFromType sets the UnprunedFromType field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetUnprunedFromType(value PreservedApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.UnprunedFromType = &value
	return b
}

// RemoveUnprunedFromType removes the UnprunedFromType field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveUnprunedFromType(value PreservedApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.UnprunedFromType = nil
	return b
}

// GetUnprunedFromType gets the UnprunedFromType field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetUnprunedFromType() (value PreservedApplyConfiguration, ok bool) {
	if v := b.fields.UnprunedFromType; v != nil {
		return *v, true
	}
	return value, false
}

// SetAssociativeList sets the AssociativeList field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetAssociativeList(value []AssociativeTypeApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.AssociativeList = &value
	return b
}

// RemoveAssociativeList removes the AssociativeList field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveAssociativeList(value []AssociativeTypeApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.AssociativeList = nil
	return b
}

// GetAssociativeList gets the AssociativeList field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetAssociativeList() (value []AssociativeTypeApplyConfiguration, ok bool) {
	if v := b.fields.AssociativeList; v != nil {
		return *v, true
	}
	return value, false
}

// SetMapOfInfo sets the MapOfInfo field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetMapOfInfo(value map[string][]byte) *CronJobSpecApplyConfiguration {
	b.fields.MapOfInfo = &value
	return b
}

// RemoveMapOfInfo removes the MapOfInfo field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveMapOfInfo(value map[string][]byte) *CronJobSpecApplyConfiguration {
	b.fields.MapOfInfo = nil
	return b
}

// GetMapOfInfo gets the MapOfInfo field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetMapOfInfo() (value map[string][]byte, ok bool) {
	if v := b.fields.MapOfInfo; v != nil {
		return *v, true
	}
	return value, false
}

// SetStructWithSeveralFields sets the StructWithSeveralFields field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetStructWithSeveralFields(value NestedObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.StructWithSeveralFields = &value
	return b
}

// RemoveStructWithSeveralFields removes the StructWithSeveralFields field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveStructWithSeveralFields(value NestedObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.StructWithSeveralFields = nil
	return b
}

// GetStructWithSeveralFields gets the StructWithSeveralFields field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetStructWithSeveralFields() (value NestedObjectApplyConfiguration, ok bool) {
	if v := b.fields.StructWithSeveralFields; v != nil {
		return *v, true
	}
	return value, false
}

// SetJustNestedObject sets the JustNestedObject field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetJustNestedObject(value *JustNestedObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.JustNestedObject = &value
	return b
}

// RemoveJustNestedObject removes the JustNestedObject field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveJustNestedObject(value *JustNestedObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.JustNestedObject = nil
	return b
}

// GetJustNestedObject gets the JustNestedObject field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetJustNestedObject() (value *JustNestedObjectApplyConfiguration, ok bool) {
	if v := b.fields.JustNestedObject; v != nil {
		return *v, true
	}
	return value, false
}

// SetMinMaxProperties sets the MinMaxProperties field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) SetMinMaxProperties(value MinMaxObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.MinMaxProperties = &value
	return b
}

// RemoveMinMaxProperties removes the MinMaxProperties field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) RemoveMinMaxProperties(value MinMaxObjectApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.fields.MinMaxProperties = nil
	return b
}

// GetMinMaxProperties gets the MinMaxProperties field in the declarative configuration
func (b *CronJobSpecApplyConfiguration) GetMinMaxProperties() (value MinMaxObjectApplyConfiguration, ok bool) {
	if v := b.fields.MinMaxProperties; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CronJobSpec to unstructured.
func (b *CronJobSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CronJobSpecApplyConfiguration, replacing the contents
// of CronJobSpecApplyConfiguration.
func (b *CronJobSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &cronJobSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CronJobSpecApplyConfiguration to JSON.
func (b *CronJobSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CronJobSpecApplyConfiguration, replacing the contents of
// CronJobSpecApplyConfiguration.
func (b *CronJobSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *CronJobSpecApplyConfiguration) preMarshal() {
}
func (b *CronJobSpecApplyConfiguration) postUnmarshal() {
}

// CronJobSpecList represents a listAlias of CronJobSpecApplyConfiguration.
type CronJobSpecList []*CronJobSpecApplyConfiguration

// CronJobSpecMap represents a map of CronJobSpecApplyConfiguration.
type CronJobSpecMap map[string]CronJobSpecApplyConfiguration

// CronJobStatusApplyConfiguration represents a declarative configuration of the CronJobStatus type for use
// with apply.
type CronJobStatusApplyConfiguration struct {
	fields cronJobStatusFields
}

// cronJobStatus owns all fields except inlined fields
type cronJobStatusFields struct {
	Active                *[]v1.ObjectReference `json:"active,omitempty"`
	LastScheduleTime      **metav1.Time         `json:"lastScheduleTime,omitempty"`
	LastScheduleMicroTime **metav1.MicroTime    `json:"lastScheduleMicroTime,omitempty"`
}

// SetActive sets the Active field in the declarative configuration to the given value
func (b *CronJobStatusApplyConfiguration) SetActive(value []v1.ObjectReference) *CronJobStatusApplyConfiguration {
	b.fields.Active = &value
	return b
}

// RemoveActive removes the Active field in the declarative configuration
func (b *CronJobStatusApplyConfiguration) RemoveActive(value []v1.ObjectReference) *CronJobStatusApplyConfiguration {
	b.fields.Active = nil
	return b
}

// GetActive gets the Active field in the declarative configuration
func (b *CronJobStatusApplyConfiguration) GetActive() (value []v1.ObjectReference, ok bool) {
	if v := b.fields.Active; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastScheduleTime sets the LastScheduleTime field in the declarative configuration to the given value
func (b *CronJobStatusApplyConfiguration) SetLastScheduleTime(value *metav1.Time) *CronJobStatusApplyConfiguration {
	b.fields.LastScheduleTime = &value
	return b
}

// RemoveLastScheduleTime removes the LastScheduleTime field in the declarative configuration
func (b *CronJobStatusApplyConfiguration) RemoveLastScheduleTime(value *metav1.Time) *CronJobStatusApplyConfiguration {
	b.fields.LastScheduleTime = nil
	return b
}

// GetLastScheduleTime gets the LastScheduleTime field in the declarative configuration
func (b *CronJobStatusApplyConfiguration) GetLastScheduleTime() (value *metav1.Time, ok bool) {
	if v := b.fields.LastScheduleTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastScheduleMicroTime sets the LastScheduleMicroTime field in the declarative configuration to the given value
func (b *CronJobStatusApplyConfiguration) SetLastScheduleMicroTime(value *metav1.MicroTime) *CronJobStatusApplyConfiguration {
	b.fields.LastScheduleMicroTime = &value
	return b
}

// RemoveLastScheduleMicroTime removes the LastScheduleMicroTime field in the declarative configuration
func (b *CronJobStatusApplyConfiguration) RemoveLastScheduleMicroTime(value *metav1.MicroTime) *CronJobStatusApplyConfiguration {
	b.fields.LastScheduleMicroTime = nil
	return b
}

// GetLastScheduleMicroTime gets the LastScheduleMicroTime field in the declarative configuration
func (b *CronJobStatusApplyConfiguration) GetLastScheduleMicroTime() (value *metav1.MicroTime, ok bool) {
	if v := b.fields.LastScheduleMicroTime; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CronJobStatus to unstructured.
func (b *CronJobStatusApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CronJobStatusApplyConfiguration, replacing the contents
// of CronJobStatusApplyConfiguration.
func (b *CronJobStatusApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &cronJobStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CronJobStatusApplyConfiguration to JSON.
func (b *CronJobStatusApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CronJobStatusApplyConfiguration, replacing the contents of
// CronJobStatusApplyConfiguration.
func (b *CronJobStatusApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *CronJobStatusApplyConfiguration) preMarshal() {
}
func (b *CronJobStatusApplyConfiguration) postUnmarshal() {
}

// CronJobStatusList represents a listAlias of CronJobStatusApplyConfiguration.
type CronJobStatusList []*CronJobStatusApplyConfiguration

// CronJobStatusMap represents a map of CronJobStatusApplyConfiguration.
type CronJobStatusMap map[string]CronJobStatusApplyConfiguration

// JustNestedObjectApplyConfiguration represents a declarative configuration of the JustNestedObject type for use
// with apply.
type JustNestedObjectApplyConfiguration struct {
	fields justNestedObjectFields
}

// justNestedObject owns all fields except inlined fields
type justNestedObjectFields struct {
}

// ToUnstructured converts JustNestedObject to unstructured.
func (b *JustNestedObjectApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to JustNestedObjectApplyConfiguration, replacing the contents
// of JustNestedObjectApplyConfiguration.
func (b *JustNestedObjectApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &justNestedObjectFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals JustNestedObjectApplyConfiguration to JSON.
func (b *JustNestedObjectApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into JustNestedObjectApplyConfiguration, replacing the contents of
// JustNestedObjectApplyConfiguration.
func (b *JustNestedObjectApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *JustNestedObjectApplyConfiguration) preMarshal() {
}
func (b *JustNestedObjectApplyConfiguration) postUnmarshal() {
}

// JustNestedObjectList represents a listAlias of JustNestedObjectApplyConfiguration.
type JustNestedObjectList []*JustNestedObjectApplyConfiguration

// JustNestedObjectMap represents a map of JustNestedObjectApplyConfiguration.
type JustNestedObjectMap map[string]JustNestedObjectApplyConfiguration

// MinMaxObjectApplyConfiguration represents a declarative configuration of the MinMaxObject type for use
// with apply.
type MinMaxObjectApplyConfiguration struct {
	fields minMaxObjectFields
}

// minMaxObject owns all fields except inlined fields
type minMaxObjectFields struct {
	Foo *string `json:"foo,omitempty"`
	Bar *string `json:"bar,omitempty"`
	Baz *string `json:"baz,omitempty"`
}

// SetFoo sets the Foo field in the declarative configuration to the given value
func (b *MinMaxObjectApplyConfiguration) SetFoo(value string) *MinMaxObjectApplyConfiguration {
	b.fields.Foo = &value
	return b
}

// RemoveFoo removes the Foo field in the declarative configuration
func (b *MinMaxObjectApplyConfiguration) RemoveFoo(value string) *MinMaxObjectApplyConfiguration {
	b.fields.Foo = nil
	return b
}

// GetFoo gets the Foo field in the declarative configuration
func (b *MinMaxObjectApplyConfiguration) GetFoo() (value string, ok bool) {
	if v := b.fields.Foo; v != nil {
		return *v, true
	}
	return value, false
}

// SetBar sets the Bar field in the declarative configuration to the given value
func (b *MinMaxObjectApplyConfiguration) SetBar(value string) *MinMaxObjectApplyConfiguration {
	b.fields.Bar = &value
	return b
}

// RemoveBar removes the Bar field in the declarative configuration
func (b *MinMaxObjectApplyConfiguration) RemoveBar(value string) *MinMaxObjectApplyConfiguration {
	b.fields.Bar = nil
	return b
}

// GetBar gets the Bar field in the declarative configuration
func (b *MinMaxObjectApplyConfiguration) GetBar() (value string, ok bool) {
	if v := b.fields.Bar; v != nil {
		return *v, true
	}
	return value, false
}

// SetBaz sets the Baz field in the declarative configuration to the given value
func (b *MinMaxObjectApplyConfiguration) SetBaz(value string) *MinMaxObjectApplyConfiguration {
	b.fields.Baz = &value
	return b
}

// RemoveBaz removes the Baz field in the declarative configuration
func (b *MinMaxObjectApplyConfiguration) RemoveBaz(value string) *MinMaxObjectApplyConfiguration {
	b.fields.Baz = nil
	return b
}

// GetBaz gets the Baz field in the declarative configuration
func (b *MinMaxObjectApplyConfiguration) GetBaz() (value string, ok bool) {
	if v := b.fields.Baz; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts MinMaxObject to unstructured.
func (b *MinMaxObjectApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to MinMaxObjectApplyConfiguration, replacing the contents
// of MinMaxObjectApplyConfiguration.
func (b *MinMaxObjectApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &minMaxObjectFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals MinMaxObjectApplyConfiguration to JSON.
func (b *MinMaxObjectApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into MinMaxObjectApplyConfiguration, replacing the contents of
// MinMaxObjectApplyConfiguration.
func (b *MinMaxObjectApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *MinMaxObjectApplyConfiguration) preMarshal() {
}
func (b *MinMaxObjectApplyConfiguration) postUnmarshal() {
}

// MinMaxObjectList represents a listAlias of MinMaxObjectApplyConfiguration.
type MinMaxObjectList []*MinMaxObjectApplyConfiguration

// MinMaxObjectMap represents a map of MinMaxObjectApplyConfiguration.
type MinMaxObjectMap map[string]MinMaxObjectApplyConfiguration

// NestedObjectApplyConfiguration represents a declarative configuration of the NestedObject type for use
// with apply.
type NestedObjectApplyConfiguration struct {
	fields nestedObjectFields
}

// nestedObject owns all fields except inlined fields
type nestedObjectFields struct {
	Foo *string `json:"foo,omitempty"`
	Bar *bool   `json:"bar,omitempty"`
}

// SetFoo sets the Foo field in the declarative configuration to the given value
func (b *NestedObjectApplyConfiguration) SetFoo(value string) *NestedObjectApplyConfiguration {
	b.fields.Foo = &value
	return b
}

// RemoveFoo removes the Foo field in the declarative configuration
func (b *NestedObjectApplyConfiguration) RemoveFoo(value string) *NestedObjectApplyConfiguration {
	b.fields.Foo = nil
	return b
}

// GetFoo gets the Foo field in the declarative configuration
func (b *NestedObjectApplyConfiguration) GetFoo() (value string, ok bool) {
	if v := b.fields.Foo; v != nil {
		return *v, true
	}
	return value, false
}

// SetBar sets the Bar field in the declarative configuration to the given value
func (b *NestedObjectApplyConfiguration) SetBar(value bool) *NestedObjectApplyConfiguration {
	b.fields.Bar = &value
	return b
}

// RemoveBar removes the Bar field in the declarative configuration
func (b *NestedObjectApplyConfiguration) RemoveBar(value bool) *NestedObjectApplyConfiguration {
	b.fields.Bar = nil
	return b
}

// GetBar gets the Bar field in the declarative configuration
func (b *NestedObjectApplyConfiguration) GetBar() (value bool, ok bool) {
	if v := b.fields.Bar; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NestedObject to unstructured.
func (b *NestedObjectApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NestedObjectApplyConfiguration, replacing the contents
// of NestedObjectApplyConfiguration.
func (b *NestedObjectApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &nestedObjectFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NestedObjectApplyConfiguration to JSON.
func (b *NestedObjectApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NestedObjectApplyConfiguration, replacing the contents of
// NestedObjectApplyConfiguration.
func (b *NestedObjectApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *NestedObjectApplyConfiguration) preMarshal() {
}
func (b *NestedObjectApplyConfiguration) postUnmarshal() {
}

// NestedObjectList represents a listAlias of NestedObjectApplyConfiguration.
type NestedObjectList []*NestedObjectApplyConfiguration

// NestedObjectMap represents a map of NestedObjectApplyConfiguration.
type NestedObjectMap map[string]NestedObjectApplyConfiguration

// PreservedApplyConfiguration represents a declarative configuration of the Preserved type for use
// with apply.
type PreservedApplyConfiguration struct {
	fields preservedFields
}

// preserved owns all fields except inlined fields
type preservedFields struct {
	ConcreteField *string `json:"concreteField,omitempty"`
}

// SetConcreteField sets the ConcreteField field in the declarative configuration to the given value
func (b *PreservedApplyConfiguration) SetConcreteField(value string) *PreservedApplyConfiguration {
	b.fields.ConcreteField = &value
	return b
}

// RemoveConcreteField removes the ConcreteField field in the declarative configuration
func (b *PreservedApplyConfiguration) RemoveConcreteField(value string) *PreservedApplyConfiguration {
	b.fields.ConcreteField = nil
	return b
}

// GetConcreteField gets the ConcreteField field in the declarative configuration
func (b *PreservedApplyConfiguration) GetConcreteField() (value string, ok bool) {
	if v := b.fields.ConcreteField; v != nil {
		return *v, true
	}
	return value, false
}

// SetRest sets the Rest field in the declarative configuration to the given value
func (b *PreservedApplyConfiguration) SetRest(value map[string]interface{}) *PreservedApplyConfiguration {
	return b
}

// RemoveRest removes the Rest field in the declarative configuration
func (b *PreservedApplyConfiguration) RemoveRest(value map[string]interface{}) *PreservedApplyConfiguration {
	b.fields.Rest = nil
	return b
}

// GetRest gets the Rest field in the declarative configuration
func (b *PreservedApplyConfiguration) GetRest() (value map[string]interface{}, ok bool) {
}

// ToUnstructured converts Preserved to unstructured.
func (b *PreservedApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PreservedApplyConfiguration, replacing the contents
// of PreservedApplyConfiguration.
func (b *PreservedApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &preservedFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PreservedApplyConfiguration to JSON.
func (b *PreservedApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PreservedApplyConfiguration, replacing the contents of
// PreservedApplyConfiguration.
func (b *PreservedApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *PreservedApplyConfiguration) preMarshal() {
}
func (b *PreservedApplyConfiguration) postUnmarshal() {
}

// PreservedList represents a listAlias of PreservedApplyConfiguration.
type PreservedList []*PreservedApplyConfiguration

// PreservedMap represents a map of PreservedApplyConfiguration.
type PreservedMap map[string]PreservedApplyConfiguration

// RootObjectApplyConfiguration represents a declarative configuration of the RootObject type for use
// with apply.
type RootObjectApplyConfiguration struct {
	fields rootObjectFields
}

// rootObject owns all fields except inlined fields
type rootObjectFields struct {
	Nested *NestedObjectApplyConfiguration `json:"nested,omitempty"`
}

// SetNested sets the Nested field in the declarative configuration to the given value
func (b *RootObjectApplyConfiguration) SetNested(value NestedObjectApplyConfiguration) *RootObjectApplyConfiguration {
	b.fields.Nested = &value
	return b
}

// RemoveNested removes the Nested field in the declarative configuration
func (b *RootObjectApplyConfiguration) RemoveNested(value NestedObjectApplyConfiguration) *RootObjectApplyConfiguration {
	b.fields.Nested = nil
	return b
}

// GetNested gets the Nested field in the declarative configuration
func (b *RootObjectApplyConfiguration) GetNested() (value NestedObjectApplyConfiguration, ok bool) {
	if v := b.fields.Nested; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RootObject to unstructured.
func (b *RootObjectApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RootObjectApplyConfiguration, replacing the contents
// of RootObjectApplyConfiguration.
func (b *RootObjectApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &rootObjectFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RootObjectApplyConfiguration to JSON.
func (b *RootObjectApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RootObjectApplyConfiguration, replacing the contents of
// RootObjectApplyConfiguration.
func (b *RootObjectApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

func (b *RootObjectApplyConfiguration) preMarshal() {
}
func (b *RootObjectApplyConfiguration) postUnmarshal() {
}

// RootObjectList represents a listAlias of RootObjectApplyConfiguration.
type RootObjectList []*RootObjectApplyConfiguration

// RootObjectMap represents a map of RootObjectApplyConfiguration.
type RootObjectMap map[string]RootObjectApplyConfiguration
