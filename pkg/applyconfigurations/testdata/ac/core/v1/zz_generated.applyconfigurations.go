// +build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/intstr"
	metav1 "sigs.k8s.io/controller-tools/pkg/applyconfigurations/testdata/ac/meta/v1"
)

// AWSElasticBlockStoreVolumeSourceApplyConfiguration represents a declarative configuration of the AWSElasticBlockStoreVolumeSource type for use
// with apply.
type AWSElasticBlockStoreVolumeSourceApplyConfiguration struct {
	VolumeID  *string `json:"volumeID,omitempty"`
	FSType    *string `json:"fsType,omitempty"`
	Partition *int32  `json:"partition,omitempty"`
	ReadOnly  *bool   `json:"readOnly,omitempty"`
}

// AWSElasticBlockStoreVolumeSourceApplyConfiguration represents a declarative configuration of the AWSElasticBlockStoreVolumeSource type for use
// with apply.
func AWSElasticBlockStoreVolumeSource() *AWSElasticBlockStoreVolumeSourceApplyConfiguration {
	return &AWSElasticBlockStoreVolumeSourceApplyConfiguration{}
}

// AffinityApplyConfiguration represents a declarative configuration of the Affinity type for use
// with apply.
type AffinityApplyConfiguration struct {
	NodeAffinity    *NodeAffinityApplyConfiguration    `json:"nodeAffinity,omitempty"`
	PodAffinity     *PodAffinityApplyConfiguration     `json:"podAffinity,omitempty"`
	PodAntiAffinity *PodAntiAffinityApplyConfiguration `json:"podAntiAffinity,omitempty"`
}

// AffinityApplyConfiguration represents a declarative configuration of the Affinity type for use
// with apply.
func Affinity() *AffinityApplyConfiguration {
	return &AffinityApplyConfiguration{}
}

// AttachedVolumeApplyConfiguration represents a declarative configuration of the AttachedVolume type for use
// with apply.
type AttachedVolumeApplyConfiguration struct {
	Name       *corev1.UniqueVolumeName `json:"name,omitempty"`
	DevicePath *string                  `json:"devicePath,omitempty"`
}

// AttachedVolumeApplyConfiguration represents a declarative configuration of the AttachedVolume type for use
// with apply.
func AttachedVolume() *AttachedVolumeApplyConfiguration {
	return &AttachedVolumeApplyConfiguration{}
}

// AvoidPodsApplyConfiguration represents a declarative configuration of the AvoidPods type for use
// with apply.
type AvoidPodsApplyConfiguration struct {
	PreferAvoidPods *[]PreferAvoidPodsEntryApplyConfiguration `json:"preferAvoidPods,omitempty"`
}

// AvoidPodsApplyConfiguration represents a declarative configuration of the AvoidPods type for use
// with apply.
func AvoidPods() *AvoidPodsApplyConfiguration {
	return &AvoidPodsApplyConfiguration{}
}

// AzureDiskVolumeSourceApplyConfiguration represents a declarative configuration of the AzureDiskVolumeSource type for use
// with apply.
type AzureDiskVolumeSourceApplyConfiguration struct {
	DiskName    *string                          `json:"diskName,omitempty"`
	DataDiskURI *string                          `json:"diskURI,omitempty"`
	CachingMode *corev1.AzureDataDiskCachingMode `json:"cachingMode,omitempty"`
	FSType      *string                          `json:"fsType,omitempty"`
	ReadOnly    *bool                            `json:"readOnly,omitempty"`
	Kind        *corev1.AzureDataDiskKind        `json:"kind,omitempty"`
}

// AzureDiskVolumeSourceApplyConfiguration represents a declarative configuration of the AzureDiskVolumeSource type for use
// with apply.
func AzureDiskVolumeSource() *AzureDiskVolumeSourceApplyConfiguration {
	return &AzureDiskVolumeSourceApplyConfiguration{}
}

// AzureFilePersistentVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFilePersistentVolumeSource type for use
// with apply.
type AzureFilePersistentVolumeSourceApplyConfiguration struct {
	SecretName      *string `json:"secretName,omitempty"`
	ShareName       *string `json:"shareName,omitempty"`
	ReadOnly        *bool   `json:"readOnly,omitempty"`
	SecretNamespace *string `json:"secretNamespace,omitempty"`
}

// AzureFilePersistentVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFilePersistentVolumeSource type for use
// with apply.
func AzureFilePersistentVolumeSource() *AzureFilePersistentVolumeSourceApplyConfiguration {
	return &AzureFilePersistentVolumeSourceApplyConfiguration{}
}

// AzureFileVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFileVolumeSource type for use
// with apply.
type AzureFileVolumeSourceApplyConfiguration struct {
	SecretName *string `json:"secretName,omitempty"`
	ShareName  *string `json:"shareName,omitempty"`
	ReadOnly   *bool   `json:"readOnly,omitempty"`
}

// AzureFileVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFileVolumeSource type for use
// with apply.
func AzureFileVolumeSource() *AzureFileVolumeSourceApplyConfiguration {
	return &AzureFileVolumeSourceApplyConfiguration{}
}

// BindingApplyConfiguration represents a declarative configuration of the Binding type for use
// with apply.
type BindingApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Target                               *ObjectReferenceApplyConfiguration `json:"target,omitempty"`
}

// BindingApplyConfiguration represents a declarative configuration of the Binding type for use
// with apply.
func Binding() *BindingApplyConfiguration {
	return &BindingApplyConfiguration{}
}

// CSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CSIPersistentVolumeSource type for use
// with apply.
type CSIPersistentVolumeSourceApplyConfiguration struct {
	Driver                     *string                            `json:"driver,omitempty"`
	VolumeHandle               *string                            `json:"volumeHandle,omitempty"`
	ReadOnly                   *bool                              `json:"readOnly,omitempty"`
	FSType                     *string                            `json:"fsType,omitempty"`
	VolumeAttributes           *map[string]string                 `json:"volumeAttributes,omitempty"`
	ControllerPublishSecretRef *SecretReferenceApplyConfiguration `json:"controllerPublishSecretRef,omitempty"`
	NodeStageSecretRef         *SecretReferenceApplyConfiguration `json:"nodeStageSecretRef,omitempty"`
	NodePublishSecretRef       *SecretReferenceApplyConfiguration `json:"nodePublishSecretRef,omitempty"`
	ControllerExpandSecretRef  *SecretReferenceApplyConfiguration `json:"controllerExpandSecretRef,omitempty"`
}

// CSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CSIPersistentVolumeSource type for use
// with apply.
func CSIPersistentVolumeSource() *CSIPersistentVolumeSourceApplyConfiguration {
	return &CSIPersistentVolumeSourceApplyConfiguration{}
}

// CSIVolumeSourceApplyConfiguration represents a declarative configuration of the CSIVolumeSource type for use
// with apply.
type CSIVolumeSourceApplyConfiguration struct {
	Driver               *string                                 `json:"driver,omitempty"`
	ReadOnly             *bool                                   `json:"readOnly,omitempty"`
	FSType               *string                                 `json:"fsType,omitempty"`
	VolumeAttributes     *map[string]string                      `json:"volumeAttributes,omitempty"`
	NodePublishSecretRef *LocalObjectReferenceApplyConfiguration `json:"nodePublishSecretRef,omitempty"`
}

// CSIVolumeSourceApplyConfiguration represents a declarative configuration of the CSIVolumeSource type for use
// with apply.
func CSIVolumeSource() *CSIVolumeSourceApplyConfiguration {
	return &CSIVolumeSourceApplyConfiguration{}
}

// CapabilitiesApplyConfiguration represents a declarative configuration of the Capabilities type for use
// with apply.
type CapabilitiesApplyConfiguration struct {
	Add  *[]corev1.Capability `json:"add,omitempty"`
	Drop *[]corev1.Capability `json:"drop,omitempty"`
}

// CapabilitiesApplyConfiguration represents a declarative configuration of the Capabilities type for use
// with apply.
func Capabilities() *CapabilitiesApplyConfiguration {
	return &CapabilitiesApplyConfiguration{}
}

// CephFSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSPersistentVolumeSource type for use
// with apply.
type CephFSPersistentVolumeSourceApplyConfiguration struct {
	Monitors   *[]string                          `json:"monitors,omitempty"`
	Path       *string                            `json:"path,omitempty"`
	User       *string                            `json:"user,omitempty"`
	SecretFile *string                            `json:"secretFile,omitempty"`
	SecretRef  *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly   *bool                              `json:"readOnly,omitempty"`
}

// CephFSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSPersistentVolumeSource type for use
// with apply.
func CephFSPersistentVolumeSource() *CephFSPersistentVolumeSourceApplyConfiguration {
	return &CephFSPersistentVolumeSourceApplyConfiguration{}
}

// CephFSVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSVolumeSource type for use
// with apply.
type CephFSVolumeSourceApplyConfiguration struct {
	Monitors   *[]string                               `json:"monitors,omitempty"`
	Path       *string                                 `json:"path,omitempty"`
	User       *string                                 `json:"user,omitempty"`
	SecretFile *string                                 `json:"secretFile,omitempty"`
	SecretRef  *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly   *bool                                   `json:"readOnly,omitempty"`
}

// CephFSVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSVolumeSource type for use
// with apply.
func CephFSVolumeSource() *CephFSVolumeSourceApplyConfiguration {
	return &CephFSVolumeSourceApplyConfiguration{}
}

// CinderPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CinderPersistentVolumeSource type for use
// with apply.
type CinderPersistentVolumeSourceApplyConfiguration struct {
	VolumeID  *string                            `json:"volumeID,omitempty"`
	FSType    *string                            `json:"fsType,omitempty"`
	ReadOnly  *bool                              `json:"readOnly,omitempty"`
	SecretRef *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// CinderPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CinderPersistentVolumeSource type for use
// with apply.
func CinderPersistentVolumeSource() *CinderPersistentVolumeSourceApplyConfiguration {
	return &CinderPersistentVolumeSourceApplyConfiguration{}
}

// CinderVolumeSourceApplyConfiguration represents a declarative configuration of the CinderVolumeSource type for use
// with apply.
type CinderVolumeSourceApplyConfiguration struct {
	VolumeID  *string                                 `json:"volumeID,omitempty"`
	FSType    *string                                 `json:"fsType,omitempty"`
	ReadOnly  *bool                                   `json:"readOnly,omitempty"`
	SecretRef *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// CinderVolumeSourceApplyConfiguration represents a declarative configuration of the CinderVolumeSource type for use
// with apply.
func CinderVolumeSource() *CinderVolumeSourceApplyConfiguration {
	return &CinderVolumeSourceApplyConfiguration{}
}

// ClientIPConfigApplyConfiguration represents a declarative configuration of the ClientIPConfig type for use
// with apply.
type ClientIPConfigApplyConfiguration struct {
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// ClientIPConfigApplyConfiguration represents a declarative configuration of the ClientIPConfig type for use
// with apply.
func ClientIPConfig() *ClientIPConfigApplyConfiguration {
	return &ClientIPConfigApplyConfiguration{}
}

// ComponentConditionApplyConfiguration represents a declarative configuration of the ComponentCondition type for use
// with apply.
type ComponentConditionApplyConfiguration struct {
	Type    *corev1.ComponentConditionType `json:"type,omitempty"`
	Status  *corev1.ConditionStatus        `json:"status,omitempty"`
	Message *string                        `json:"message,omitempty"`
	Error   *string                        `json:"error,omitempty"`
}

// ComponentConditionApplyConfiguration represents a declarative configuration of the ComponentCondition type for use
// with apply.
func ComponentCondition() *ComponentConditionApplyConfiguration {
	return &ComponentConditionApplyConfiguration{}
}

// ComponentStatusApplyConfiguration represents a declarative configuration of the ComponentStatus type for use
// with apply.
type ComponentStatusApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Conditions                           *[]ComponentConditionApplyConfiguration `json:"conditions,omitempty"`
}

// ComponentStatusApplyConfiguration represents a declarative configuration of the ComponentStatus type for use
// with apply.
func ComponentStatus() *ComponentStatusApplyConfiguration {
	return &ComponentStatusApplyConfiguration{}
}

// ComponentStatusListApplyConfiguration represents a declarative configuration of the ComponentStatusList type for use
// with apply.
type ComponentStatusListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ComponentStatusApplyConfiguration `json:"items,omitempty"`
}

// ComponentStatusListApplyConfiguration represents a declarative configuration of the ComponentStatusList type for use
// with apply.
func ComponentStatusList() *ComponentStatusListApplyConfiguration {
	return &ComponentStatusListApplyConfiguration{}
}

// ConfigMapApplyConfiguration represents a declarative configuration of the ConfigMap type for use
// with apply.
type ConfigMapApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Immutable                            *bool              `json:"immutable,omitempty"`
	Data                                 *map[string]string `json:"data,omitempty"`
	BinaryData                           *map[string][]byte `json:"binaryData,omitempty"`
}

// ConfigMapApplyConfiguration represents a declarative configuration of the ConfigMap type for use
// with apply.
func ConfigMap() *ConfigMapApplyConfiguration {
	return &ConfigMapApplyConfiguration{}
}

// ConfigMapEnvSourceApplyConfiguration represents a declarative configuration of the ConfigMapEnvSource type for use
// with apply.
type ConfigMapEnvSourceApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Optional                               *bool `json:"optional,omitempty"`
}

// ConfigMapEnvSourceApplyConfiguration represents a declarative configuration of the ConfigMapEnvSource type for use
// with apply.
func ConfigMapEnvSource() *ConfigMapEnvSourceApplyConfiguration {
	return &ConfigMapEnvSourceApplyConfiguration{}
}

// ConfigMapKeySelectorApplyConfiguration represents a declarative configuration of the ConfigMapKeySelector type for use
// with apply.
type ConfigMapKeySelectorApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Key                                    *string `json:"key,omitempty"`
	Optional                               *bool   `json:"optional,omitempty"`
}

// ConfigMapKeySelectorApplyConfiguration represents a declarative configuration of the ConfigMapKeySelector type for use
// with apply.
func ConfigMapKeySelector() *ConfigMapKeySelectorApplyConfiguration {
	return &ConfigMapKeySelectorApplyConfiguration{}
}

// ConfigMapListApplyConfiguration represents a declarative configuration of the ConfigMapList type for use
// with apply.
type ConfigMapListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ConfigMapApplyConfiguration `json:"items,omitempty"`
}

// ConfigMapListApplyConfiguration represents a declarative configuration of the ConfigMapList type for use
// with apply.
func ConfigMapList() *ConfigMapListApplyConfiguration {
	return &ConfigMapListApplyConfiguration{}
}

// ConfigMapNodeConfigSourceApplyConfiguration represents a declarative configuration of the ConfigMapNodeConfigSource type for use
// with apply.
type ConfigMapNodeConfigSourceApplyConfiguration struct {
	Namespace        *string    `json:"namespace,omitempty"`
	Name             *string    `json:"name,omitempty"`
	UID              *types.UID `json:"uid,omitempty"`
	ResourceVersion  *string    `json:"resourceVersion,omitempty"`
	KubeletConfigKey *string    `json:"kubeletConfigKey,omitempty"`
}

// ConfigMapNodeConfigSourceApplyConfiguration represents a declarative configuration of the ConfigMapNodeConfigSource type for use
// with apply.
func ConfigMapNodeConfigSource() *ConfigMapNodeConfigSourceApplyConfiguration {
	return &ConfigMapNodeConfigSourceApplyConfiguration{}
}

// ConfigMapProjectionApplyConfiguration represents a declarative configuration of the ConfigMapProjection type for use
// with apply.
type ConfigMapProjectionApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Items                                  *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	Optional                               *bool                          `json:"optional,omitempty"`
}

// ConfigMapProjectionApplyConfiguration represents a declarative configuration of the ConfigMapProjection type for use
// with apply.
func ConfigMapProjection() *ConfigMapProjectionApplyConfiguration {
	return &ConfigMapProjectionApplyConfiguration{}
}

// ConfigMapVolumeSourceApplyConfiguration represents a declarative configuration of the ConfigMapVolumeSource type for use
// with apply.
type ConfigMapVolumeSourceApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Items                                  *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	DefaultMode                            *int32                         `json:"defaultMode,omitempty"`
	Optional                               *bool                          `json:"optional,omitempty"`
}

// ConfigMapVolumeSourceApplyConfiguration represents a declarative configuration of the ConfigMapVolumeSource type for use
// with apply.
func ConfigMapVolumeSource() *ConfigMapVolumeSourceApplyConfiguration {
	return &ConfigMapVolumeSourceApplyConfiguration{}
}

// ContainerApplyConfiguration represents a declarative configuration of the Container type for use
// with apply.
type ContainerApplyConfiguration struct {
	Name                     *string                                 `json:"name,omitempty"`
	Image                    *string                                 `json:"image,omitempty"`
	Command                  *[]string                               `json:"command,omitempty"`
	Args                     *[]string                               `json:"args,omitempty"`
	WorkingDir               *string                                 `json:"workingDir,omitempty"`
	Ports                    *[]ContainerPortApplyConfiguration      `json:"ports,omitempty"`
	EnvFrom                  *[]EnvFromSourceApplyConfiguration      `json:"envFrom,omitempty"`
	Env                      *[]EnvVarApplyConfiguration             `json:"env,omitempty"`
	Resources                *ResourceRequirementsApplyConfiguration `json:"resources,omitempty"`
	VolumeMounts             *[]VolumeMountApplyConfiguration        `json:"volumeMounts,omitempty"`
	VolumeDevices            *[]VolumeDeviceApplyConfiguration       `json:"volumeDevices,omitempty"`
	LivenessProbe            *ProbeApplyConfiguration                `json:"livenessProbe,omitempty"`
	ReadinessProbe           *ProbeApplyConfiguration                `json:"readinessProbe,omitempty"`
	StartupProbe             *ProbeApplyConfiguration                `json:"startupProbe,omitempty"`
	Lifecycle                *LifecycleApplyConfiguration            `json:"lifecycle,omitempty"`
	TerminationMessagePath   *string                                 `json:"terminationMessagePath,omitempty"`
	TerminationMessagePolicy *corev1.TerminationMessagePolicy        `json:"terminationMessagePolicy,omitempty"`
	ImagePullPolicy          *corev1.PullPolicy                      `json:"imagePullPolicy,omitempty"`
	SecurityContext          *SecurityContextApplyConfiguration      `json:"securityContext,omitempty"`
	Stdin                    *bool                                   `json:"stdin,omitempty"`
	StdinOnce                *bool                                   `json:"stdinOnce,omitempty"`
	TTY                      *bool                                   `json:"tty,omitempty"`
}

// ContainerApplyConfiguration represents a declarative configuration of the Container type for use
// with apply.
func Container() *ContainerApplyConfiguration {
	return &ContainerApplyConfiguration{}
}

// ContainerImageApplyConfiguration represents a declarative configuration of the ContainerImage type for use
// with apply.
type ContainerImageApplyConfiguration struct {
	Names     *[]string `json:"names,omitempty"`
	SizeBytes *int64    `json:"sizeBytes,omitempty"`
}

// ContainerImageApplyConfiguration represents a declarative configuration of the ContainerImage type for use
// with apply.
func ContainerImage() *ContainerImageApplyConfiguration {
	return &ContainerImageApplyConfiguration{}
}

// ContainerPortApplyConfiguration represents a declarative configuration of the ContainerPort type for use
// with apply.
type ContainerPortApplyConfiguration struct {
	Name          *string          `json:"name,omitempty"`
	HostPort      *int32           `json:"hostPort,omitempty"`
	ContainerPort *int32           `json:"containerPort,omitempty"`
	Protocol      *corev1.Protocol `json:"protocol,omitempty"`
	HostIP        *string          `json:"hostIP,omitempty"`
}

// ContainerPortApplyConfiguration represents a declarative configuration of the ContainerPort type for use
// with apply.
func ContainerPort() *ContainerPortApplyConfiguration {
	return &ContainerPortApplyConfiguration{}
}

// ContainerStateApplyConfiguration represents a declarative configuration of the ContainerState type for use
// with apply.
type ContainerStateApplyConfiguration struct {
	Waiting    *ContainerStateWaitingApplyConfiguration    `json:"waiting,omitempty"`
	Running    *ContainerStateRunningApplyConfiguration    `json:"running,omitempty"`
	Terminated *ContainerStateTerminatedApplyConfiguration `json:"terminated,omitempty"`
}

// ContainerStateApplyConfiguration represents a declarative configuration of the ContainerState type for use
// with apply.
func ContainerState() *ContainerStateApplyConfiguration {
	return &ContainerStateApplyConfiguration{}
}

// ContainerStateRunningApplyConfiguration represents a declarative configuration of the ContainerStateRunning type for use
// with apply.
type ContainerStateRunningApplyConfiguration struct {
	StartedAt *apismetav1.Time `json:"startedAt,omitempty"`
}

// ContainerStateRunningApplyConfiguration represents a declarative configuration of the ContainerStateRunning type for use
// with apply.
func ContainerStateRunning() *ContainerStateRunningApplyConfiguration {
	return &ContainerStateRunningApplyConfiguration{}
}

// ContainerStateTerminatedApplyConfiguration represents a declarative configuration of the ContainerStateTerminated type for use
// with apply.
type ContainerStateTerminatedApplyConfiguration struct {
	ExitCode    *int32           `json:"exitCode,omitempty"`
	Signal      *int32           `json:"signal,omitempty"`
	Reason      *string          `json:"reason,omitempty"`
	Message     *string          `json:"message,omitempty"`
	StartedAt   *apismetav1.Time `json:"startedAt,omitempty"`
	FinishedAt  *apismetav1.Time `json:"finishedAt,omitempty"`
	ContainerID *string          `json:"containerID,omitempty"`
}

// ContainerStateTerminatedApplyConfiguration represents a declarative configuration of the ContainerStateTerminated type for use
// with apply.
func ContainerStateTerminated() *ContainerStateTerminatedApplyConfiguration {
	return &ContainerStateTerminatedApplyConfiguration{}
}

// ContainerStateWaitingApplyConfiguration represents a declarative configuration of the ContainerStateWaiting type for use
// with apply.
type ContainerStateWaitingApplyConfiguration struct {
	Reason  *string `json:"reason,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ContainerStateWaitingApplyConfiguration represents a declarative configuration of the ContainerStateWaiting type for use
// with apply.
func ContainerStateWaiting() *ContainerStateWaitingApplyConfiguration {
	return &ContainerStateWaitingApplyConfiguration{}
}

// ContainerStatusApplyConfiguration represents a declarative configuration of the ContainerStatus type for use
// with apply.
type ContainerStatusApplyConfiguration struct {
	Name                 *string                           `json:"name,omitempty"`
	State                *ContainerStateApplyConfiguration `json:"state,omitempty"`
	LastTerminationState *ContainerStateApplyConfiguration `json:"lastState,omitempty"`
	Ready                *bool                             `json:"ready,omitempty"`
	RestartCount         *int32                            `json:"restartCount,omitempty"`
	Image                *string                           `json:"image,omitempty"`
	ImageID              *string                           `json:"imageID,omitempty"`
	ContainerID          *string                           `json:"containerID,omitempty"`
	Started              *bool                             `json:"started,omitempty"`
}

// ContainerStatusApplyConfiguration represents a declarative configuration of the ContainerStatus type for use
// with apply.
func ContainerStatus() *ContainerStatusApplyConfiguration {
	return &ContainerStatusApplyConfiguration{}
}

// DaemonEndpointApplyConfiguration represents a declarative configuration of the DaemonEndpoint type for use
// with apply.
type DaemonEndpointApplyConfiguration struct {
	Port *int32 `json:"Port,omitempty"`
}

// DaemonEndpointApplyConfiguration represents a declarative configuration of the DaemonEndpoint type for use
// with apply.
func DaemonEndpoint() *DaemonEndpointApplyConfiguration {
	return &DaemonEndpointApplyConfiguration{}
}

// DownwardAPIProjectionApplyConfiguration represents a declarative configuration of the DownwardAPIProjection type for use
// with apply.
type DownwardAPIProjectionApplyConfiguration struct {
	Items *[]DownwardAPIVolumeFileApplyConfiguration `json:"items,omitempty"`
}

// DownwardAPIProjectionApplyConfiguration represents a declarative configuration of the DownwardAPIProjection type for use
// with apply.
func DownwardAPIProjection() *DownwardAPIProjectionApplyConfiguration {
	return &DownwardAPIProjectionApplyConfiguration{}
}

// DownwardAPIVolumeFileApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeFile type for use
// with apply.
type DownwardAPIVolumeFileApplyConfiguration struct {
	Path             *string                                  `json:"path,omitempty"`
	FieldRef         *ObjectFieldSelectorApplyConfiguration   `json:"fieldRef,omitempty"`
	ResourceFieldRef *ResourceFieldSelectorApplyConfiguration `json:"resourceFieldRef,omitempty"`
	Mode             *int32                                   `json:"mode,omitempty"`
}

// DownwardAPIVolumeFileApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeFile type for use
// with apply.
func DownwardAPIVolumeFile() *DownwardAPIVolumeFileApplyConfiguration {
	return &DownwardAPIVolumeFileApplyConfiguration{}
}

// DownwardAPIVolumeSourceApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeSource type for use
// with apply.
type DownwardAPIVolumeSourceApplyConfiguration struct {
	Items       *[]DownwardAPIVolumeFileApplyConfiguration `json:"items,omitempty"`
	DefaultMode *int32                                     `json:"defaultMode,omitempty"`
}

// DownwardAPIVolumeSourceApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeSource type for use
// with apply.
func DownwardAPIVolumeSource() *DownwardAPIVolumeSourceApplyConfiguration {
	return &DownwardAPIVolumeSourceApplyConfiguration{}
}

// EmptyDirVolumeSourceApplyConfiguration represents a declarative configuration of the EmptyDirVolumeSource type for use
// with apply.
type EmptyDirVolumeSourceApplyConfiguration struct {
	Medium    *corev1.StorageMedium `json:"medium,omitempty"`
	SizeLimit *resource.Quantity    `json:"sizeLimit,omitempty"`
}

// EmptyDirVolumeSourceApplyConfiguration represents a declarative configuration of the EmptyDirVolumeSource type for use
// with apply.
func EmptyDirVolumeSource() *EmptyDirVolumeSourceApplyConfiguration {
	return &EmptyDirVolumeSourceApplyConfiguration{}
}

// EndpointAddressApplyConfiguration represents a declarative configuration of the EndpointAddress type for use
// with apply.
type EndpointAddressApplyConfiguration struct {
	IP        *string                            `json:"ip,omitempty"`
	Hostname  *string                            `json:"hostname,omitempty"`
	NodeName  *string                            `json:"nodeName,omitempty"`
	TargetRef *ObjectReferenceApplyConfiguration `json:"targetRef,omitempty"`
}

// EndpointAddressApplyConfiguration represents a declarative configuration of the EndpointAddress type for use
// with apply.
func EndpointAddress() *EndpointAddressApplyConfiguration {
	return &EndpointAddressApplyConfiguration{}
}

// EndpointPortApplyConfiguration represents a declarative configuration of the EndpointPort type for use
// with apply.
type EndpointPortApplyConfiguration struct {
	Name        *string          `json:"name,omitempty"`
	Port        *int32           `json:"port,omitempty"`
	Protocol    *corev1.Protocol `json:"protocol,omitempty"`
	AppProtocol *string          `json:"appProtocol,omitempty"`
}

// EndpointPortApplyConfiguration represents a declarative configuration of the EndpointPort type for use
// with apply.
func EndpointPort() *EndpointPortApplyConfiguration {
	return &EndpointPortApplyConfiguration{}
}

// EndpointSubsetApplyConfiguration represents a declarative configuration of the EndpointSubset type for use
// with apply.
type EndpointSubsetApplyConfiguration struct {
	Addresses         *[]EndpointAddressApplyConfiguration `json:"addresses,omitempty"`
	NotReadyAddresses *[]EndpointAddressApplyConfiguration `json:"notReadyAddresses,omitempty"`
	Ports             *[]EndpointPortApplyConfiguration    `json:"ports,omitempty"`
}

// EndpointSubsetApplyConfiguration represents a declarative configuration of the EndpointSubset type for use
// with apply.
func EndpointSubset() *EndpointSubsetApplyConfiguration {
	return &EndpointSubsetApplyConfiguration{}
}

// EndpointsApplyConfiguration represents a declarative configuration of the Endpoints type for use
// with apply.
type EndpointsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Subsets                              *[]EndpointSubsetApplyConfiguration `json:"subsets,omitempty"`
}

// EndpointsApplyConfiguration represents a declarative configuration of the Endpoints type for use
// with apply.
func Endpoints() *EndpointsApplyConfiguration {
	return &EndpointsApplyConfiguration{}
}

// EndpointsListApplyConfiguration represents a declarative configuration of the EndpointsList type for use
// with apply.
type EndpointsListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]EndpointsApplyConfiguration `json:"items,omitempty"`
}

// EndpointsListApplyConfiguration represents a declarative configuration of the EndpointsList type for use
// with apply.
func EndpointsList() *EndpointsListApplyConfiguration {
	return &EndpointsListApplyConfiguration{}
}

// EnvFromSourceApplyConfiguration represents a declarative configuration of the EnvFromSource type for use
// with apply.
type EnvFromSourceApplyConfiguration struct {
	Prefix       *string                               `json:"prefix,omitempty"`
	ConfigMapRef *ConfigMapEnvSourceApplyConfiguration `json:"configMapRef,omitempty"`
	SecretRef    *SecretEnvSourceApplyConfiguration    `json:"secretRef,omitempty"`
}

// EnvFromSourceApplyConfiguration represents a declarative configuration of the EnvFromSource type for use
// with apply.
func EnvFromSource() *EnvFromSourceApplyConfiguration {
	return &EnvFromSourceApplyConfiguration{}
}

// EnvVarApplyConfiguration represents a declarative configuration of the EnvVar type for use
// with apply.
type EnvVarApplyConfiguration struct {
	Name      *string                         `json:"name,omitempty"`
	Value     *string                         `json:"value,omitempty"`
	ValueFrom *EnvVarSourceApplyConfiguration `json:"valueFrom,omitempty"`
}

// EnvVarApplyConfiguration represents a declarative configuration of the EnvVar type for use
// with apply.
func EnvVar() *EnvVarApplyConfiguration {
	return &EnvVarApplyConfiguration{}
}

// EnvVarSourceApplyConfiguration represents a declarative configuration of the EnvVarSource type for use
// with apply.
type EnvVarSourceApplyConfiguration struct {
	FieldRef         *ObjectFieldSelectorApplyConfiguration   `json:"fieldRef,omitempty"`
	ResourceFieldRef *ResourceFieldSelectorApplyConfiguration `json:"resourceFieldRef,omitempty"`
	ConfigMapKeyRef  *ConfigMapKeySelectorApplyConfiguration  `json:"configMapKeyRef,omitempty"`
	SecretKeyRef     *SecretKeySelectorApplyConfiguration     `json:"secretKeyRef,omitempty"`
}

// EnvVarSourceApplyConfiguration represents a declarative configuration of the EnvVarSource type for use
// with apply.
func EnvVarSource() *EnvVarSourceApplyConfiguration {
	return &EnvVarSourceApplyConfiguration{}
}

// EphemeralContainerApplyConfiguration represents a declarative configuration of the EphemeralContainer type for use
// with apply.
type EphemeralContainerApplyConfiguration struct {
	EphemeralContainerCommonApplyConfiguration `json:",inline"`
	TargetContainerName                        *string `json:"targetContainerName,omitempty"`
}

// EphemeralContainerApplyConfiguration represents a declarative configuration of the EphemeralContainer type for use
// with apply.
func EphemeralContainer() *EphemeralContainerApplyConfiguration {
	return &EphemeralContainerApplyConfiguration{}
}

// EphemeralContainerCommonApplyConfiguration represents a declarative configuration of the EphemeralContainerCommon type for use
// with apply.
type EphemeralContainerCommonApplyConfiguration struct {
	Name                     *string                                 `json:"name,omitempty"`
	Image                    *string                                 `json:"image,omitempty"`
	Command                  *[]string                               `json:"command,omitempty"`
	Args                     *[]string                               `json:"args,omitempty"`
	WorkingDir               *string                                 `json:"workingDir,omitempty"`
	Ports                    *[]ContainerPortApplyConfiguration      `json:"ports,omitempty"`
	EnvFrom                  *[]EnvFromSourceApplyConfiguration      `json:"envFrom,omitempty"`
	Env                      *[]EnvVarApplyConfiguration             `json:"env,omitempty"`
	Resources                *ResourceRequirementsApplyConfiguration `json:"resources,omitempty"`
	VolumeMounts             *[]VolumeMountApplyConfiguration        `json:"volumeMounts,omitempty"`
	VolumeDevices            *[]VolumeDeviceApplyConfiguration       `json:"volumeDevices,omitempty"`
	LivenessProbe            *ProbeApplyConfiguration                `json:"livenessProbe,omitempty"`
	ReadinessProbe           *ProbeApplyConfiguration                `json:"readinessProbe,omitempty"`
	StartupProbe             *ProbeApplyConfiguration                `json:"startupProbe,omitempty"`
	Lifecycle                *LifecycleApplyConfiguration            `json:"lifecycle,omitempty"`
	TerminationMessagePath   *string                                 `json:"terminationMessagePath,omitempty"`
	TerminationMessagePolicy *corev1.TerminationMessagePolicy        `json:"terminationMessagePolicy,omitempty"`
	ImagePullPolicy          *corev1.PullPolicy                      `json:"imagePullPolicy,omitempty"`
	SecurityContext          *SecurityContextApplyConfiguration      `json:"securityContext,omitempty"`
	Stdin                    *bool                                   `json:"stdin,omitempty"`
	StdinOnce                *bool                                   `json:"stdinOnce,omitempty"`
	TTY                      *bool                                   `json:"tty,omitempty"`
}

// EphemeralContainerCommonApplyConfiguration represents a declarative configuration of the EphemeralContainerCommon type for use
// with apply.
func EphemeralContainerCommon() *EphemeralContainerCommonApplyConfiguration {
	return &EphemeralContainerCommonApplyConfiguration{}
}

// EphemeralContainersApplyConfiguration represents a declarative configuration of the EphemeralContainers type for use
// with apply.
type EphemeralContainersApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	EphemeralContainers                  *[]EphemeralContainerApplyConfiguration `json:"ephemeralContainers,omitempty"`
}

// EphemeralContainersApplyConfiguration represents a declarative configuration of the EphemeralContainers type for use
// with apply.
func EphemeralContainers() *EphemeralContainersApplyConfiguration {
	return &EphemeralContainersApplyConfiguration{}
}

// EphemeralVolumeSourceApplyConfiguration represents a declarative configuration of the EphemeralVolumeSource type for use
// with apply.
type EphemeralVolumeSourceApplyConfiguration struct {
	VolumeClaimTemplate *PersistentVolumeClaimTemplateApplyConfiguration `json:"volumeClaimTemplate,omitempty"`
	ReadOnly            *bool                                            `json:"readOnly,omitempty"`
}

// EphemeralVolumeSourceApplyConfiguration represents a declarative configuration of the EphemeralVolumeSource type for use
// with apply.
func EphemeralVolumeSource() *EphemeralVolumeSourceApplyConfiguration {
	return &EphemeralVolumeSourceApplyConfiguration{}
}

// EventApplyConfiguration represents a declarative configuration of the Event type for use
// with apply.
type EventApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	InvolvedObject                       *ObjectReferenceApplyConfiguration `json:"involvedObject,omitempty"`
	Reason                               *string                            `json:"reason,omitempty"`
	Message                              *string                            `json:"message,omitempty"`
	Source                               *EventSourceApplyConfiguration     `json:"source,omitempty"`
	FirstTimestamp                       *apismetav1.Time                   `json:"firstTimestamp,omitempty"`
	LastTimestamp                        *apismetav1.Time                   `json:"lastTimestamp,omitempty"`
	Count                                *int32                             `json:"count,omitempty"`
	Type                                 *string                            `json:"type,omitempty"`
	EventTime                            *apismetav1.MicroTime              `json:"eventTime,omitempty"`
	Series                               *EventSeriesApplyConfiguration     `json:"series,omitempty"`
	Action                               *string                            `json:"action,omitempty"`
	Related                              *ObjectReferenceApplyConfiguration `json:"related,omitempty"`
	ReportingController                  *string                            `json:"reportingComponent,omitempty"`
	ReportingInstance                    *string                            `json:"reportingInstance,omitempty"`
}

// EventApplyConfiguration represents a declarative configuration of the Event type for use
// with apply.
func Event() *EventApplyConfiguration {
	return &EventApplyConfiguration{}
}

// EventListApplyConfiguration represents a declarative configuration of the EventList type for use
// with apply.
type EventListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]EventApplyConfiguration `json:"items,omitempty"`
}

// EventListApplyConfiguration represents a declarative configuration of the EventList type for use
// with apply.
func EventList() *EventListApplyConfiguration {
	return &EventListApplyConfiguration{}
}

// EventSeriesApplyConfiguration represents a declarative configuration of the EventSeries type for use
// with apply.
type EventSeriesApplyConfiguration struct {
	Count            *int32                `json:"count,omitempty"`
	LastObservedTime *apismetav1.MicroTime `json:"lastObservedTime,omitempty"`
}

// EventSeriesApplyConfiguration represents a declarative configuration of the EventSeries type for use
// with apply.
func EventSeries() *EventSeriesApplyConfiguration {
	return &EventSeriesApplyConfiguration{}
}

// EventSourceApplyConfiguration represents a declarative configuration of the EventSource type for use
// with apply.
type EventSourceApplyConfiguration struct {
	Component *string `json:"component,omitempty"`
	Host      *string `json:"host,omitempty"`
}

// EventSourceApplyConfiguration represents a declarative configuration of the EventSource type for use
// with apply.
func EventSource() *EventSourceApplyConfiguration {
	return &EventSourceApplyConfiguration{}
}

// ExecActionApplyConfiguration represents a declarative configuration of the ExecAction type for use
// with apply.
type ExecActionApplyConfiguration struct {
	Command *[]string `json:"command,omitempty"`
}

// ExecActionApplyConfiguration represents a declarative configuration of the ExecAction type for use
// with apply.
func ExecAction() *ExecActionApplyConfiguration {
	return &ExecActionApplyConfiguration{}
}

// FCVolumeSourceApplyConfiguration represents a declarative configuration of the FCVolumeSource type for use
// with apply.
type FCVolumeSourceApplyConfiguration struct {
	TargetWWNs *[]string `json:"targetWWNs,omitempty"`
	Lun        *int32    `json:"lun,omitempty"`
	FSType     *string   `json:"fsType,omitempty"`
	ReadOnly   *bool     `json:"readOnly,omitempty"`
	WWIDs      *[]string `json:"wwids,omitempty"`
}

// FCVolumeSourceApplyConfiguration represents a declarative configuration of the FCVolumeSource type for use
// with apply.
func FCVolumeSource() *FCVolumeSourceApplyConfiguration {
	return &FCVolumeSourceApplyConfiguration{}
}

// FlexPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the FlexPersistentVolumeSource type for use
// with apply.
type FlexPersistentVolumeSourceApplyConfiguration struct {
	Driver    *string                            `json:"driver,omitempty"`
	FSType    *string                            `json:"fsType,omitempty"`
	SecretRef *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly  *bool                              `json:"readOnly,omitempty"`
	Options   *map[string]string                 `json:"options,omitempty"`
}

// FlexPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the FlexPersistentVolumeSource type for use
// with apply.
func FlexPersistentVolumeSource() *FlexPersistentVolumeSourceApplyConfiguration {
	return &FlexPersistentVolumeSourceApplyConfiguration{}
}

// FlexVolumeSourceApplyConfiguration represents a declarative configuration of the FlexVolumeSource type for use
// with apply.
type FlexVolumeSourceApplyConfiguration struct {
	Driver    *string                                 `json:"driver,omitempty"`
	FSType    *string                                 `json:"fsType,omitempty"`
	SecretRef *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly  *bool                                   `json:"readOnly,omitempty"`
	Options   *map[string]string                      `json:"options,omitempty"`
}

// FlexVolumeSourceApplyConfiguration represents a declarative configuration of the FlexVolumeSource type for use
// with apply.
func FlexVolumeSource() *FlexVolumeSourceApplyConfiguration {
	return &FlexVolumeSourceApplyConfiguration{}
}

// FlockerVolumeSourceApplyConfiguration represents a declarative configuration of the FlockerVolumeSource type for use
// with apply.
type FlockerVolumeSourceApplyConfiguration struct {
	DatasetName *string `json:"datasetName,omitempty"`
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

// FlockerVolumeSourceApplyConfiguration represents a declarative configuration of the FlockerVolumeSource type for use
// with apply.
func FlockerVolumeSource() *FlockerVolumeSourceApplyConfiguration {
	return &FlockerVolumeSourceApplyConfiguration{}
}

// GCEPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the GCEPersistentDiskVolumeSource type for use
// with apply.
type GCEPersistentDiskVolumeSourceApplyConfiguration struct {
	PDName    *string `json:"pdName,omitempty"`
	FSType    *string `json:"fsType,omitempty"`
	Partition *int32  `json:"partition,omitempty"`
	ReadOnly  *bool   `json:"readOnly,omitempty"`
}

// GCEPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the GCEPersistentDiskVolumeSource type for use
// with apply.
func GCEPersistentDiskVolumeSource() *GCEPersistentDiskVolumeSourceApplyConfiguration {
	return &GCEPersistentDiskVolumeSourceApplyConfiguration{}
}

// GitRepoVolumeSourceApplyConfiguration represents a declarative configuration of the GitRepoVolumeSource type for use
// with apply.
type GitRepoVolumeSourceApplyConfiguration struct {
	Repository *string `json:"repository,omitempty"`
	Revision   *string `json:"revision,omitempty"`
	Directory  *string `json:"directory,omitempty"`
}

// GitRepoVolumeSourceApplyConfiguration represents a declarative configuration of the GitRepoVolumeSource type for use
// with apply.
func GitRepoVolumeSource() *GitRepoVolumeSourceApplyConfiguration {
	return &GitRepoVolumeSourceApplyConfiguration{}
}

// GlusterfsPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsPersistentVolumeSource type for use
// with apply.
type GlusterfsPersistentVolumeSourceApplyConfiguration struct {
	EndpointsName      *string `json:"endpoints,omitempty"`
	Path               *string `json:"path,omitempty"`
	ReadOnly           *bool   `json:"readOnly,omitempty"`
	EndpointsNamespace *string `json:"endpointsNamespace,omitempty"`
}

// GlusterfsPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsPersistentVolumeSource type for use
// with apply.
func GlusterfsPersistentVolumeSource() *GlusterfsPersistentVolumeSourceApplyConfiguration {
	return &GlusterfsPersistentVolumeSourceApplyConfiguration{}
}

// GlusterfsVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsVolumeSource type for use
// with apply.
type GlusterfsVolumeSourceApplyConfiguration struct {
	EndpointsName *string `json:"endpoints,omitempty"`
	Path          *string `json:"path,omitempty"`
	ReadOnly      *bool   `json:"readOnly,omitempty"`
}

// GlusterfsVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsVolumeSource type for use
// with apply.
func GlusterfsVolumeSource() *GlusterfsVolumeSourceApplyConfiguration {
	return &GlusterfsVolumeSourceApplyConfiguration{}
}

// HTTPGetActionApplyConfiguration represents a declarative configuration of the HTTPGetAction type for use
// with apply.
type HTTPGetActionApplyConfiguration struct {
	Path        *string                         `json:"path,omitempty"`
	Port        *intstr.IntOrString             `json:"port,omitempty"`
	Host        *string                         `json:"host,omitempty"`
	Scheme      *corev1.URIScheme               `json:"scheme,omitempty"`
	HTTPHeaders *[]HTTPHeaderApplyConfiguration `json:"httpHeaders,omitempty"`
}

// HTTPGetActionApplyConfiguration represents a declarative configuration of the HTTPGetAction type for use
// with apply.
func HTTPGetAction() *HTTPGetActionApplyConfiguration {
	return &HTTPGetActionApplyConfiguration{}
}

// HTTPHeaderApplyConfiguration represents a declarative configuration of the HTTPHeader type for use
// with apply.
type HTTPHeaderApplyConfiguration struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// HTTPHeaderApplyConfiguration represents a declarative configuration of the HTTPHeader type for use
// with apply.
func HTTPHeader() *HTTPHeaderApplyConfiguration {
	return &HTTPHeaderApplyConfiguration{}
}

// HandlerApplyConfiguration represents a declarative configuration of the Handler type for use
// with apply.
type HandlerApplyConfiguration struct {
	Exec      *ExecActionApplyConfiguration      `json:"exec,omitempty"`
	HTTPGet   *HTTPGetActionApplyConfiguration   `json:"httpGet,omitempty"`
	TCPSocket *TCPSocketActionApplyConfiguration `json:"tcpSocket,omitempty"`
}

// HandlerApplyConfiguration represents a declarative configuration of the Handler type for use
// with apply.
func Handler() *HandlerApplyConfiguration {
	return &HandlerApplyConfiguration{}
}

// HostAliasApplyConfiguration represents a declarative configuration of the HostAlias type for use
// with apply.
type HostAliasApplyConfiguration struct {
	IP        *string   `json:"ip,omitempty"`
	Hostnames *[]string `json:"hostnames,omitempty"`
}

// HostAliasApplyConfiguration represents a declarative configuration of the HostAlias type for use
// with apply.
func HostAlias() *HostAliasApplyConfiguration {
	return &HostAliasApplyConfiguration{}
}

// HostPathVolumeSourceApplyConfiguration represents a declarative configuration of the HostPathVolumeSource type for use
// with apply.
type HostPathVolumeSourceApplyConfiguration struct {
	Path *string              `json:"path,omitempty"`
	Type *corev1.HostPathType `json:"type,omitempty"`
}

// HostPathVolumeSourceApplyConfiguration represents a declarative configuration of the HostPathVolumeSource type for use
// with apply.
func HostPathVolumeSource() *HostPathVolumeSourceApplyConfiguration {
	return &HostPathVolumeSourceApplyConfiguration{}
}

// ISCSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIPersistentVolumeSource type for use
// with apply.
type ISCSIPersistentVolumeSourceApplyConfiguration struct {
	TargetPortal      *string                            `json:"targetPortal,omitempty"`
	IQN               *string                            `json:"iqn,omitempty"`
	Lun               *int32                             `json:"lun,omitempty"`
	ISCSIInterface    *string                            `json:"iscsiInterface,omitempty"`
	FSType            *string                            `json:"fsType,omitempty"`
	ReadOnly          *bool                              `json:"readOnly,omitempty"`
	Portals           *[]string                          `json:"portals,omitempty"`
	DiscoveryCHAPAuth *bool                              `json:"chapAuthDiscovery,omitempty"`
	SessionCHAPAuth   *bool                              `json:"chapAuthSession,omitempty"`
	SecretRef         *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	InitiatorName     *string                            `json:"initiatorName,omitempty"`
}

// ISCSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIPersistentVolumeSource type for use
// with apply.
func ISCSIPersistentVolumeSource() *ISCSIPersistentVolumeSourceApplyConfiguration {
	return &ISCSIPersistentVolumeSourceApplyConfiguration{}
}

// ISCSIVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIVolumeSource type for use
// with apply.
type ISCSIVolumeSourceApplyConfiguration struct {
	TargetPortal      *string                                 `json:"targetPortal,omitempty"`
	IQN               *string                                 `json:"iqn,omitempty"`
	Lun               *int32                                  `json:"lun,omitempty"`
	ISCSIInterface    *string                                 `json:"iscsiInterface,omitempty"`
	FSType            *string                                 `json:"fsType,omitempty"`
	ReadOnly          *bool                                   `json:"readOnly,omitempty"`
	Portals           *[]string                               `json:"portals,omitempty"`
	DiscoveryCHAPAuth *bool                                   `json:"chapAuthDiscovery,omitempty"`
	SessionCHAPAuth   *bool                                   `json:"chapAuthSession,omitempty"`
	SecretRef         *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	InitiatorName     *string                                 `json:"initiatorName,omitempty"`
}

// ISCSIVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIVolumeSource type for use
// with apply.
func ISCSIVolumeSource() *ISCSIVolumeSourceApplyConfiguration {
	return &ISCSIVolumeSourceApplyConfiguration{}
}

// KeyToPathApplyConfiguration represents a declarative configuration of the KeyToPath type for use
// with apply.
type KeyToPathApplyConfiguration struct {
	Key  *string `json:"key,omitempty"`
	Path *string `json:"path,omitempty"`
	Mode *int32  `json:"mode,omitempty"`
}

// KeyToPathApplyConfiguration represents a declarative configuration of the KeyToPath type for use
// with apply.
func KeyToPath() *KeyToPathApplyConfiguration {
	return &KeyToPathApplyConfiguration{}
}

// LifecycleApplyConfiguration represents a declarative configuration of the Lifecycle type for use
// with apply.
type LifecycleApplyConfiguration struct {
	PostStart *HandlerApplyConfiguration `json:"postStart,omitempty"`
	PreStop   *HandlerApplyConfiguration `json:"preStop,omitempty"`
}

// LifecycleApplyConfiguration represents a declarative configuration of the Lifecycle type for use
// with apply.
func Lifecycle() *LifecycleApplyConfiguration {
	return &LifecycleApplyConfiguration{}
}

// LimitRangeApplyConfiguration represents a declarative configuration of the LimitRange type for use
// with apply.
type LimitRangeApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *LimitRangeSpecApplyConfiguration `json:"spec,omitempty"`
}

// LimitRangeApplyConfiguration represents a declarative configuration of the LimitRange type for use
// with apply.
func LimitRange() *LimitRangeApplyConfiguration {
	return &LimitRangeApplyConfiguration{}
}

// LimitRangeItemApplyConfiguration represents a declarative configuration of the LimitRangeItem type for use
// with apply.
type LimitRangeItemApplyConfiguration struct {
	Type                 *corev1.LimitType    `json:"type,omitempty"`
	Max                  *corev1.ResourceList `json:"max,omitempty"`
	Min                  *corev1.ResourceList `json:"min,omitempty"`
	Default              *corev1.ResourceList `json:"default,omitempty"`
	DefaultRequest       *corev1.ResourceList `json:"defaultRequest,omitempty"`
	MaxLimitRequestRatio *corev1.ResourceList `json:"maxLimitRequestRatio,omitempty"`
}

// LimitRangeItemApplyConfiguration represents a declarative configuration of the LimitRangeItem type for use
// with apply.
func LimitRangeItem() *LimitRangeItemApplyConfiguration {
	return &LimitRangeItemApplyConfiguration{}
}

// LimitRangeListApplyConfiguration represents a declarative configuration of the LimitRangeList type for use
// with apply.
type LimitRangeListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]LimitRangeApplyConfiguration `json:"items,omitempty"`
}

// LimitRangeListApplyConfiguration represents a declarative configuration of the LimitRangeList type for use
// with apply.
func LimitRangeList() *LimitRangeListApplyConfiguration {
	return &LimitRangeListApplyConfiguration{}
}

// LimitRangeSpecApplyConfiguration represents a declarative configuration of the LimitRangeSpec type for use
// with apply.
type LimitRangeSpecApplyConfiguration struct {
	Limits *[]LimitRangeItemApplyConfiguration `json:"limits,omitempty"`
}

// LimitRangeSpecApplyConfiguration represents a declarative configuration of the LimitRangeSpec type for use
// with apply.
func LimitRangeSpec() *LimitRangeSpecApplyConfiguration {
	return &LimitRangeSpecApplyConfiguration{}
}

// LoadBalancerIngressApplyConfiguration represents a declarative configuration of the LoadBalancerIngress type for use
// with apply.
type LoadBalancerIngressApplyConfiguration struct {
	IP       *string                         `json:"ip,omitempty"`
	Hostname *string                         `json:"hostname,omitempty"`
	Ports    *[]PortStatusApplyConfiguration `json:"ports,omitempty"`
}

// LoadBalancerIngressApplyConfiguration represents a declarative configuration of the LoadBalancerIngress type for use
// with apply.
func LoadBalancerIngress() *LoadBalancerIngressApplyConfiguration {
	return &LoadBalancerIngressApplyConfiguration{}
}

// LoadBalancerStatusApplyConfiguration represents a declarative configuration of the LoadBalancerStatus type for use
// with apply.
type LoadBalancerStatusApplyConfiguration struct {
	Ingress *[]LoadBalancerIngressApplyConfiguration `json:"ingress,omitempty"`
}

// LoadBalancerStatusApplyConfiguration represents a declarative configuration of the LoadBalancerStatus type for use
// with apply.
func LoadBalancerStatus() *LoadBalancerStatusApplyConfiguration {
	return &LoadBalancerStatusApplyConfiguration{}
}

// LocalObjectReferenceApplyConfiguration represents a declarative configuration of the LocalObjectReference type for use
// with apply.
type LocalObjectReferenceApplyConfiguration struct {
	Name *string `json:"name,omitempty"`
}

// LocalObjectReferenceApplyConfiguration represents a declarative configuration of the LocalObjectReference type for use
// with apply.
func LocalObjectReference() *LocalObjectReferenceApplyConfiguration {
	return &LocalObjectReferenceApplyConfiguration{}
}

// LocalVolumeSourceApplyConfiguration represents a declarative configuration of the LocalVolumeSource type for use
// with apply.
type LocalVolumeSourceApplyConfiguration struct {
	Path   *string `json:"path,omitempty"`
	FSType *string `json:"fsType,omitempty"`
}

// LocalVolumeSourceApplyConfiguration represents a declarative configuration of the LocalVolumeSource type for use
// with apply.
func LocalVolumeSource() *LocalVolumeSourceApplyConfiguration {
	return &LocalVolumeSourceApplyConfiguration{}
}

// NFSVolumeSourceApplyConfiguration represents a declarative configuration of the NFSVolumeSource type for use
// with apply.
type NFSVolumeSourceApplyConfiguration struct {
	Server   *string `json:"server,omitempty"`
	Path     *string `json:"path,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

// NFSVolumeSourceApplyConfiguration represents a declarative configuration of the NFSVolumeSource type for use
// with apply.
func NFSVolumeSource() *NFSVolumeSourceApplyConfiguration {
	return &NFSVolumeSourceApplyConfiguration{}
}

// NamespaceApplyConfiguration represents a declarative configuration of the Namespace type for use
// with apply.
type NamespaceApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *NamespaceSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *NamespaceStatusApplyConfiguration `json:"status,omitempty"`
}

// NamespaceApplyConfiguration represents a declarative configuration of the Namespace type for use
// with apply.
func Namespace() *NamespaceApplyConfiguration {
	return &NamespaceApplyConfiguration{}
}

// NamespaceConditionApplyConfiguration represents a declarative configuration of the NamespaceCondition type for use
// with apply.
type NamespaceConditionApplyConfiguration struct {
	Type               *corev1.NamespaceConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus        `json:"status,omitempty"`
	LastTransitionTime *apismetav1.Time               `json:"lastTransitionTime,omitempty"`
	Reason             *string                        `json:"reason,omitempty"`
	Message            *string                        `json:"message,omitempty"`
}

// NamespaceConditionApplyConfiguration represents a declarative configuration of the NamespaceCondition type for use
// with apply.
func NamespaceCondition() *NamespaceConditionApplyConfiguration {
	return &NamespaceConditionApplyConfiguration{}
}

// NamespaceListApplyConfiguration represents a declarative configuration of the NamespaceList type for use
// with apply.
type NamespaceListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]NamespaceApplyConfiguration `json:"items,omitempty"`
}

// NamespaceListApplyConfiguration represents a declarative configuration of the NamespaceList type for use
// with apply.
func NamespaceList() *NamespaceListApplyConfiguration {
	return &NamespaceListApplyConfiguration{}
}

// NamespaceSpecApplyConfiguration represents a declarative configuration of the NamespaceSpec type for use
// with apply.
type NamespaceSpecApplyConfiguration struct {
	Finalizers *[]corev1.FinalizerName `json:"finalizers,omitempty"`
}

// NamespaceSpecApplyConfiguration represents a declarative configuration of the NamespaceSpec type for use
// with apply.
func NamespaceSpec() *NamespaceSpecApplyConfiguration {
	return &NamespaceSpecApplyConfiguration{}
}

// NamespaceStatusApplyConfiguration represents a declarative configuration of the NamespaceStatus type for use
// with apply.
type NamespaceStatusApplyConfiguration struct {
	Phase      *corev1.NamespacePhase                  `json:"phase,omitempty"`
	Conditions *[]NamespaceConditionApplyConfiguration `json:"conditions,omitempty"`
}

// NamespaceStatusApplyConfiguration represents a declarative configuration of the NamespaceStatus type for use
// with apply.
func NamespaceStatus() *NamespaceStatusApplyConfiguration {
	return &NamespaceStatusApplyConfiguration{}
}

// NodeApplyConfiguration represents a declarative configuration of the Node type for use
// with apply.
type NodeApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *NodeSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *NodeStatusApplyConfiguration `json:"status,omitempty"`
}

// NodeApplyConfiguration represents a declarative configuration of the Node type for use
// with apply.
func Node() *NodeApplyConfiguration {
	return &NodeApplyConfiguration{}
}

// NodeAddressApplyConfiguration represents a declarative configuration of the NodeAddress type for use
// with apply.
type NodeAddressApplyConfiguration struct {
	Type    *corev1.NodeAddressType `json:"type,omitempty"`
	Address *string                 `json:"address,omitempty"`
}

// NodeAddressApplyConfiguration represents a declarative configuration of the NodeAddress type for use
// with apply.
func NodeAddress() *NodeAddressApplyConfiguration {
	return &NodeAddressApplyConfiguration{}
}

// NodeAffinityApplyConfiguration represents a declarative configuration of the NodeAffinity type for use
// with apply.
type NodeAffinityApplyConfiguration struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *NodeSelectorApplyConfiguration              `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution *[]PreferredSchedulingTermApplyConfiguration `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// NodeAffinityApplyConfiguration represents a declarative configuration of the NodeAffinity type for use
// with apply.
func NodeAffinity() *NodeAffinityApplyConfiguration {
	return &NodeAffinityApplyConfiguration{}
}

// NodeConditionApplyConfiguration represents a declarative configuration of the NodeCondition type for use
// with apply.
type NodeConditionApplyConfiguration struct {
	Type               *corev1.NodeConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus   `json:"status,omitempty"`
	LastHeartbeatTime  *apismetav1.Time          `json:"lastHeartbeatTime,omitempty"`
	LastTransitionTime *apismetav1.Time          `json:"lastTransitionTime,omitempty"`
	Reason             *string                   `json:"reason,omitempty"`
	Message            *string                   `json:"message,omitempty"`
}

// NodeConditionApplyConfiguration represents a declarative configuration of the NodeCondition type for use
// with apply.
func NodeCondition() *NodeConditionApplyConfiguration {
	return &NodeConditionApplyConfiguration{}
}

// NodeConfigSourceApplyConfiguration represents a declarative configuration of the NodeConfigSource type for use
// with apply.
type NodeConfigSourceApplyConfiguration struct {
	ConfigMap *ConfigMapNodeConfigSourceApplyConfiguration `json:"configMap,omitempty"`
}

// NodeConfigSourceApplyConfiguration represents a declarative configuration of the NodeConfigSource type for use
// with apply.
func NodeConfigSource() *NodeConfigSourceApplyConfiguration {
	return &NodeConfigSourceApplyConfiguration{}
}

// NodeConfigStatusApplyConfiguration represents a declarative configuration of the NodeConfigStatus type for use
// with apply.
type NodeConfigStatusApplyConfiguration struct {
	Assigned      *NodeConfigSourceApplyConfiguration `json:"assigned,omitempty"`
	Active        *NodeConfigSourceApplyConfiguration `json:"active,omitempty"`
	LastKnownGood *NodeConfigSourceApplyConfiguration `json:"lastKnownGood,omitempty"`
	Error         *string                             `json:"error,omitempty"`
}

// NodeConfigStatusApplyConfiguration represents a declarative configuration of the NodeConfigStatus type for use
// with apply.
func NodeConfigStatus() *NodeConfigStatusApplyConfiguration {
	return &NodeConfigStatusApplyConfiguration{}
}

// NodeDaemonEndpointsApplyConfiguration represents a declarative configuration of the NodeDaemonEndpoints type for use
// with apply.
type NodeDaemonEndpointsApplyConfiguration struct {
	KubeletEndpoint *DaemonEndpointApplyConfiguration `json:"kubeletEndpoint,omitempty"`
}

// NodeDaemonEndpointsApplyConfiguration represents a declarative configuration of the NodeDaemonEndpoints type for use
// with apply.
func NodeDaemonEndpoints() *NodeDaemonEndpointsApplyConfiguration {
	return &NodeDaemonEndpointsApplyConfiguration{}
}

// NodeListApplyConfiguration represents a declarative configuration of the NodeList type for use
// with apply.
type NodeListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]NodeApplyConfiguration `json:"items,omitempty"`
}

// NodeListApplyConfiguration represents a declarative configuration of the NodeList type for use
// with apply.
func NodeList() *NodeListApplyConfiguration {
	return &NodeListApplyConfiguration{}
}

// NodeProxyOptionsApplyConfiguration represents a declarative configuration of the NodeProxyOptions type for use
// with apply.
type NodeProxyOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Path                              *string `json:"path,omitempty"`
}

// NodeProxyOptionsApplyConfiguration represents a declarative configuration of the NodeProxyOptions type for use
// with apply.
func NodeProxyOptions() *NodeProxyOptionsApplyConfiguration {
	return &NodeProxyOptionsApplyConfiguration{}
}

// NodeSelectorApplyConfiguration represents a declarative configuration of the NodeSelector type for use
// with apply.
type NodeSelectorApplyConfiguration struct {
	NodeSelectorTerms *[]NodeSelectorTermApplyConfiguration `json:"nodeSelectorTerms,omitempty"`
}

// NodeSelectorApplyConfiguration represents a declarative configuration of the NodeSelector type for use
// with apply.
func NodeSelector() *NodeSelectorApplyConfiguration {
	return &NodeSelectorApplyConfiguration{}
}

// NodeSelectorRequirementApplyConfiguration represents a declarative configuration of the NodeSelectorRequirement type for use
// with apply.
type NodeSelectorRequirementApplyConfiguration struct {
	Key      *string                      `json:"key,omitempty"`
	Operator *corev1.NodeSelectorOperator `json:"operator,omitempty"`
	Values   *[]string                    `json:"values,omitempty"`
}

// NodeSelectorRequirementApplyConfiguration represents a declarative configuration of the NodeSelectorRequirement type for use
// with apply.
func NodeSelectorRequirement() *NodeSelectorRequirementApplyConfiguration {
	return &NodeSelectorRequirementApplyConfiguration{}
}

// NodeSelectorTermApplyConfiguration represents a declarative configuration of the NodeSelectorTerm type for use
// with apply.
type NodeSelectorTermApplyConfiguration struct {
	MatchExpressions *[]NodeSelectorRequirementApplyConfiguration `json:"matchExpressions,omitempty"`
	MatchFields      *[]NodeSelectorRequirementApplyConfiguration `json:"matchFields,omitempty"`
}

// NodeSelectorTermApplyConfiguration represents a declarative configuration of the NodeSelectorTerm type for use
// with apply.
func NodeSelectorTerm() *NodeSelectorTermApplyConfiguration {
	return &NodeSelectorTermApplyConfiguration{}
}

// NodeSpecApplyConfiguration represents a declarative configuration of the NodeSpec type for use
// with apply.
type NodeSpecApplyConfiguration struct {
	PodCIDR            *string                             `json:"podCIDR,omitempty"`
	PodCIDRs           *[]string                           `json:"podCIDRs,omitempty"`
	ProviderID         *string                             `json:"providerID,omitempty"`
	Unschedulable      *bool                               `json:"unschedulable,omitempty"`
	Taints             *[]TaintApplyConfiguration          `json:"taints,omitempty"`
	ConfigSource       *NodeConfigSourceApplyConfiguration `json:"configSource,omitempty"`
	DoNotUseExternalID *string                             `json:"externalID,omitempty"`
}

// NodeSpecApplyConfiguration represents a declarative configuration of the NodeSpec type for use
// with apply.
func NodeSpec() *NodeSpecApplyConfiguration {
	return &NodeSpecApplyConfiguration{}
}

// NodeStatusApplyConfiguration represents a declarative configuration of the NodeStatus type for use
// with apply.
type NodeStatusApplyConfiguration struct {
	Capacity        *corev1.ResourceList                   `json:"capacity,omitempty"`
	Allocatable     *corev1.ResourceList                   `json:"allocatable,omitempty"`
	Phase           *corev1.NodePhase                      `json:"phase,omitempty"`
	Conditions      *[]NodeConditionApplyConfiguration     `json:"conditions,omitempty"`
	Addresses       *[]NodeAddressApplyConfiguration       `json:"addresses,omitempty"`
	DaemonEndpoints *NodeDaemonEndpointsApplyConfiguration `json:"daemonEndpoints,omitempty"`
	NodeInfo        *NodeSystemInfoApplyConfiguration      `json:"nodeInfo,omitempty"`
	Images          *[]ContainerImageApplyConfiguration    `json:"images,omitempty"`
	VolumesInUse    *[]corev1.UniqueVolumeName             `json:"volumesInUse,omitempty"`
	VolumesAttached *[]AttachedVolumeApplyConfiguration    `json:"volumesAttached,omitempty"`
	Config          *NodeConfigStatusApplyConfiguration    `json:"config,omitempty"`
}

// NodeStatusApplyConfiguration represents a declarative configuration of the NodeStatus type for use
// with apply.
func NodeStatus() *NodeStatusApplyConfiguration {
	return &NodeStatusApplyConfiguration{}
}

// NodeSystemInfoApplyConfiguration represents a declarative configuration of the NodeSystemInfo type for use
// with apply.
type NodeSystemInfoApplyConfiguration struct {
	MachineID               *string `json:"machineID,omitempty"`
	SystemUUID              *string `json:"systemUUID,omitempty"`
	BootID                  *string `json:"bootID,omitempty"`
	KernelVersion           *string `json:"kernelVersion,omitempty"`
	OSImage                 *string `json:"osImage,omitempty"`
	ContainerRuntimeVersion *string `json:"containerRuntimeVersion,omitempty"`
	KubeletVersion          *string `json:"kubeletVersion,omitempty"`
	KubeProxyVersion        *string `json:"kubeProxyVersion,omitempty"`
	OperatingSystem         *string `json:"operatingSystem,omitempty"`
	Architecture            *string `json:"architecture,omitempty"`
}

// NodeSystemInfoApplyConfiguration represents a declarative configuration of the NodeSystemInfo type for use
// with apply.
func NodeSystemInfo() *NodeSystemInfoApplyConfiguration {
	return &NodeSystemInfoApplyConfiguration{}
}

// ObjectFieldSelectorApplyConfiguration represents a declarative configuration of the ObjectFieldSelector type for use
// with apply.
type ObjectFieldSelectorApplyConfiguration struct {
	APIVersion *string `json:"apiVersion,omitempty"`
	FieldPath  *string `json:"fieldPath,omitempty"`
}

// ObjectFieldSelectorApplyConfiguration represents a declarative configuration of the ObjectFieldSelector type for use
// with apply.
func ObjectFieldSelector() *ObjectFieldSelectorApplyConfiguration {
	return &ObjectFieldSelectorApplyConfiguration{}
}

// ObjectReferenceApplyConfiguration represents a declarative configuration of the ObjectReference type for use
// with apply.
type ObjectReferenceApplyConfiguration struct {
	Kind            *string    `json:"kind,omitempty"`
	Namespace       *string    `json:"namespace,omitempty"`
	Name            *string    `json:"name,omitempty"`
	UID             *types.UID `json:"uid,omitempty"`
	APIVersion      *string    `json:"apiVersion,omitempty"`
	ResourceVersion *string    `json:"resourceVersion,omitempty"`
	FieldPath       *string    `json:"fieldPath,omitempty"`
}

// ObjectReferenceApplyConfiguration represents a declarative configuration of the ObjectReference type for use
// with apply.
func ObjectReference() *ObjectReferenceApplyConfiguration {
	return &ObjectReferenceApplyConfiguration{}
}

// PersistentVolumeApplyConfiguration represents a declarative configuration of the PersistentVolume type for use
// with apply.
type PersistentVolumeApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PersistentVolumeSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *PersistentVolumeStatusApplyConfiguration `json:"status,omitempty"`
}

// PersistentVolumeApplyConfiguration represents a declarative configuration of the PersistentVolume type for use
// with apply.
func PersistentVolume() *PersistentVolumeApplyConfiguration {
	return &PersistentVolumeApplyConfiguration{}
}

// PersistentVolumeClaimApplyConfiguration represents a declarative configuration of the PersistentVolumeClaim type for use
// with apply.
type PersistentVolumeClaimApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PersistentVolumeClaimSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *PersistentVolumeClaimStatusApplyConfiguration `json:"status,omitempty"`
}

// PersistentVolumeClaimApplyConfiguration represents a declarative configuration of the PersistentVolumeClaim type for use
// with apply.
func PersistentVolumeClaim() *PersistentVolumeClaimApplyConfiguration {
	return &PersistentVolumeClaimApplyConfiguration{}
}

// PersistentVolumeClaimConditionApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimCondition type for use
// with apply.
type PersistentVolumeClaimConditionApplyConfiguration struct {
	Type               *corev1.PersistentVolumeClaimConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus                    `json:"status,omitempty"`
	LastProbeTime      *apismetav1.Time                           `json:"lastProbeTime,omitempty"`
	LastTransitionTime *apismetav1.Time                           `json:"lastTransitionTime,omitempty"`
	Reason             *string                                    `json:"reason,omitempty"`
	Message            *string                                    `json:"message,omitempty"`
}

// PersistentVolumeClaimConditionApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimCondition type for use
// with apply.
func PersistentVolumeClaimCondition() *PersistentVolumeClaimConditionApplyConfiguration {
	return &PersistentVolumeClaimConditionApplyConfiguration{}
}

// PersistentVolumeClaimListApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimList type for use
// with apply.
type PersistentVolumeClaimListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PersistentVolumeClaimApplyConfiguration `json:"items,omitempty"`
}

// PersistentVolumeClaimListApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimList type for use
// with apply.
func PersistentVolumeClaimList() *PersistentVolumeClaimListApplyConfiguration {
	return &PersistentVolumeClaimListApplyConfiguration{}
}

// PersistentVolumeClaimSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimSpec type for use
// with apply.
type PersistentVolumeClaimSpecApplyConfiguration struct {
	AccessModes      *[]corev1.PersistentVolumeAccessMode         `json:"accessModes,omitempty"`
	Selector         *metav1.LabelSelectorApplyConfiguration      `json:"selector,omitempty"`
	Resources        *ResourceRequirementsApplyConfiguration      `json:"resources,omitempty"`
	VolumeName       *string                                      `json:"volumeName,omitempty"`
	StorageClassName *string                                      `json:"storageClassName,omitempty"`
	VolumeMode       *corev1.PersistentVolumeMode                 `json:"volumeMode,omitempty"`
	DataSource       *TypedLocalObjectReferenceApplyConfiguration `json:"dataSource,omitempty"`
}

// PersistentVolumeClaimSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimSpec type for use
// with apply.
func PersistentVolumeClaimSpec() *PersistentVolumeClaimSpecApplyConfiguration {
	return &PersistentVolumeClaimSpecApplyConfiguration{}
}

// PersistentVolumeClaimStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimStatus type for use
// with apply.
type PersistentVolumeClaimStatusApplyConfiguration struct {
	Phase       *corev1.PersistentVolumeClaimPhase                  `json:"phase,omitempty"`
	AccessModes *[]corev1.PersistentVolumeAccessMode                `json:"accessModes,omitempty"`
	Capacity    *corev1.ResourceList                                `json:"capacity,omitempty"`
	Conditions  *[]PersistentVolumeClaimConditionApplyConfiguration `json:"conditions,omitempty"`
}

// PersistentVolumeClaimStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimStatus type for use
// with apply.
func PersistentVolumeClaimStatus() *PersistentVolumeClaimStatusApplyConfiguration {
	return &PersistentVolumeClaimStatusApplyConfiguration{}
}

// PersistentVolumeClaimTemplateApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimTemplate type for use
// with apply.
type PersistentVolumeClaimTemplateApplyConfiguration struct {
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PersistentVolumeClaimSpecApplyConfiguration `json:"spec,omitempty"`
}

// PersistentVolumeClaimTemplateApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimTemplate type for use
// with apply.
func PersistentVolumeClaimTemplate() *PersistentVolumeClaimTemplateApplyConfiguration {
	return &PersistentVolumeClaimTemplateApplyConfiguration{}
}

// PersistentVolumeClaimVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimVolumeSource type for use
// with apply.
type PersistentVolumeClaimVolumeSourceApplyConfiguration struct {
	ClaimName *string `json:"claimName,omitempty"`
	ReadOnly  *bool   `json:"readOnly,omitempty"`
}

// PersistentVolumeClaimVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimVolumeSource type for use
// with apply.
func PersistentVolumeClaimVolumeSource() *PersistentVolumeClaimVolumeSourceApplyConfiguration {
	return &PersistentVolumeClaimVolumeSourceApplyConfiguration{}
}

// PersistentVolumeListApplyConfiguration represents a declarative configuration of the PersistentVolumeList type for use
// with apply.
type PersistentVolumeListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PersistentVolumeApplyConfiguration `json:"items,omitempty"`
}

// PersistentVolumeListApplyConfiguration represents a declarative configuration of the PersistentVolumeList type for use
// with apply.
func PersistentVolumeList() *PersistentVolumeListApplyConfiguration {
	return &PersistentVolumeListApplyConfiguration{}
}

// PersistentVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeSource type for use
// with apply.
type PersistentVolumeSourceApplyConfiguration struct {
	GCEPersistentDisk    *GCEPersistentDiskVolumeSourceApplyConfiguration    `json:"gcePersistentDisk,omitempty"`
	AWSElasticBlockStore *AWSElasticBlockStoreVolumeSourceApplyConfiguration `json:"awsElasticBlockStore,omitempty"`
	HostPath             *HostPathVolumeSourceApplyConfiguration             `json:"hostPath,omitempty"`
	Glusterfs            *GlusterfsPersistentVolumeSourceApplyConfiguration  `json:"glusterfs,omitempty"`
	NFS                  *NFSVolumeSourceApplyConfiguration                  `json:"nfs,omitempty"`
	RBD                  *RBDPersistentVolumeSourceApplyConfiguration        `json:"rbd,omitempty"`
	ISCSI                *ISCSIPersistentVolumeSourceApplyConfiguration      `json:"iscsi,omitempty"`
	Cinder               *CinderPersistentVolumeSourceApplyConfiguration     `json:"cinder,omitempty"`
	CephFS               *CephFSPersistentVolumeSourceApplyConfiguration     `json:"cephfs,omitempty"`
	FC                   *FCVolumeSourceApplyConfiguration                   `json:"fc,omitempty"`
	Flocker              *FlockerVolumeSourceApplyConfiguration              `json:"flocker,omitempty"`
	FlexVolume           *FlexPersistentVolumeSourceApplyConfiguration       `json:"flexVolume,omitempty"`
	AzureFile            *AzureFilePersistentVolumeSourceApplyConfiguration  `json:"azureFile,omitempty"`
	VsphereVolume        *VsphereVirtualDiskVolumeSourceApplyConfiguration   `json:"vsphereVolume,omitempty"`
	Quobyte              *QuobyteVolumeSourceApplyConfiguration              `json:"quobyte,omitempty"`
	AzureDisk            *AzureDiskVolumeSourceApplyConfiguration            `json:"azureDisk,omitempty"`
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSourceApplyConfiguration `json:"photonPersistentDisk,omitempty"`
	PortworxVolume       *PortworxVolumeSourceApplyConfiguration             `json:"portworxVolume,omitempty"`
	ScaleIO              *ScaleIOPersistentVolumeSourceApplyConfiguration    `json:"scaleIO,omitempty"`
	Local                *LocalVolumeSourceApplyConfiguration                `json:"local,omitempty"`
	StorageOS            *StorageOSPersistentVolumeSourceApplyConfiguration  `json:"storageos,omitempty"`
	CSI                  *CSIPersistentVolumeSourceApplyConfiguration        `json:"csi,omitempty"`
}

// PersistentVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeSource type for use
// with apply.
func PersistentVolumeSource() *PersistentVolumeSourceApplyConfiguration {
	return &PersistentVolumeSourceApplyConfiguration{}
}

// PersistentVolumeSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeSpec type for use
// with apply.
type PersistentVolumeSpecApplyConfiguration struct {
	Capacity                                 *corev1.ResourceList `json:"capacity,omitempty"`
	PersistentVolumeSourceApplyConfiguration `json:",inline"`
	AccessModes                              *[]corev1.PersistentVolumeAccessMode  `json:"accessModes,omitempty"`
	ClaimRef                                 *ObjectReferenceApplyConfiguration    `json:"claimRef,omitempty"`
	PersistentVolumeReclaimPolicy            *corev1.PersistentVolumeReclaimPolicy `json:"persistentVolumeReclaimPolicy,omitempty"`
	StorageClassName                         *string                               `json:"storageClassName,omitempty"`
	MountOptions                             *[]string                             `json:"mountOptions,omitempty"`
	VolumeMode                               *corev1.PersistentVolumeMode          `json:"volumeMode,omitempty"`
	NodeAffinity                             *VolumeNodeAffinityApplyConfiguration `json:"nodeAffinity,omitempty"`
}

// PersistentVolumeSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeSpec type for use
// with apply.
func PersistentVolumeSpec() *PersistentVolumeSpecApplyConfiguration {
	return &PersistentVolumeSpecApplyConfiguration{}
}

// PersistentVolumeStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeStatus type for use
// with apply.
type PersistentVolumeStatusApplyConfiguration struct {
	Phase   *corev1.PersistentVolumePhase `json:"phase,omitempty"`
	Message *string                       `json:"message,omitempty"`
	Reason  *string                       `json:"reason,omitempty"`
}

// PersistentVolumeStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeStatus type for use
// with apply.
func PersistentVolumeStatus() *PersistentVolumeStatusApplyConfiguration {
	return &PersistentVolumeStatusApplyConfiguration{}
}

// PhotonPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the PhotonPersistentDiskVolumeSource type for use
// with apply.
type PhotonPersistentDiskVolumeSourceApplyConfiguration struct {
	PdID   *string `json:"pdID,omitempty"`
	FSType *string `json:"fsType,omitempty"`
}

// PhotonPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the PhotonPersistentDiskVolumeSource type for use
// with apply.
func PhotonPersistentDiskVolumeSource() *PhotonPersistentDiskVolumeSourceApplyConfiguration {
	return &PhotonPersistentDiskVolumeSourceApplyConfiguration{}
}

// PodApplyConfiguration represents a declarative configuration of the Pod type for use
// with apply.
type PodApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PodSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *PodStatusApplyConfiguration `json:"status,omitempty"`
}

// PodApplyConfiguration represents a declarative configuration of the Pod type for use
// with apply.
func Pod() *PodApplyConfiguration {
	return &PodApplyConfiguration{}
}

// PodAffinityApplyConfiguration represents a declarative configuration of the PodAffinity type for use
// with apply.
type PodAffinityApplyConfiguration struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *[]PodAffinityTermApplyConfiguration         `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution *[]WeightedPodAffinityTermApplyConfiguration `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodAffinityApplyConfiguration represents a declarative configuration of the PodAffinity type for use
// with apply.
func PodAffinity() *PodAffinityApplyConfiguration {
	return &PodAffinityApplyConfiguration{}
}

// PodAffinityTermApplyConfiguration represents a declarative configuration of the PodAffinityTerm type for use
// with apply.
type PodAffinityTermApplyConfiguration struct {
	LabelSelector *metav1.LabelSelectorApplyConfiguration `json:"labelSelector,omitempty"`
	Namespaces    *[]string                               `json:"namespaces,omitempty"`
	TopologyKey   *string                                 `json:"topologyKey,omitempty"`
}

// PodAffinityTermApplyConfiguration represents a declarative configuration of the PodAffinityTerm type for use
// with apply.
func PodAffinityTerm() *PodAffinityTermApplyConfiguration {
	return &PodAffinityTermApplyConfiguration{}
}

// PodAntiAffinityApplyConfiguration represents a declarative configuration of the PodAntiAffinity type for use
// with apply.
type PodAntiAffinityApplyConfiguration struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *[]PodAffinityTermApplyConfiguration         `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution *[]WeightedPodAffinityTermApplyConfiguration `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodAntiAffinityApplyConfiguration represents a declarative configuration of the PodAntiAffinity type for use
// with apply.
func PodAntiAffinity() *PodAntiAffinityApplyConfiguration {
	return &PodAntiAffinityApplyConfiguration{}
}

// PodAttachOptionsApplyConfiguration represents a declarative configuration of the PodAttachOptions type for use
// with apply.
type PodAttachOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Stdin                             *bool   `json:"stdin,omitempty"`
	Stdout                            *bool   `json:"stdout,omitempty"`
	Stderr                            *bool   `json:"stderr,omitempty"`
	TTY                               *bool   `json:"tty,omitempty"`
	Container                         *string `json:"container,omitempty"`
}

// PodAttachOptionsApplyConfiguration represents a declarative configuration of the PodAttachOptions type for use
// with apply.
func PodAttachOptions() *PodAttachOptionsApplyConfiguration {
	return &PodAttachOptionsApplyConfiguration{}
}

// PodConditionApplyConfiguration represents a declarative configuration of the PodCondition type for use
// with apply.
type PodConditionApplyConfiguration struct {
	Type               *corev1.PodConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus  `json:"status,omitempty"`
	LastProbeTime      *apismetav1.Time         `json:"lastProbeTime,omitempty"`
	LastTransitionTime *apismetav1.Time         `json:"lastTransitionTime,omitempty"`
	Reason             *string                  `json:"reason,omitempty"`
	Message            *string                  `json:"message,omitempty"`
}

// PodConditionApplyConfiguration represents a declarative configuration of the PodCondition type for use
// with apply.
func PodCondition() *PodConditionApplyConfiguration {
	return &PodConditionApplyConfiguration{}
}

// PodDNSConfigApplyConfiguration represents a declarative configuration of the PodDNSConfig type for use
// with apply.
type PodDNSConfigApplyConfiguration struct {
	Nameservers *[]string                               `json:"nameservers,omitempty"`
	Searches    *[]string                               `json:"searches,omitempty"`
	Options     *[]PodDNSConfigOptionApplyConfiguration `json:"options,omitempty"`
}

// PodDNSConfigApplyConfiguration represents a declarative configuration of the PodDNSConfig type for use
// with apply.
func PodDNSConfig() *PodDNSConfigApplyConfiguration {
	return &PodDNSConfigApplyConfiguration{}
}

// PodDNSConfigOptionApplyConfiguration represents a declarative configuration of the PodDNSConfigOption type for use
// with apply.
type PodDNSConfigOptionApplyConfiguration struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PodDNSConfigOptionApplyConfiguration represents a declarative configuration of the PodDNSConfigOption type for use
// with apply.
func PodDNSConfigOption() *PodDNSConfigOptionApplyConfiguration {
	return &PodDNSConfigOptionApplyConfiguration{}
}

// PodExecOptionsApplyConfiguration represents a declarative configuration of the PodExecOptions type for use
// with apply.
type PodExecOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Stdin                             *bool     `json:"stdin,omitempty"`
	Stdout                            *bool     `json:"stdout,omitempty"`
	Stderr                            *bool     `json:"stderr,omitempty"`
	TTY                               *bool     `json:"tty,omitempty"`
	Container                         *string   `json:"container,omitempty"`
	Command                           *[]string `json:"command,omitempty"`
}

// PodExecOptionsApplyConfiguration represents a declarative configuration of the PodExecOptions type for use
// with apply.
func PodExecOptions() *PodExecOptionsApplyConfiguration {
	return &PodExecOptionsApplyConfiguration{}
}

// PodIPApplyConfiguration represents a declarative configuration of the PodIP type for use
// with apply.
type PodIPApplyConfiguration struct {
	IP *string `json:"ip,omitempty"`
}

// PodIPApplyConfiguration represents a declarative configuration of the PodIP type for use
// with apply.
func PodIP() *PodIPApplyConfiguration {
	return &PodIPApplyConfiguration{}
}

// PodListApplyConfiguration represents a declarative configuration of the PodList type for use
// with apply.
type PodListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PodApplyConfiguration `json:"items,omitempty"`
}

// PodListApplyConfiguration represents a declarative configuration of the PodList type for use
// with apply.
func PodList() *PodListApplyConfiguration {
	return &PodListApplyConfiguration{}
}

// PodLogOptionsApplyConfiguration represents a declarative configuration of the PodLogOptions type for use
// with apply.
type PodLogOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Container                         *string          `json:"container,omitempty"`
	Follow                            *bool            `json:"follow,omitempty"`
	Previous                          *bool            `json:"previous,omitempty"`
	SinceSeconds                      *int64           `json:"sinceSeconds,omitempty"`
	SinceTime                         *apismetav1.Time `json:"sinceTime,omitempty"`
	Timestamps                        *bool            `json:"timestamps,omitempty"`
	TailLines                         *int64           `json:"tailLines,omitempty"`
	LimitBytes                        *int64           `json:"limitBytes,omitempty"`
	InsecureSkipTLSVerifyBackend      *bool            `json:"insecureSkipTLSVerifyBackend,omitempty"`
}

// PodLogOptionsApplyConfiguration represents a declarative configuration of the PodLogOptions type for use
// with apply.
func PodLogOptions() *PodLogOptionsApplyConfiguration {
	return &PodLogOptionsApplyConfiguration{}
}

// PodPortForwardOptionsApplyConfiguration represents a declarative configuration of the PodPortForwardOptions type for use
// with apply.
type PodPortForwardOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Ports                             *[]int32 `json:"ports,omitempty"`
}

// PodPortForwardOptionsApplyConfiguration represents a declarative configuration of the PodPortForwardOptions type for use
// with apply.
func PodPortForwardOptions() *PodPortForwardOptionsApplyConfiguration {
	return &PodPortForwardOptionsApplyConfiguration{}
}

// PodProxyOptionsApplyConfiguration represents a declarative configuration of the PodProxyOptions type for use
// with apply.
type PodProxyOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Path                              *string `json:"path,omitempty"`
}

// PodProxyOptionsApplyConfiguration represents a declarative configuration of the PodProxyOptions type for use
// with apply.
func PodProxyOptions() *PodProxyOptionsApplyConfiguration {
	return &PodProxyOptionsApplyConfiguration{}
}

// PodReadinessGateApplyConfiguration represents a declarative configuration of the PodReadinessGate type for use
// with apply.
type PodReadinessGateApplyConfiguration struct {
	ConditionType *corev1.PodConditionType `json:"conditionType,omitempty"`
}

// PodReadinessGateApplyConfiguration represents a declarative configuration of the PodReadinessGate type for use
// with apply.
func PodReadinessGate() *PodReadinessGateApplyConfiguration {
	return &PodReadinessGateApplyConfiguration{}
}

// PodSecurityContextApplyConfiguration represents a declarative configuration of the PodSecurityContext type for use
// with apply.
type PodSecurityContextApplyConfiguration struct {
	SELinuxOptions      *SELinuxOptionsApplyConfiguration                `json:"seLinuxOptions,omitempty"`
	WindowsOptions      *WindowsSecurityContextOptionsApplyConfiguration `json:"windowsOptions,omitempty"`
	RunAsUser           *int64                                           `json:"runAsUser,omitempty"`
	RunAsGroup          *int64                                           `json:"runAsGroup,omitempty"`
	RunAsNonRoot        *bool                                            `json:"runAsNonRoot,omitempty"`
	SupplementalGroups  *[]int64                                         `json:"supplementalGroups,omitempty"`
	FSGroup             *int64                                           `json:"fsGroup,omitempty"`
	Sysctls             *[]SysctlApplyConfiguration                      `json:"sysctls,omitempty"`
	FSGroupChangePolicy *corev1.PodFSGroupChangePolicy                   `json:"fsGroupChangePolicy,omitempty"`
	SeccompProfile      *SeccompProfileApplyConfiguration                `json:"seccompProfile,omitempty"`
}

// PodSecurityContextApplyConfiguration represents a declarative configuration of the PodSecurityContext type for use
// with apply.
func PodSecurityContext() *PodSecurityContextApplyConfiguration {
	return &PodSecurityContextApplyConfiguration{}
}

// PodSignatureApplyConfiguration represents a declarative configuration of the PodSignature type for use
// with apply.
type PodSignatureApplyConfiguration struct {
	PodController *metav1.OwnerReferenceApplyConfiguration `json:"podController,omitempty"`
}

// PodSignatureApplyConfiguration represents a declarative configuration of the PodSignature type for use
// with apply.
func PodSignature() *PodSignatureApplyConfiguration {
	return &PodSignatureApplyConfiguration{}
}

// PodSpecApplyConfiguration represents a declarative configuration of the PodSpec type for use
// with apply.
type PodSpecApplyConfiguration struct {
	Volumes                       *[]VolumeApplyConfiguration                   `json:"volumes,omitempty"`
	InitContainers                *[]ContainerApplyConfiguration                `json:"initContainers,omitempty"`
	Containers                    *[]ContainerApplyConfiguration                `json:"containers,omitempty"`
	EphemeralContainers           *[]EphemeralContainerApplyConfiguration       `json:"ephemeralContainers,omitempty"`
	RestartPolicy                 *corev1.RestartPolicy                         `json:"restartPolicy,omitempty"`
	TerminationGracePeriodSeconds *int64                                        `json:"terminationGracePeriodSeconds,omitempty"`
	ActiveDeadlineSeconds         *int64                                        `json:"activeDeadlineSeconds,omitempty"`
	DNSPolicy                     *corev1.DNSPolicy                             `json:"dnsPolicy,omitempty"`
	NodeSelector                  *map[string]string                            `json:"nodeSelector,omitempty"`
	ServiceAccountName            *string                                       `json:"serviceAccountName,omitempty"`
	DeprecatedServiceAccount      *string                                       `json:"serviceAccount,omitempty"`
	AutomountServiceAccountToken  *bool                                         `json:"automountServiceAccountToken,omitempty"`
	NodeName                      *string                                       `json:"nodeName,omitempty"`
	HostNetwork                   *bool                                         `json:"hostNetwork,omitempty"`
	HostPID                       *bool                                         `json:"hostPID,omitempty"`
	HostIPC                       *bool                                         `json:"hostIPC,omitempty"`
	ShareProcessNamespace         *bool                                         `json:"shareProcessNamespace,omitempty"`
	SecurityContext               *PodSecurityContextApplyConfiguration         `json:"securityContext,omitempty"`
	ImagePullSecrets              *[]LocalObjectReferenceApplyConfiguration     `json:"imagePullSecrets,omitempty"`
	Hostname                      *string                                       `json:"hostname,omitempty"`
	Subdomain                     *string                                       `json:"subdomain,omitempty"`
	Affinity                      *AffinityApplyConfiguration                   `json:"affinity,omitempty"`
	SchedulerName                 *string                                       `json:"schedulerName,omitempty"`
	Tolerations                   *[]TolerationApplyConfiguration               `json:"tolerations,omitempty"`
	HostAliases                   *[]HostAliasApplyConfiguration                `json:"hostAliases,omitempty"`
	PriorityClassName             *string                                       `json:"priorityClassName,omitempty"`
	Priority                      *int32                                        `json:"priority,omitempty"`
	DNSConfig                     *PodDNSConfigApplyConfiguration               `json:"dnsConfig,omitempty"`
	ReadinessGates                *[]PodReadinessGateApplyConfiguration         `json:"readinessGates,omitempty"`
	RuntimeClassName              *string                                       `json:"runtimeClassName,omitempty"`
	EnableServiceLinks            *bool                                         `json:"enableServiceLinks,omitempty"`
	PreemptionPolicy              *corev1.PreemptionPolicy                      `json:"preemptionPolicy,omitempty"`
	Overhead                      *corev1.ResourceList                          `json:"overhead,omitempty"`
	TopologySpreadConstraints     *[]TopologySpreadConstraintApplyConfiguration `json:"topologySpreadConstraints,omitempty"`
	SetHostnameAsFQDN             *bool                                         `json:"setHostnameAsFQDN,omitempty"`
}

// PodSpecApplyConfiguration represents a declarative configuration of the PodSpec type for use
// with apply.
func PodSpec() *PodSpecApplyConfiguration {
	return &PodSpecApplyConfiguration{}
}

// PodStatusApplyConfiguration represents a declarative configuration of the PodStatus type for use
// with apply.
type PodStatusApplyConfiguration struct {
	Phase                      *corev1.PodPhase                     `json:"phase,omitempty"`
	Conditions                 *[]PodConditionApplyConfiguration    `json:"conditions,omitempty"`
	Message                    *string                              `json:"message,omitempty"`
	Reason                     *string                              `json:"reason,omitempty"`
	NominatedNodeName          *string                              `json:"nominatedNodeName,omitempty"`
	HostIP                     *string                              `json:"hostIP,omitempty"`
	PodIP                      *string                              `json:"podIP,omitempty"`
	PodIPs                     *[]PodIPApplyConfiguration           `json:"podIPs,omitempty"`
	StartTime                  *apismetav1.Time                     `json:"startTime,omitempty"`
	InitContainerStatuses      *[]ContainerStatusApplyConfiguration `json:"initContainerStatuses,omitempty"`
	ContainerStatuses          *[]ContainerStatusApplyConfiguration `json:"containerStatuses,omitempty"`
	QOSClass                   *corev1.PodQOSClass                  `json:"qosClass,omitempty"`
	EphemeralContainerStatuses *[]ContainerStatusApplyConfiguration `json:"ephemeralContainerStatuses,omitempty"`
}

// PodStatusApplyConfiguration represents a declarative configuration of the PodStatus type for use
// with apply.
func PodStatus() *PodStatusApplyConfiguration {
	return &PodStatusApplyConfiguration{}
}

// PodStatusResultApplyConfiguration represents a declarative configuration of the PodStatusResult type for use
// with apply.
type PodStatusResultApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Status                               *PodStatusApplyConfiguration `json:"status,omitempty"`
}

// PodStatusResultApplyConfiguration represents a declarative configuration of the PodStatusResult type for use
// with apply.
func PodStatusResult() *PodStatusResultApplyConfiguration {
	return &PodStatusResultApplyConfiguration{}
}

// PodTemplateApplyConfiguration represents a declarative configuration of the PodTemplate type for use
// with apply.
type PodTemplateApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Template                             *PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
}

// PodTemplateApplyConfiguration represents a declarative configuration of the PodTemplate type for use
// with apply.
func PodTemplate() *PodTemplateApplyConfiguration {
	return &PodTemplateApplyConfiguration{}
}

// PodTemplateListApplyConfiguration represents a declarative configuration of the PodTemplateList type for use
// with apply.
type PodTemplateListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PodTemplateApplyConfiguration `json:"items,omitempty"`
}

// PodTemplateListApplyConfiguration represents a declarative configuration of the PodTemplateList type for use
// with apply.
func PodTemplateList() *PodTemplateListApplyConfiguration {
	return &PodTemplateListApplyConfiguration{}
}

// PodTemplateSpecApplyConfiguration represents a declarative configuration of the PodTemplateSpec type for use
// with apply.
type PodTemplateSpecApplyConfiguration struct {
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PodSpecApplyConfiguration `json:"spec,omitempty"`
}

// PodTemplateSpecApplyConfiguration represents a declarative configuration of the PodTemplateSpec type for use
// with apply.
func PodTemplateSpec() *PodTemplateSpecApplyConfiguration {
	return &PodTemplateSpecApplyConfiguration{}
}

// PortStatusApplyConfiguration represents a declarative configuration of the PortStatus type for use
// with apply.
type PortStatusApplyConfiguration struct {
	Port     *int32           `json:"port,omitempty"`
	Protocol *corev1.Protocol `json:"protocol,omitempty"`
	Error    *string          `json:"error,omitempty"`
}

// PortStatusApplyConfiguration represents a declarative configuration of the PortStatus type for use
// with apply.
func PortStatus() *PortStatusApplyConfiguration {
	return &PortStatusApplyConfiguration{}
}

// PortworxVolumeSourceApplyConfiguration represents a declarative configuration of the PortworxVolumeSource type for use
// with apply.
type PortworxVolumeSourceApplyConfiguration struct {
	VolumeID *string `json:"volumeID,omitempty"`
	FSType   *string `json:"fsType,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

// PortworxVolumeSourceApplyConfiguration represents a declarative configuration of the PortworxVolumeSource type for use
// with apply.
func PortworxVolumeSource() *PortworxVolumeSourceApplyConfiguration {
	return &PortworxVolumeSourceApplyConfiguration{}
}

// PreconditionsApplyConfiguration represents a declarative configuration of the Preconditions type for use
// with apply.
type PreconditionsApplyConfiguration struct {
	UID *types.UID `json:"uid,omitempty"`
}

// PreconditionsApplyConfiguration represents a declarative configuration of the Preconditions type for use
// with apply.
func Preconditions() *PreconditionsApplyConfiguration {
	return &PreconditionsApplyConfiguration{}
}

// PreferAvoidPodsEntryApplyConfiguration represents a declarative configuration of the PreferAvoidPodsEntry type for use
// with apply.
type PreferAvoidPodsEntryApplyConfiguration struct {
	PodSignature *PodSignatureApplyConfiguration `json:"podSignature,omitempty"`
	EvictionTime *apismetav1.Time                `json:"evictionTime,omitempty"`
	Reason       *string                         `json:"reason,omitempty"`
	Message      *string                         `json:"message,omitempty"`
}

// PreferAvoidPodsEntryApplyConfiguration represents a declarative configuration of the PreferAvoidPodsEntry type for use
// with apply.
func PreferAvoidPodsEntry() *PreferAvoidPodsEntryApplyConfiguration {
	return &PreferAvoidPodsEntryApplyConfiguration{}
}

// PreferredSchedulingTermApplyConfiguration represents a declarative configuration of the PreferredSchedulingTerm type for use
// with apply.
type PreferredSchedulingTermApplyConfiguration struct {
	Weight     *int32                              `json:"weight,omitempty"`
	Preference *NodeSelectorTermApplyConfiguration `json:"preference,omitempty"`
}

// PreferredSchedulingTermApplyConfiguration represents a declarative configuration of the PreferredSchedulingTerm type for use
// with apply.
func PreferredSchedulingTerm() *PreferredSchedulingTermApplyConfiguration {
	return &PreferredSchedulingTermApplyConfiguration{}
}

// ProbeApplyConfiguration represents a declarative configuration of the Probe type for use
// with apply.
type ProbeApplyConfiguration struct {
	HandlerApplyConfiguration `json:",inline"`
	InitialDelaySeconds       *int32 `json:"initialDelaySeconds,omitempty"`
	TimeoutSeconds            *int32 `json:"timeoutSeconds,omitempty"`
	PeriodSeconds             *int32 `json:"periodSeconds,omitempty"`
	SuccessThreshold          *int32 `json:"successThreshold,omitempty"`
	FailureThreshold          *int32 `json:"failureThreshold,omitempty"`
}

// ProbeApplyConfiguration represents a declarative configuration of the Probe type for use
// with apply.
func Probe() *ProbeApplyConfiguration {
	return &ProbeApplyConfiguration{}
}

// ProjectedVolumeSourceApplyConfiguration represents a declarative configuration of the ProjectedVolumeSource type for use
// with apply.
type ProjectedVolumeSourceApplyConfiguration struct {
	Sources     *[]VolumeProjectionApplyConfiguration `json:"sources,omitempty"`
	DefaultMode *int32                                `json:"defaultMode,omitempty"`
}

// ProjectedVolumeSourceApplyConfiguration represents a declarative configuration of the ProjectedVolumeSource type for use
// with apply.
func ProjectedVolumeSource() *ProjectedVolumeSourceApplyConfiguration {
	return &ProjectedVolumeSourceApplyConfiguration{}
}

// QuobyteVolumeSourceApplyConfiguration represents a declarative configuration of the QuobyteVolumeSource type for use
// with apply.
type QuobyteVolumeSourceApplyConfiguration struct {
	Registry *string `json:"registry,omitempty"`
	Volume   *string `json:"volume,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
	User     *string `json:"user,omitempty"`
	Group    *string `json:"group,omitempty"`
	Tenant   *string `json:"tenant,omitempty"`
}

// QuobyteVolumeSourceApplyConfiguration represents a declarative configuration of the QuobyteVolumeSource type for use
// with apply.
func QuobyteVolumeSource() *QuobyteVolumeSourceApplyConfiguration {
	return &QuobyteVolumeSourceApplyConfiguration{}
}

// RBDPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the RBDPersistentVolumeSource type for use
// with apply.
type RBDPersistentVolumeSourceApplyConfiguration struct {
	CephMonitors *[]string                          `json:"monitors,omitempty"`
	RBDImage     *string                            `json:"image,omitempty"`
	FSType       *string                            `json:"fsType,omitempty"`
	RBDPool      *string                            `json:"pool,omitempty"`
	RadosUser    *string                            `json:"user,omitempty"`
	Keyring      *string                            `json:"keyring,omitempty"`
	SecretRef    *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly     *bool                              `json:"readOnly,omitempty"`
}

// RBDPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the RBDPersistentVolumeSource type for use
// with apply.
func RBDPersistentVolumeSource() *RBDPersistentVolumeSourceApplyConfiguration {
	return &RBDPersistentVolumeSourceApplyConfiguration{}
}

// RBDVolumeSourceApplyConfiguration represents a declarative configuration of the RBDVolumeSource type for use
// with apply.
type RBDVolumeSourceApplyConfiguration struct {
	CephMonitors *[]string                               `json:"monitors,omitempty"`
	RBDImage     *string                                 `json:"image,omitempty"`
	FSType       *string                                 `json:"fsType,omitempty"`
	RBDPool      *string                                 `json:"pool,omitempty"`
	RadosUser    *string                                 `json:"user,omitempty"`
	Keyring      *string                                 `json:"keyring,omitempty"`
	SecretRef    *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly     *bool                                   `json:"readOnly,omitempty"`
}

// RBDVolumeSourceApplyConfiguration represents a declarative configuration of the RBDVolumeSource type for use
// with apply.
func RBDVolumeSource() *RBDVolumeSourceApplyConfiguration {
	return &RBDVolumeSourceApplyConfiguration{}
}

// RangeAllocationApplyConfiguration represents a declarative configuration of the RangeAllocation type for use
// with apply.
type RangeAllocationApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Range                                *string `json:"range,omitempty"`
	Data                                 *[]byte `json:"data,omitempty"`
}

// RangeAllocationApplyConfiguration represents a declarative configuration of the RangeAllocation type for use
// with apply.
func RangeAllocation() *RangeAllocationApplyConfiguration {
	return &RangeAllocationApplyConfiguration{}
}

// ReplicationControllerApplyConfiguration represents a declarative configuration of the ReplicationController type for use
// with apply.
type ReplicationControllerApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *ReplicationControllerSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *ReplicationControllerStatusApplyConfiguration `json:"status,omitempty"`
}

// ReplicationControllerApplyConfiguration represents a declarative configuration of the ReplicationController type for use
// with apply.
func ReplicationController() *ReplicationControllerApplyConfiguration {
	return &ReplicationControllerApplyConfiguration{}
}

// ReplicationControllerConditionApplyConfiguration represents a declarative configuration of the ReplicationControllerCondition type for use
// with apply.
type ReplicationControllerConditionApplyConfiguration struct {
	Type               *corev1.ReplicationControllerConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus                    `json:"status,omitempty"`
	LastTransitionTime *apismetav1.Time                           `json:"lastTransitionTime,omitempty"`
	Reason             *string                                    `json:"reason,omitempty"`
	Message            *string                                    `json:"message,omitempty"`
}

// ReplicationControllerConditionApplyConfiguration represents a declarative configuration of the ReplicationControllerCondition type for use
// with apply.
func ReplicationControllerCondition() *ReplicationControllerConditionApplyConfiguration {
	return &ReplicationControllerConditionApplyConfiguration{}
}

// ReplicationControllerListApplyConfiguration represents a declarative configuration of the ReplicationControllerList type for use
// with apply.
type ReplicationControllerListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ReplicationControllerApplyConfiguration `json:"items,omitempty"`
}

// ReplicationControllerListApplyConfiguration represents a declarative configuration of the ReplicationControllerList type for use
// with apply.
func ReplicationControllerList() *ReplicationControllerListApplyConfiguration {
	return &ReplicationControllerListApplyConfiguration{}
}

// ReplicationControllerSpecApplyConfiguration represents a declarative configuration of the ReplicationControllerSpec type for use
// with apply.
type ReplicationControllerSpecApplyConfiguration struct {
	Replicas        *int32                             `json:"replicas,omitempty"`
	MinReadySeconds *int32                             `json:"minReadySeconds,omitempty"`
	Selector        *map[string]string                 `json:"selector,omitempty"`
	Template        *PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
}

// ReplicationControllerSpecApplyConfiguration represents a declarative configuration of the ReplicationControllerSpec type for use
// with apply.
func ReplicationControllerSpec() *ReplicationControllerSpecApplyConfiguration {
	return &ReplicationControllerSpecApplyConfiguration{}
}

// ReplicationControllerStatusApplyConfiguration represents a declarative configuration of the ReplicationControllerStatus type for use
// with apply.
type ReplicationControllerStatusApplyConfiguration struct {
	Replicas             *int32                                              `json:"replicas,omitempty"`
	FullyLabeledReplicas *int32                                              `json:"fullyLabeledReplicas,omitempty"`
	ReadyReplicas        *int32                                              `json:"readyReplicas,omitempty"`
	AvailableReplicas    *int32                                              `json:"availableReplicas,omitempty"`
	ObservedGeneration   *int64                                              `json:"observedGeneration,omitempty"`
	Conditions           *[]ReplicationControllerConditionApplyConfiguration `json:"conditions,omitempty"`
}

// ReplicationControllerStatusApplyConfiguration represents a declarative configuration of the ReplicationControllerStatus type for use
// with apply.
func ReplicationControllerStatus() *ReplicationControllerStatusApplyConfiguration {
	return &ReplicationControllerStatusApplyConfiguration{}
}

// ResourceFieldSelectorApplyConfiguration represents a declarative configuration of the ResourceFieldSelector type for use
// with apply.
type ResourceFieldSelectorApplyConfiguration struct {
	ContainerName *string            `json:"containerName,omitempty"`
	Resource      *string            `json:"resource,omitempty"`
	Divisor       *resource.Quantity `json:"divisor,omitempty"`
}

// ResourceFieldSelectorApplyConfiguration represents a declarative configuration of the ResourceFieldSelector type for use
// with apply.
func ResourceFieldSelector() *ResourceFieldSelectorApplyConfiguration {
	return &ResourceFieldSelectorApplyConfiguration{}
}

// ResourceQuotaApplyConfiguration represents a declarative configuration of the ResourceQuota type for use
// with apply.
type ResourceQuotaApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *ResourceQuotaSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *ResourceQuotaStatusApplyConfiguration `json:"status,omitempty"`
}

// ResourceQuotaApplyConfiguration represents a declarative configuration of the ResourceQuota type for use
// with apply.
func ResourceQuota() *ResourceQuotaApplyConfiguration {
	return &ResourceQuotaApplyConfiguration{}
}

// ResourceQuotaListApplyConfiguration represents a declarative configuration of the ResourceQuotaList type for use
// with apply.
type ResourceQuotaListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ResourceQuotaApplyConfiguration `json:"items,omitempty"`
}

// ResourceQuotaListApplyConfiguration represents a declarative configuration of the ResourceQuotaList type for use
// with apply.
func ResourceQuotaList() *ResourceQuotaListApplyConfiguration {
	return &ResourceQuotaListApplyConfiguration{}
}

// ResourceQuotaSpecApplyConfiguration represents a declarative configuration of the ResourceQuotaSpec type for use
// with apply.
type ResourceQuotaSpecApplyConfiguration struct {
	Hard          *corev1.ResourceList             `json:"hard,omitempty"`
	Scopes        *[]corev1.ResourceQuotaScope     `json:"scopes,omitempty"`
	ScopeSelector *ScopeSelectorApplyConfiguration `json:"scopeSelector,omitempty"`
}

// ResourceQuotaSpecApplyConfiguration represents a declarative configuration of the ResourceQuotaSpec type for use
// with apply.
func ResourceQuotaSpec() *ResourceQuotaSpecApplyConfiguration {
	return &ResourceQuotaSpecApplyConfiguration{}
}

// ResourceQuotaStatusApplyConfiguration represents a declarative configuration of the ResourceQuotaStatus type for use
// with apply.
type ResourceQuotaStatusApplyConfiguration struct {
	Hard *corev1.ResourceList `json:"hard,omitempty"`
	Used *corev1.ResourceList `json:"used,omitempty"`
}

// ResourceQuotaStatusApplyConfiguration represents a declarative configuration of the ResourceQuotaStatus type for use
// with apply.
func ResourceQuotaStatus() *ResourceQuotaStatusApplyConfiguration {
	return &ResourceQuotaStatusApplyConfiguration{}
}

// ResourceRequirementsApplyConfiguration represents a declarative configuration of the ResourceRequirements type for use
// with apply.
type ResourceRequirementsApplyConfiguration struct {
	Limits   *corev1.ResourceList `json:"limits,omitempty"`
	Requests *corev1.ResourceList `json:"requests,omitempty"`
}

// ResourceRequirementsApplyConfiguration represents a declarative configuration of the ResourceRequirements type for use
// with apply.
func ResourceRequirements() *ResourceRequirementsApplyConfiguration {
	return &ResourceRequirementsApplyConfiguration{}
}

// SELinuxOptionsApplyConfiguration represents a declarative configuration of the SELinuxOptions type for use
// with apply.
type SELinuxOptionsApplyConfiguration struct {
	User  *string `json:"user,omitempty"`
	Role  *string `json:"role,omitempty"`
	Type  *string `json:"type,omitempty"`
	Level *string `json:"level,omitempty"`
}

// SELinuxOptionsApplyConfiguration represents a declarative configuration of the SELinuxOptions type for use
// with apply.
func SELinuxOptions() *SELinuxOptionsApplyConfiguration {
	return &SELinuxOptionsApplyConfiguration{}
}

// ScaleIOPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOPersistentVolumeSource type for use
// with apply.
type ScaleIOPersistentVolumeSourceApplyConfiguration struct {
	Gateway          *string                            `json:"gateway,omitempty"`
	System           *string                            `json:"system,omitempty"`
	SecretRef        *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	SSLEnabled       *bool                              `json:"sslEnabled,omitempty"`
	ProtectionDomain *string                            `json:"protectionDomain,omitempty"`
	StoragePool      *string                            `json:"storagePool,omitempty"`
	StorageMode      *string                            `json:"storageMode,omitempty"`
	VolumeName       *string                            `json:"volumeName,omitempty"`
	FSType           *string                            `json:"fsType,omitempty"`
	ReadOnly         *bool                              `json:"readOnly,omitempty"`
}

// ScaleIOPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOPersistentVolumeSource type for use
// with apply.
func ScaleIOPersistentVolumeSource() *ScaleIOPersistentVolumeSourceApplyConfiguration {
	return &ScaleIOPersistentVolumeSourceApplyConfiguration{}
}

// ScaleIOVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOVolumeSource type for use
// with apply.
type ScaleIOVolumeSourceApplyConfiguration struct {
	Gateway          *string                                 `json:"gateway,omitempty"`
	System           *string                                 `json:"system,omitempty"`
	SecretRef        *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	SSLEnabled       *bool                                   `json:"sslEnabled,omitempty"`
	ProtectionDomain *string                                 `json:"protectionDomain,omitempty"`
	StoragePool      *string                                 `json:"storagePool,omitempty"`
	StorageMode      *string                                 `json:"storageMode,omitempty"`
	VolumeName       *string                                 `json:"volumeName,omitempty"`
	FSType           *string                                 `json:"fsType,omitempty"`
	ReadOnly         *bool                                   `json:"readOnly,omitempty"`
}

// ScaleIOVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOVolumeSource type for use
// with apply.
func ScaleIOVolumeSource() *ScaleIOVolumeSourceApplyConfiguration {
	return &ScaleIOVolumeSourceApplyConfiguration{}
}

// ScopeSelectorApplyConfiguration represents a declarative configuration of the ScopeSelector type for use
// with apply.
type ScopeSelectorApplyConfiguration struct {
	MatchExpressions *[]ScopedResourceSelectorRequirementApplyConfiguration `json:"matchExpressions,omitempty"`
}

// ScopeSelectorApplyConfiguration represents a declarative configuration of the ScopeSelector type for use
// with apply.
func ScopeSelector() *ScopeSelectorApplyConfiguration {
	return &ScopeSelectorApplyConfiguration{}
}

// ScopedResourceSelectorRequirementApplyConfiguration represents a declarative configuration of the ScopedResourceSelectorRequirement type for use
// with apply.
type ScopedResourceSelectorRequirementApplyConfiguration struct {
	ScopeName *corev1.ResourceQuotaScope    `json:"scopeName,omitempty"`
	Operator  *corev1.ScopeSelectorOperator `json:"operator,omitempty"`
	Values    *[]string                     `json:"values,omitempty"`
}

// ScopedResourceSelectorRequirementApplyConfiguration represents a declarative configuration of the ScopedResourceSelectorRequirement type for use
// with apply.
func ScopedResourceSelectorRequirement() *ScopedResourceSelectorRequirementApplyConfiguration {
	return &ScopedResourceSelectorRequirementApplyConfiguration{}
}

// SeccompProfileApplyConfiguration represents a declarative configuration of the SeccompProfile type for use
// with apply.
type SeccompProfileApplyConfiguration struct {
	Type             *corev1.SeccompProfileType `json:"type,omitempty"`
	LocalhostProfile *string                    `json:"localhostProfile,omitempty"`
}

// SeccompProfileApplyConfiguration represents a declarative configuration of the SeccompProfile type for use
// with apply.
func SeccompProfile() *SeccompProfileApplyConfiguration {
	return &SeccompProfileApplyConfiguration{}
}

// SecretApplyConfiguration represents a declarative configuration of the Secret type for use
// with apply.
type SecretApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Immutable                            *bool              `json:"immutable,omitempty"`
	Data                                 *map[string][]byte `json:"data,omitempty"`
	StringData                           *map[string]string `json:"stringData,omitempty"`
	Type                                 *corev1.SecretType `json:"type,omitempty"`
}

// SecretApplyConfiguration represents a declarative configuration of the Secret type for use
// with apply.
func Secret() *SecretApplyConfiguration {
	return &SecretApplyConfiguration{}
}

// SecretEnvSourceApplyConfiguration represents a declarative configuration of the SecretEnvSource type for use
// with apply.
type SecretEnvSourceApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Optional                               *bool `json:"optional,omitempty"`
}

// SecretEnvSourceApplyConfiguration represents a declarative configuration of the SecretEnvSource type for use
// with apply.
func SecretEnvSource() *SecretEnvSourceApplyConfiguration {
	return &SecretEnvSourceApplyConfiguration{}
}

// SecretKeySelectorApplyConfiguration represents a declarative configuration of the SecretKeySelector type for use
// with apply.
type SecretKeySelectorApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Key                                    *string `json:"key,omitempty"`
	Optional                               *bool   `json:"optional,omitempty"`
}

// SecretKeySelectorApplyConfiguration represents a declarative configuration of the SecretKeySelector type for use
// with apply.
func SecretKeySelector() *SecretKeySelectorApplyConfiguration {
	return &SecretKeySelectorApplyConfiguration{}
}

// SecretListApplyConfiguration represents a declarative configuration of the SecretList type for use
// with apply.
type SecretListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]SecretApplyConfiguration `json:"items,omitempty"`
}

// SecretListApplyConfiguration represents a declarative configuration of the SecretList type for use
// with apply.
func SecretList() *SecretListApplyConfiguration {
	return &SecretListApplyConfiguration{}
}

// SecretProjectionApplyConfiguration represents a declarative configuration of the SecretProjection type for use
// with apply.
type SecretProjectionApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Items                                  *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	Optional                               *bool                          `json:"optional,omitempty"`
}

// SecretProjectionApplyConfiguration represents a declarative configuration of the SecretProjection type for use
// with apply.
func SecretProjection() *SecretProjectionApplyConfiguration {
	return &SecretProjectionApplyConfiguration{}
}

// SecretReferenceApplyConfiguration represents a declarative configuration of the SecretReference type for use
// with apply.
type SecretReferenceApplyConfiguration struct {
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// SecretReferenceApplyConfiguration represents a declarative configuration of the SecretReference type for use
// with apply.
func SecretReference() *SecretReferenceApplyConfiguration {
	return &SecretReferenceApplyConfiguration{}
}

// SecretVolumeSourceApplyConfiguration represents a declarative configuration of the SecretVolumeSource type for use
// with apply.
type SecretVolumeSourceApplyConfiguration struct {
	SecretName  *string                        `json:"secretName,omitempty"`
	Items       *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	DefaultMode *int32                         `json:"defaultMode,omitempty"`
	Optional    *bool                          `json:"optional,omitempty"`
}

// SecretVolumeSourceApplyConfiguration represents a declarative configuration of the SecretVolumeSource type for use
// with apply.
func SecretVolumeSource() *SecretVolumeSourceApplyConfiguration {
	return &SecretVolumeSourceApplyConfiguration{}
}

// SecurityContextApplyConfiguration represents a declarative configuration of the SecurityContext type for use
// with apply.
type SecurityContextApplyConfiguration struct {
	Capabilities             *CapabilitiesApplyConfiguration                  `json:"capabilities,omitempty"`
	Privileged               *bool                                            `json:"privileged,omitempty"`
	SELinuxOptions           *SELinuxOptionsApplyConfiguration                `json:"seLinuxOptions,omitempty"`
	WindowsOptions           *WindowsSecurityContextOptionsApplyConfiguration `json:"windowsOptions,omitempty"`
	RunAsUser                *int64                                           `json:"runAsUser,omitempty"`
	RunAsGroup               *int64                                           `json:"runAsGroup,omitempty"`
	RunAsNonRoot             *bool                                            `json:"runAsNonRoot,omitempty"`
	ReadOnlyRootFilesystem   *bool                                            `json:"readOnlyRootFilesystem,omitempty"`
	AllowPrivilegeEscalation *bool                                            `json:"allowPrivilegeEscalation,omitempty"`
	ProcMount                *corev1.ProcMountType                            `json:"procMount,omitempty"`
	SeccompProfile           *SeccompProfileApplyConfiguration                `json:"seccompProfile,omitempty"`
}

// SecurityContextApplyConfiguration represents a declarative configuration of the SecurityContext type for use
// with apply.
func SecurityContext() *SecurityContextApplyConfiguration {
	return &SecurityContextApplyConfiguration{}
}

// SerializedReferenceApplyConfiguration represents a declarative configuration of the SerializedReference type for use
// with apply.
type SerializedReferenceApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Reference                         *ObjectReferenceApplyConfiguration `json:"reference,omitempty"`
}

// SerializedReferenceApplyConfiguration represents a declarative configuration of the SerializedReference type for use
// with apply.
func SerializedReference() *SerializedReferenceApplyConfiguration {
	return &SerializedReferenceApplyConfiguration{}
}

// ServiceApplyConfiguration represents a declarative configuration of the Service type for use
// with apply.
type ServiceApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *ServiceSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *ServiceStatusApplyConfiguration `json:"status,omitempty"`
}

// ServiceApplyConfiguration represents a declarative configuration of the Service type for use
// with apply.
func Service() *ServiceApplyConfiguration {
	return &ServiceApplyConfiguration{}
}

// ServiceAccountApplyConfiguration represents a declarative configuration of the ServiceAccount type for use
// with apply.
type ServiceAccountApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Secrets                              *[]ObjectReferenceApplyConfiguration      `json:"secrets,omitempty"`
	ImagePullSecrets                     *[]LocalObjectReferenceApplyConfiguration `json:"imagePullSecrets,omitempty"`
	AutomountServiceAccountToken         *bool                                     `json:"automountServiceAccountToken,omitempty"`
}

// ServiceAccountApplyConfiguration represents a declarative configuration of the ServiceAccount type for use
// with apply.
func ServiceAccount() *ServiceAccountApplyConfiguration {
	return &ServiceAccountApplyConfiguration{}
}

// ServiceAccountListApplyConfiguration represents a declarative configuration of the ServiceAccountList type for use
// with apply.
type ServiceAccountListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ServiceAccountApplyConfiguration `json:"items,omitempty"`
}

// ServiceAccountListApplyConfiguration represents a declarative configuration of the ServiceAccountList type for use
// with apply.
func ServiceAccountList() *ServiceAccountListApplyConfiguration {
	return &ServiceAccountListApplyConfiguration{}
}

// ServiceAccountTokenProjectionApplyConfiguration represents a declarative configuration of the ServiceAccountTokenProjection type for use
// with apply.
type ServiceAccountTokenProjectionApplyConfiguration struct {
	Audience          *string `json:"audience,omitempty"`
	ExpirationSeconds *int64  `json:"expirationSeconds,omitempty"`
	Path              *string `json:"path,omitempty"`
}

// ServiceAccountTokenProjectionApplyConfiguration represents a declarative configuration of the ServiceAccountTokenProjection type for use
// with apply.
func ServiceAccountTokenProjection() *ServiceAccountTokenProjectionApplyConfiguration {
	return &ServiceAccountTokenProjectionApplyConfiguration{}
}

// ServiceListApplyConfiguration represents a declarative configuration of the ServiceList type for use
// with apply.
type ServiceListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ServiceApplyConfiguration `json:"items,omitempty"`
}

// ServiceListApplyConfiguration represents a declarative configuration of the ServiceList type for use
// with apply.
func ServiceList() *ServiceListApplyConfiguration {
	return &ServiceListApplyConfiguration{}
}

// ServicePortApplyConfiguration represents a declarative configuration of the ServicePort type for use
// with apply.
type ServicePortApplyConfiguration struct {
	Name        *string             `json:"name,omitempty"`
	Protocol    *corev1.Protocol    `json:"protocol,omitempty"`
	AppProtocol *string             `json:"appProtocol,omitempty"`
	Port        *int32              `json:"port,omitempty"`
	TargetPort  *intstr.IntOrString `json:"targetPort,omitempty"`
	NodePort    *int32              `json:"nodePort,omitempty"`
}

// ServicePortApplyConfiguration represents a declarative configuration of the ServicePort type for use
// with apply.
func ServicePort() *ServicePortApplyConfiguration {
	return &ServicePortApplyConfiguration{}
}

// ServiceProxyOptionsApplyConfiguration represents a declarative configuration of the ServiceProxyOptions type for use
// with apply.
type ServiceProxyOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Path                              *string `json:"path,omitempty"`
}

// ServiceProxyOptionsApplyConfiguration represents a declarative configuration of the ServiceProxyOptions type for use
// with apply.
func ServiceProxyOptions() *ServiceProxyOptionsApplyConfiguration {
	return &ServiceProxyOptionsApplyConfiguration{}
}

// ServiceSpecApplyConfiguration represents a declarative configuration of the ServiceSpec type for use
// with apply.
type ServiceSpecApplyConfiguration struct {
	Ports                         *[]ServicePortApplyConfiguration         `json:"ports,omitempty"`
	Selector                      *map[string]string                       `json:"selector,omitempty"`
	ClusterIP                     *string                                  `json:"clusterIP,omitempty"`
	ClusterIPs                    *[]string                                `json:"clusterIPs,omitempty"`
	Type                          *corev1.ServiceType                      `json:"type,omitempty"`
	ExternalIPs                   *[]string                                `json:"externalIPs,omitempty"`
	SessionAffinity               *corev1.ServiceAffinity                  `json:"sessionAffinity,omitempty"`
	LoadBalancerIP                *string                                  `json:"loadBalancerIP,omitempty"`
	LoadBalancerSourceRanges      *[]string                                `json:"loadBalancerSourceRanges,omitempty"`
	ExternalName                  *string                                  `json:"externalName,omitempty"`
	ExternalTrafficPolicy         *corev1.ServiceExternalTrafficPolicyType `json:"externalTrafficPolicy,omitempty"`
	HealthCheckNodePort           *int32                                   `json:"healthCheckNodePort,omitempty"`
	PublishNotReadyAddresses      *bool                                    `json:"publishNotReadyAddresses,omitempty"`
	SessionAffinityConfig         *SessionAffinityConfigApplyConfiguration `json:"sessionAffinityConfig,omitempty"`
	TopologyKeys                  *[]string                                `json:"topologyKeys,omitempty"`
	IPFamilies                    *[]corev1.IPFamily                       `json:"ipFamilies,omitempty"`
	IPFamilyPolicy                *corev1.IPFamilyPolicyType               `json:"ipFamilyPolicy,omitempty"`
	AllocateLoadBalancerNodePorts *bool                                    `json:"allocateLoadBalancerNodePorts,omitempty"`
}

// ServiceSpecApplyConfiguration represents a declarative configuration of the ServiceSpec type for use
// with apply.
func ServiceSpec() *ServiceSpecApplyConfiguration {
	return &ServiceSpecApplyConfiguration{}
}

// ServiceStatusApplyConfiguration represents a declarative configuration of the ServiceStatus type for use
// with apply.
type ServiceStatusApplyConfiguration struct {
	LoadBalancer *LoadBalancerStatusApplyConfiguration `json:"loadBalancer,omitempty"`
	Conditions   *[]metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// ServiceStatusApplyConfiguration represents a declarative configuration of the ServiceStatus type for use
// with apply.
func ServiceStatus() *ServiceStatusApplyConfiguration {
	return &ServiceStatusApplyConfiguration{}
}

// SessionAffinityConfigApplyConfiguration represents a declarative configuration of the SessionAffinityConfig type for use
// with apply.
type SessionAffinityConfigApplyConfiguration struct {
	ClientIP *ClientIPConfigApplyConfiguration `json:"clientIP,omitempty"`
}

// SessionAffinityConfigApplyConfiguration represents a declarative configuration of the SessionAffinityConfig type for use
// with apply.
func SessionAffinityConfig() *SessionAffinityConfigApplyConfiguration {
	return &SessionAffinityConfigApplyConfiguration{}
}

// StorageOSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSPersistentVolumeSource type for use
// with apply.
type StorageOSPersistentVolumeSourceApplyConfiguration struct {
	VolumeName      *string                            `json:"volumeName,omitempty"`
	VolumeNamespace *string                            `json:"volumeNamespace,omitempty"`
	FSType          *string                            `json:"fsType,omitempty"`
	ReadOnly        *bool                              `json:"readOnly,omitempty"`
	SecretRef       *ObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// StorageOSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSPersistentVolumeSource type for use
// with apply.
func StorageOSPersistentVolumeSource() *StorageOSPersistentVolumeSourceApplyConfiguration {
	return &StorageOSPersistentVolumeSourceApplyConfiguration{}
}

// StorageOSVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSVolumeSource type for use
// with apply.
type StorageOSVolumeSourceApplyConfiguration struct {
	VolumeName      *string                                 `json:"volumeName,omitempty"`
	VolumeNamespace *string                                 `json:"volumeNamespace,omitempty"`
	FSType          *string                                 `json:"fsType,omitempty"`
	ReadOnly        *bool                                   `json:"readOnly,omitempty"`
	SecretRef       *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// StorageOSVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSVolumeSource type for use
// with apply.
func StorageOSVolumeSource() *StorageOSVolumeSourceApplyConfiguration {
	return &StorageOSVolumeSourceApplyConfiguration{}
}

// SysctlApplyConfiguration represents a declarative configuration of the Sysctl type for use
// with apply.
type SysctlApplyConfiguration struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// SysctlApplyConfiguration represents a declarative configuration of the Sysctl type for use
// with apply.
func Sysctl() *SysctlApplyConfiguration {
	return &SysctlApplyConfiguration{}
}

// TCPSocketActionApplyConfiguration represents a declarative configuration of the TCPSocketAction type for use
// with apply.
type TCPSocketActionApplyConfiguration struct {
	Port *intstr.IntOrString `json:"port,omitempty"`
	Host *string             `json:"host,omitempty"`
}

// TCPSocketActionApplyConfiguration represents a declarative configuration of the TCPSocketAction type for use
// with apply.
func TCPSocketAction() *TCPSocketActionApplyConfiguration {
	return &TCPSocketActionApplyConfiguration{}
}

// TaintApplyConfiguration represents a declarative configuration of the Taint type for use
// with apply.
type TaintApplyConfiguration struct {
	Key       *string             `json:"key,omitempty"`
	Value     *string             `json:"value,omitempty"`
	Effect    *corev1.TaintEffect `json:"effect,omitempty"`
	TimeAdded *apismetav1.Time    `json:"timeAdded,omitempty"`
}

// TaintApplyConfiguration represents a declarative configuration of the Taint type for use
// with apply.
func Taint() *TaintApplyConfiguration {
	return &TaintApplyConfiguration{}
}

// TolerationApplyConfiguration represents a declarative configuration of the Toleration type for use
// with apply.
type TolerationApplyConfiguration struct {
	Key               *string                    `json:"key,omitempty"`
	Operator          *corev1.TolerationOperator `json:"operator,omitempty"`
	Value             *string                    `json:"value,omitempty"`
	Effect            *corev1.TaintEffect        `json:"effect,omitempty"`
	TolerationSeconds *int64                     `json:"tolerationSeconds,omitempty"`
}

// TolerationApplyConfiguration represents a declarative configuration of the Toleration type for use
// with apply.
func Toleration() *TolerationApplyConfiguration {
	return &TolerationApplyConfiguration{}
}

// TopologySelectorLabelRequirementApplyConfiguration represents a declarative configuration of the TopologySelectorLabelRequirement type for use
// with apply.
type TopologySelectorLabelRequirementApplyConfiguration struct {
	Key    *string   `json:"key,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// TopologySelectorLabelRequirementApplyConfiguration represents a declarative configuration of the TopologySelectorLabelRequirement type for use
// with apply.
func TopologySelectorLabelRequirement() *TopologySelectorLabelRequirementApplyConfiguration {
	return &TopologySelectorLabelRequirementApplyConfiguration{}
}

// TopologySelectorTermApplyConfiguration represents a declarative configuration of the TopologySelectorTerm type for use
// with apply.
type TopologySelectorTermApplyConfiguration struct {
	MatchLabelExpressions *[]TopologySelectorLabelRequirementApplyConfiguration `json:"matchLabelExpressions,omitempty"`
}

// TopologySelectorTermApplyConfiguration represents a declarative configuration of the TopologySelectorTerm type for use
// with apply.
func TopologySelectorTerm() *TopologySelectorTermApplyConfiguration {
	return &TopologySelectorTermApplyConfiguration{}
}

// TopologySpreadConstraintApplyConfiguration represents a declarative configuration of the TopologySpreadConstraint type for use
// with apply.
type TopologySpreadConstraintApplyConfiguration struct {
	MaxSkew           *int32                                  `json:"maxSkew,omitempty"`
	TopologyKey       *string                                 `json:"topologyKey,omitempty"`
	WhenUnsatisfiable *corev1.UnsatisfiableConstraintAction   `json:"whenUnsatisfiable,omitempty"`
	LabelSelector     *metav1.LabelSelectorApplyConfiguration `json:"labelSelector,omitempty"`
}

// TopologySpreadConstraintApplyConfiguration represents a declarative configuration of the TopologySpreadConstraint type for use
// with apply.
func TopologySpreadConstraint() *TopologySpreadConstraintApplyConfiguration {
	return &TopologySpreadConstraintApplyConfiguration{}
}

// TypedLocalObjectReferenceApplyConfiguration represents a declarative configuration of the TypedLocalObjectReference type for use
// with apply.
type TypedLocalObjectReferenceApplyConfiguration struct {
	APIGroup *string `json:"apiGroup,omitempty"`
	Kind     *string `json:"kind,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// TypedLocalObjectReferenceApplyConfiguration represents a declarative configuration of the TypedLocalObjectReference type for use
// with apply.
func TypedLocalObjectReference() *TypedLocalObjectReferenceApplyConfiguration {
	return &TypedLocalObjectReferenceApplyConfiguration{}
}

// VolumeApplyConfiguration represents a declarative configuration of the Volume type for use
// with apply.
type VolumeApplyConfiguration struct {
	Name                           *string `json:"name,omitempty"`
	VolumeSourceApplyConfiguration `json:",inline"`
}

// VolumeApplyConfiguration represents a declarative configuration of the Volume type for use
// with apply.
func Volume() *VolumeApplyConfiguration {
	return &VolumeApplyConfiguration{}
}

// VolumeDeviceApplyConfiguration represents a declarative configuration of the VolumeDevice type for use
// with apply.
type VolumeDeviceApplyConfiguration struct {
	Name       *string `json:"name,omitempty"`
	DevicePath *string `json:"devicePath,omitempty"`
}

// VolumeDeviceApplyConfiguration represents a declarative configuration of the VolumeDevice type for use
// with apply.
func VolumeDevice() *VolumeDeviceApplyConfiguration {
	return &VolumeDeviceApplyConfiguration{}
}

// VolumeMountApplyConfiguration represents a declarative configuration of the VolumeMount type for use
// with apply.
type VolumeMountApplyConfiguration struct {
	Name             *string                      `json:"name,omitempty"`
	ReadOnly         *bool                        `json:"readOnly,omitempty"`
	MountPath        *string                      `json:"mountPath,omitempty"`
	SubPath          *string                      `json:"subPath,omitempty"`
	MountPropagation *corev1.MountPropagationMode `json:"mountPropagation,omitempty"`
	SubPathExpr      *string                      `json:"subPathExpr,omitempty"`
}

// VolumeMountApplyConfiguration represents a declarative configuration of the VolumeMount type for use
// with apply.
func VolumeMount() *VolumeMountApplyConfiguration {
	return &VolumeMountApplyConfiguration{}
}

// VolumeNodeAffinityApplyConfiguration represents a declarative configuration of the VolumeNodeAffinity type for use
// with apply.
type VolumeNodeAffinityApplyConfiguration struct {
	Required *NodeSelectorApplyConfiguration `json:"required,omitempty"`
}

// VolumeNodeAffinityApplyConfiguration represents a declarative configuration of the VolumeNodeAffinity type for use
// with apply.
func VolumeNodeAffinity() *VolumeNodeAffinityApplyConfiguration {
	return &VolumeNodeAffinityApplyConfiguration{}
}

// VolumeProjectionApplyConfiguration represents a declarative configuration of the VolumeProjection type for use
// with apply.
type VolumeProjectionApplyConfiguration struct {
	Secret              *SecretProjectionApplyConfiguration              `json:"secret,omitempty"`
	DownwardAPI         *DownwardAPIProjectionApplyConfiguration         `json:"downwardAPI,omitempty"`
	ConfigMap           *ConfigMapProjectionApplyConfiguration           `json:"configMap,omitempty"`
	ServiceAccountToken *ServiceAccountTokenProjectionApplyConfiguration `json:"serviceAccountToken,omitempty"`
}

// VolumeProjectionApplyConfiguration represents a declarative configuration of the VolumeProjection type for use
// with apply.
func VolumeProjection() *VolumeProjectionApplyConfiguration {
	return &VolumeProjectionApplyConfiguration{}
}

// VolumeSourceApplyConfiguration represents a declarative configuration of the VolumeSource type for use
// with apply.
type VolumeSourceApplyConfiguration struct {
	HostPath              *HostPathVolumeSourceApplyConfiguration              `json:"hostPath,omitempty"`
	EmptyDir              *EmptyDirVolumeSourceApplyConfiguration              `json:"emptyDir,omitempty"`
	GCEPersistentDisk     *GCEPersistentDiskVolumeSourceApplyConfiguration     `json:"gcePersistentDisk,omitempty"`
	AWSElasticBlockStore  *AWSElasticBlockStoreVolumeSourceApplyConfiguration  `json:"awsElasticBlockStore,omitempty"`
	GitRepo               *GitRepoVolumeSourceApplyConfiguration               `json:"gitRepo,omitempty"`
	Secret                *SecretVolumeSourceApplyConfiguration                `json:"secret,omitempty"`
	NFS                   *NFSVolumeSourceApplyConfiguration                   `json:"nfs,omitempty"`
	ISCSI                 *ISCSIVolumeSourceApplyConfiguration                 `json:"iscsi,omitempty"`
	Glusterfs             *GlusterfsVolumeSourceApplyConfiguration             `json:"glusterfs,omitempty"`
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSourceApplyConfiguration `json:"persistentVolumeClaim,omitempty"`
	RBD                   *RBDVolumeSourceApplyConfiguration                   `json:"rbd,omitempty"`
	FlexVolume            *FlexVolumeSourceApplyConfiguration                  `json:"flexVolume,omitempty"`
	Cinder                *CinderVolumeSourceApplyConfiguration                `json:"cinder,omitempty"`
	CephFS                *CephFSVolumeSourceApplyConfiguration                `json:"cephfs,omitempty"`
	Flocker               *FlockerVolumeSourceApplyConfiguration               `json:"flocker,omitempty"`
	DownwardAPI           *DownwardAPIVolumeSourceApplyConfiguration           `json:"downwardAPI,omitempty"`
	FC                    *FCVolumeSourceApplyConfiguration                    `json:"fc,omitempty"`
	AzureFile             *AzureFileVolumeSourceApplyConfiguration             `json:"azureFile,omitempty"`
	ConfigMap             *ConfigMapVolumeSourceApplyConfiguration             `json:"configMap,omitempty"`
	VsphereVolume         *VsphereVirtualDiskVolumeSourceApplyConfiguration    `json:"vsphereVolume,omitempty"`
	Quobyte               *QuobyteVolumeSourceApplyConfiguration               `json:"quobyte,omitempty"`
	AzureDisk             *AzureDiskVolumeSourceApplyConfiguration             `json:"azureDisk,omitempty"`
	PhotonPersistentDisk  *PhotonPersistentDiskVolumeSourceApplyConfiguration  `json:"photonPersistentDisk,omitempty"`
	Projected             *ProjectedVolumeSourceApplyConfiguration             `json:"projected,omitempty"`
	PortworxVolume        *PortworxVolumeSourceApplyConfiguration              `json:"portworxVolume,omitempty"`
	ScaleIO               *ScaleIOVolumeSourceApplyConfiguration               `json:"scaleIO,omitempty"`
	StorageOS             *StorageOSVolumeSourceApplyConfiguration             `json:"storageos,omitempty"`
	CSI                   *CSIVolumeSourceApplyConfiguration                   `json:"csi,omitempty"`
	Ephemeral             *EphemeralVolumeSourceApplyConfiguration             `json:"ephemeral,omitempty"`
}

// VolumeSourceApplyConfiguration represents a declarative configuration of the VolumeSource type for use
// with apply.
func VolumeSource() *VolumeSourceApplyConfiguration {
	return &VolumeSourceApplyConfiguration{}
}

// VsphereVirtualDiskVolumeSourceApplyConfiguration represents a declarative configuration of the VsphereVirtualDiskVolumeSource type for use
// with apply.
type VsphereVirtualDiskVolumeSourceApplyConfiguration struct {
	VolumePath        *string `json:"volumePath,omitempty"`
	FSType            *string `json:"fsType,omitempty"`
	StoragePolicyName *string `json:"storagePolicyName,omitempty"`
	StoragePolicyID   *string `json:"storagePolicyID,omitempty"`
}

// VsphereVirtualDiskVolumeSourceApplyConfiguration represents a declarative configuration of the VsphereVirtualDiskVolumeSource type for use
// with apply.
func VsphereVirtualDiskVolumeSource() *VsphereVirtualDiskVolumeSourceApplyConfiguration {
	return &VsphereVirtualDiskVolumeSourceApplyConfiguration{}
}

// WeightedPodAffinityTermApplyConfiguration represents a declarative configuration of the WeightedPodAffinityTerm type for use
// with apply.
type WeightedPodAffinityTermApplyConfiguration struct {
	Weight          *int32                             `json:"weight,omitempty"`
	PodAffinityTerm *PodAffinityTermApplyConfiguration `json:"podAffinityTerm,omitempty"`
}

// WeightedPodAffinityTermApplyConfiguration represents a declarative configuration of the WeightedPodAffinityTerm type for use
// with apply.
func WeightedPodAffinityTerm() *WeightedPodAffinityTermApplyConfiguration {
	return &WeightedPodAffinityTermApplyConfiguration{}
}

// WindowsSecurityContextOptionsApplyConfiguration represents a declarative configuration of the WindowsSecurityContextOptions type for use
// with apply.
type WindowsSecurityContextOptionsApplyConfiguration struct {
	GMSACredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`
	GMSACredentialSpec     *string `json:"gmsaCredentialSpec,omitempty"`
	RunAsUserName          *string `json:"runAsUserName,omitempty"`
}

// WindowsSecurityContextOptionsApplyConfiguration represents a declarative configuration of the WindowsSecurityContextOptions type for use
// with apply.
func WindowsSecurityContextOptions() *WindowsSecurityContextOptionsApplyConfiguration {
	return &WindowsSecurityContextOptionsApplyConfiguration{}
}
