// +build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/intstr"
	metav1 "sigs.k8s.io/controller-tools/pkg/applyconfigurations/testdata/meta/v1"
)

// AWSElasticBlockStoreVolumeSourceApplyConfiguration represents a declarative configuration of the AWSElasticBlockStoreVolumeSource type for use
// with apply.
type AWSElasticBlockStoreVolumeSourceApplyConfiguration struct {
	VolumeID  *string `json:"volumeID,omitempty"`
	FSType    *string `json:"fsType,omitempty"`
	Partition *int32  `json:"partition,omitempty"`
	ReadOnly  *bool   `json:"readOnly,omitempty"`
}

// AWSElasticBlockStoreVolumeSourceApplyConfiguration represents a declarative configuration of the AWSElasticBlockStoreVolumeSource type for use
// with apply.
func AWSElasticBlockStoreVolumeSource() *AWSElasticBlockStoreVolumeSourceApplyConfiguration {
	return &AWSElasticBlockStoreVolumeSourceApplyConfiguration{}
}

// AWSElasticBlockStoreVolumeSourceList represents a listAlias of AWSElasticBlockStoreVolumeSourceApplyConfiguration.
type AWSElasticBlockStoreVolumeSourceList []*AWSElasticBlockStoreVolumeSourceApplyConfiguration

// AWSElasticBlockStoreVolumeSourceMap represents a map of AWSElasticBlockStoreVolumeSourceApplyConfiguration.
type AWSElasticBlockStoreVolumeSourceMap map[string]AWSElasticBlockStoreVolumeSourceApplyConfiguration

// AffinityApplyConfiguration represents a declarative configuration of the Affinity type for use
// with apply.
type AffinityApplyConfiguration struct {
	NodeAffinity    *NodeAffinityApplyConfiguration    `json:"nodeAffinity,omitempty"`
	PodAffinity     *PodAffinityApplyConfiguration     `json:"podAffinity,omitempty"`
	PodAntiAffinity *PodAntiAffinityApplyConfiguration `json:"podAntiAffinity,omitempty"`
}

// AffinityApplyConfiguration represents a declarative configuration of the Affinity type for use
// with apply.
func Affinity() *AffinityApplyConfiguration {
	return &AffinityApplyConfiguration{}
}

// AffinityList represents a listAlias of AffinityApplyConfiguration.
type AffinityList []*AffinityApplyConfiguration

// AffinityMap represents a map of AffinityApplyConfiguration.
type AffinityMap map[string]AffinityApplyConfiguration

// AttachedVolumeApplyConfiguration represents a declarative configuration of the AttachedVolume type for use
// with apply.
type AttachedVolumeApplyConfiguration struct {
	Name       *corev1.UniqueVolumeName `json:"name,omitempty"`
	DevicePath *string                  `json:"devicePath,omitempty"`
}

// AttachedVolumeApplyConfiguration represents a declarative configuration of the AttachedVolume type for use
// with apply.
func AttachedVolume() *AttachedVolumeApplyConfiguration {
	return &AttachedVolumeApplyConfiguration{}
}

// AttachedVolumeList represents a listAlias of AttachedVolumeApplyConfiguration.
type AttachedVolumeList []*AttachedVolumeApplyConfiguration

// AttachedVolumeMap represents a map of AttachedVolumeApplyConfiguration.
type AttachedVolumeMap map[string]AttachedVolumeApplyConfiguration

// AvoidPodsApplyConfiguration represents a declarative configuration of the AvoidPods type for use
// with apply.
type AvoidPodsApplyConfiguration struct {
	PreferAvoidPods *[]PreferAvoidPodsEntryApplyConfiguration `json:"preferAvoidPods,omitempty"`
}

// AvoidPodsApplyConfiguration represents a declarative configuration of the AvoidPods type for use
// with apply.
func AvoidPods() *AvoidPodsApplyConfiguration {
	return &AvoidPodsApplyConfiguration{}
}

// AvoidPodsList represents a listAlias of AvoidPodsApplyConfiguration.
type AvoidPodsList []*AvoidPodsApplyConfiguration

// AvoidPodsMap represents a map of AvoidPodsApplyConfiguration.
type AvoidPodsMap map[string]AvoidPodsApplyConfiguration

// AzureDiskVolumeSourceApplyConfiguration represents a declarative configuration of the AzureDiskVolumeSource type for use
// with apply.
type AzureDiskVolumeSourceApplyConfiguration struct {
	DiskName    *string                          `json:"diskName,omitempty"`
	DataDiskURI *string                          `json:"diskURI,omitempty"`
	CachingMode *corev1.AzureDataDiskCachingMode `json:"cachingMode,omitempty"`
	FSType      *string                          `json:"fsType,omitempty"`
	ReadOnly    *bool                            `json:"readOnly,omitempty"`
	Kind        *corev1.AzureDataDiskKind        `json:"kind,omitempty"`
}

// AzureDiskVolumeSourceApplyConfiguration represents a declarative configuration of the AzureDiskVolumeSource type for use
// with apply.
func AzureDiskVolumeSource() *AzureDiskVolumeSourceApplyConfiguration {
	return &AzureDiskVolumeSourceApplyConfiguration{}
}

// AzureDiskVolumeSourceList represents a listAlias of AzureDiskVolumeSourceApplyConfiguration.
type AzureDiskVolumeSourceList []*AzureDiskVolumeSourceApplyConfiguration

// AzureDiskVolumeSourceMap represents a map of AzureDiskVolumeSourceApplyConfiguration.
type AzureDiskVolumeSourceMap map[string]AzureDiskVolumeSourceApplyConfiguration

// AzureFilePersistentVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFilePersistentVolumeSource type for use
// with apply.
type AzureFilePersistentVolumeSourceApplyConfiguration struct {
	SecretName      *string `json:"secretName,omitempty"`
	ShareName       *string `json:"shareName,omitempty"`
	ReadOnly        *bool   `json:"readOnly,omitempty"`
	SecretNamespace *string `json:"secretNamespace,omitempty"`
}

// AzureFilePersistentVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFilePersistentVolumeSource type for use
// with apply.
func AzureFilePersistentVolumeSource() *AzureFilePersistentVolumeSourceApplyConfiguration {
	return &AzureFilePersistentVolumeSourceApplyConfiguration{}
}

// AzureFilePersistentVolumeSourceList represents a listAlias of AzureFilePersistentVolumeSourceApplyConfiguration.
type AzureFilePersistentVolumeSourceList []*AzureFilePersistentVolumeSourceApplyConfiguration

// AzureFilePersistentVolumeSourceMap represents a map of AzureFilePersistentVolumeSourceApplyConfiguration.
type AzureFilePersistentVolumeSourceMap map[string]AzureFilePersistentVolumeSourceApplyConfiguration

// AzureFileVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFileVolumeSource type for use
// with apply.
type AzureFileVolumeSourceApplyConfiguration struct {
	SecretName *string `json:"secretName,omitempty"`
	ShareName  *string `json:"shareName,omitempty"`
	ReadOnly   *bool   `json:"readOnly,omitempty"`
}

// AzureFileVolumeSourceApplyConfiguration represents a declarative configuration of the AzureFileVolumeSource type for use
// with apply.
func AzureFileVolumeSource() *AzureFileVolumeSourceApplyConfiguration {
	return &AzureFileVolumeSourceApplyConfiguration{}
}

// AzureFileVolumeSourceList represents a listAlias of AzureFileVolumeSourceApplyConfiguration.
type AzureFileVolumeSourceList []*AzureFileVolumeSourceApplyConfiguration

// AzureFileVolumeSourceMap represents a map of AzureFileVolumeSourceApplyConfiguration.
type AzureFileVolumeSourceMap map[string]AzureFileVolumeSourceApplyConfiguration

// BindingApplyConfiguration represents a declarative configuration of the Binding type for use
// with apply.
type BindingApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Target                               *ObjectReferenceApplyConfiguration `json:"target,omitempty"`
}

// BindingApplyConfiguration represents a declarative configuration of the Binding type for use
// with apply.
func Binding() *BindingApplyConfiguration {
	return &BindingApplyConfiguration{}
}

// BindingList represents a listAlias of BindingApplyConfiguration.
type BindingList []*BindingApplyConfiguration

// BindingMap represents a map of BindingApplyConfiguration.
type BindingMap map[string]BindingApplyConfiguration

// CSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CSIPersistentVolumeSource type for use
// with apply.
type CSIPersistentVolumeSourceApplyConfiguration struct {
	Driver                     *string                            `json:"driver,omitempty"`
	VolumeHandle               *string                            `json:"volumeHandle,omitempty"`
	ReadOnly                   *bool                              `json:"readOnly,omitempty"`
	FSType                     *string                            `json:"fsType,omitempty"`
	VolumeAttributes           *map[string]string                 `json:"volumeAttributes,omitempty"`
	ControllerPublishSecretRef *SecretReferenceApplyConfiguration `json:"controllerPublishSecretRef,omitempty"`
	NodeStageSecretRef         *SecretReferenceApplyConfiguration `json:"nodeStageSecretRef,omitempty"`
	NodePublishSecretRef       *SecretReferenceApplyConfiguration `json:"nodePublishSecretRef,omitempty"`
	ControllerExpandSecretRef  *SecretReferenceApplyConfiguration `json:"controllerExpandSecretRef,omitempty"`
}

// CSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CSIPersistentVolumeSource type for use
// with apply.
func CSIPersistentVolumeSource() *CSIPersistentVolumeSourceApplyConfiguration {
	return &CSIPersistentVolumeSourceApplyConfiguration{}
}

// CSIPersistentVolumeSourceList represents a listAlias of CSIPersistentVolumeSourceApplyConfiguration.
type CSIPersistentVolumeSourceList []*CSIPersistentVolumeSourceApplyConfiguration

// CSIPersistentVolumeSourceMap represents a map of CSIPersistentVolumeSourceApplyConfiguration.
type CSIPersistentVolumeSourceMap map[string]CSIPersistentVolumeSourceApplyConfiguration

// CSIVolumeSourceApplyConfiguration represents a declarative configuration of the CSIVolumeSource type for use
// with apply.
type CSIVolumeSourceApplyConfiguration struct {
	Driver               *string                                 `json:"driver,omitempty"`
	ReadOnly             *bool                                   `json:"readOnly,omitempty"`
	FSType               *string                                 `json:"fsType,omitempty"`
	VolumeAttributes     *map[string]string                      `json:"volumeAttributes,omitempty"`
	NodePublishSecretRef *LocalObjectReferenceApplyConfiguration `json:"nodePublishSecretRef,omitempty"`
}

// CSIVolumeSourceApplyConfiguration represents a declarative configuration of the CSIVolumeSource type for use
// with apply.
func CSIVolumeSource() *CSIVolumeSourceApplyConfiguration {
	return &CSIVolumeSourceApplyConfiguration{}
}

// CSIVolumeSourceList represents a listAlias of CSIVolumeSourceApplyConfiguration.
type CSIVolumeSourceList []*CSIVolumeSourceApplyConfiguration

// CSIVolumeSourceMap represents a map of CSIVolumeSourceApplyConfiguration.
type CSIVolumeSourceMap map[string]CSIVolumeSourceApplyConfiguration

// CapabilitiesApplyConfiguration represents a declarative configuration of the Capabilities type for use
// with apply.
type CapabilitiesApplyConfiguration struct {
	Add  *[]corev1.Capability `json:"add,omitempty"`
	Drop *[]corev1.Capability `json:"drop,omitempty"`
}

// CapabilitiesApplyConfiguration represents a declarative configuration of the Capabilities type for use
// with apply.
func Capabilities() *CapabilitiesApplyConfiguration {
	return &CapabilitiesApplyConfiguration{}
}

// CapabilitiesList represents a listAlias of CapabilitiesApplyConfiguration.
type CapabilitiesList []*CapabilitiesApplyConfiguration

// CapabilitiesMap represents a map of CapabilitiesApplyConfiguration.
type CapabilitiesMap map[string]CapabilitiesApplyConfiguration

// CephFSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSPersistentVolumeSource type for use
// with apply.
type CephFSPersistentVolumeSourceApplyConfiguration struct {
	Monitors   *[]string                          `json:"monitors,omitempty"`
	Path       *string                            `json:"path,omitempty"`
	User       *string                            `json:"user,omitempty"`
	SecretFile *string                            `json:"secretFile,omitempty"`
	SecretRef  *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly   *bool                              `json:"readOnly,omitempty"`
}

// CephFSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSPersistentVolumeSource type for use
// with apply.
func CephFSPersistentVolumeSource() *CephFSPersistentVolumeSourceApplyConfiguration {
	return &CephFSPersistentVolumeSourceApplyConfiguration{}
}

// CephFSPersistentVolumeSourceList represents a listAlias of CephFSPersistentVolumeSourceApplyConfiguration.
type CephFSPersistentVolumeSourceList []*CephFSPersistentVolumeSourceApplyConfiguration

// CephFSPersistentVolumeSourceMap represents a map of CephFSPersistentVolumeSourceApplyConfiguration.
type CephFSPersistentVolumeSourceMap map[string]CephFSPersistentVolumeSourceApplyConfiguration

// CephFSVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSVolumeSource type for use
// with apply.
type CephFSVolumeSourceApplyConfiguration struct {
	Monitors   *[]string                               `json:"monitors,omitempty"`
	Path       *string                                 `json:"path,omitempty"`
	User       *string                                 `json:"user,omitempty"`
	SecretFile *string                                 `json:"secretFile,omitempty"`
	SecretRef  *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly   *bool                                   `json:"readOnly,omitempty"`
}

// CephFSVolumeSourceApplyConfiguration represents a declarative configuration of the CephFSVolumeSource type for use
// with apply.
func CephFSVolumeSource() *CephFSVolumeSourceApplyConfiguration {
	return &CephFSVolumeSourceApplyConfiguration{}
}

// CephFSVolumeSourceList represents a listAlias of CephFSVolumeSourceApplyConfiguration.
type CephFSVolumeSourceList []*CephFSVolumeSourceApplyConfiguration

// CephFSVolumeSourceMap represents a map of CephFSVolumeSourceApplyConfiguration.
type CephFSVolumeSourceMap map[string]CephFSVolumeSourceApplyConfiguration

// CinderPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CinderPersistentVolumeSource type for use
// with apply.
type CinderPersistentVolumeSourceApplyConfiguration struct {
	VolumeID  *string                            `json:"volumeID,omitempty"`
	FSType    *string                            `json:"fsType,omitempty"`
	ReadOnly  *bool                              `json:"readOnly,omitempty"`
	SecretRef *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// CinderPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the CinderPersistentVolumeSource type for use
// with apply.
func CinderPersistentVolumeSource() *CinderPersistentVolumeSourceApplyConfiguration {
	return &CinderPersistentVolumeSourceApplyConfiguration{}
}

// CinderPersistentVolumeSourceList represents a listAlias of CinderPersistentVolumeSourceApplyConfiguration.
type CinderPersistentVolumeSourceList []*CinderPersistentVolumeSourceApplyConfiguration

// CinderPersistentVolumeSourceMap represents a map of CinderPersistentVolumeSourceApplyConfiguration.
type CinderPersistentVolumeSourceMap map[string]CinderPersistentVolumeSourceApplyConfiguration

// CinderVolumeSourceApplyConfiguration represents a declarative configuration of the CinderVolumeSource type for use
// with apply.
type CinderVolumeSourceApplyConfiguration struct {
	VolumeID  *string                                 `json:"volumeID,omitempty"`
	FSType    *string                                 `json:"fsType,omitempty"`
	ReadOnly  *bool                                   `json:"readOnly,omitempty"`
	SecretRef *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// CinderVolumeSourceApplyConfiguration represents a declarative configuration of the CinderVolumeSource type for use
// with apply.
func CinderVolumeSource() *CinderVolumeSourceApplyConfiguration {
	return &CinderVolumeSourceApplyConfiguration{}
}

// CinderVolumeSourceList represents a listAlias of CinderVolumeSourceApplyConfiguration.
type CinderVolumeSourceList []*CinderVolumeSourceApplyConfiguration

// CinderVolumeSourceMap represents a map of CinderVolumeSourceApplyConfiguration.
type CinderVolumeSourceMap map[string]CinderVolumeSourceApplyConfiguration

// ClientIPConfigApplyConfiguration represents a declarative configuration of the ClientIPConfig type for use
// with apply.
type ClientIPConfigApplyConfiguration struct {
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// ClientIPConfigApplyConfiguration represents a declarative configuration of the ClientIPConfig type for use
// with apply.
func ClientIPConfig() *ClientIPConfigApplyConfiguration {
	return &ClientIPConfigApplyConfiguration{}
}

// ClientIPConfigList represents a listAlias of ClientIPConfigApplyConfiguration.
type ClientIPConfigList []*ClientIPConfigApplyConfiguration

// ClientIPConfigMap represents a map of ClientIPConfigApplyConfiguration.
type ClientIPConfigMap map[string]ClientIPConfigApplyConfiguration

// ComponentConditionApplyConfiguration represents a declarative configuration of the ComponentCondition type for use
// with apply.
type ComponentConditionApplyConfiguration struct {
	Type    *corev1.ComponentConditionType `json:"type,omitempty"`
	Status  *corev1.ConditionStatus        `json:"status,omitempty"`
	Message *string                        `json:"message,omitempty"`
	Error   *string                        `json:"error,omitempty"`
}

// ComponentConditionApplyConfiguration represents a declarative configuration of the ComponentCondition type for use
// with apply.
func ComponentCondition() *ComponentConditionApplyConfiguration {
	return &ComponentConditionApplyConfiguration{}
}

// ComponentConditionList represents a listAlias of ComponentConditionApplyConfiguration.
type ComponentConditionList []*ComponentConditionApplyConfiguration

// ComponentConditionMap represents a map of ComponentConditionApplyConfiguration.
type ComponentConditionMap map[string]ComponentConditionApplyConfiguration

// ComponentStatusApplyConfiguration represents a declarative configuration of the ComponentStatus type for use
// with apply.
type ComponentStatusApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Conditions                           *[]ComponentConditionApplyConfiguration `json:"conditions,omitempty"`
}

// ComponentStatusApplyConfiguration represents a declarative configuration of the ComponentStatus type for use
// with apply.
func ComponentStatus() *ComponentStatusApplyConfiguration {
	return &ComponentStatusApplyConfiguration{}
}

// ComponentStatusList represents a listAlias of ComponentStatusApplyConfiguration.
type ComponentStatusList []*ComponentStatusApplyConfiguration

// ComponentStatusMap represents a map of ComponentStatusApplyConfiguration.
type ComponentStatusMap map[string]ComponentStatusApplyConfiguration

// ComponentStatusListApplyConfiguration represents a declarative configuration of the ComponentStatusList type for use
// with apply.
type ComponentStatusListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ComponentStatusApplyConfiguration `json:"items,omitempty"`
}

// ComponentStatusListApplyConfiguration represents a declarative configuration of the ComponentStatusList type for use
// with apply.
func ComponentStatusList() *ComponentStatusListApplyConfiguration {
	return &ComponentStatusListApplyConfiguration{}
}

// ComponentStatusListList represents a listAlias of ComponentStatusListApplyConfiguration.
type ComponentStatusListList []*ComponentStatusListApplyConfiguration

// ComponentStatusListMap represents a map of ComponentStatusListApplyConfiguration.
type ComponentStatusListMap map[string]ComponentStatusListApplyConfiguration

// ConfigMapApplyConfiguration represents a declarative configuration of the ConfigMap type for use
// with apply.
type ConfigMapApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Immutable                            *bool              `json:"immutable,omitempty"`
	Data                                 *map[string]string `json:"data,omitempty"`
	BinaryData                           *map[string][]byte `json:"binaryData,omitempty"`
}

// ConfigMapApplyConfiguration represents a declarative configuration of the ConfigMap type for use
// with apply.
func ConfigMap() *ConfigMapApplyConfiguration {
	return &ConfigMapApplyConfiguration{}
}

// ConfigMapList represents a listAlias of ConfigMapApplyConfiguration.
type ConfigMapList []*ConfigMapApplyConfiguration

// ConfigMapMap represents a map of ConfigMapApplyConfiguration.
type ConfigMapMap map[string]ConfigMapApplyConfiguration

// ConfigMapEnvSourceApplyConfiguration represents a declarative configuration of the ConfigMapEnvSource type for use
// with apply.
type ConfigMapEnvSourceApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Optional                               *bool `json:"optional,omitempty"`
}

// ConfigMapEnvSourceApplyConfiguration represents a declarative configuration of the ConfigMapEnvSource type for use
// with apply.
func ConfigMapEnvSource() *ConfigMapEnvSourceApplyConfiguration {
	return &ConfigMapEnvSourceApplyConfiguration{}
}

// ConfigMapEnvSourceList represents a listAlias of ConfigMapEnvSourceApplyConfiguration.
type ConfigMapEnvSourceList []*ConfigMapEnvSourceApplyConfiguration

// ConfigMapEnvSourceMap represents a map of ConfigMapEnvSourceApplyConfiguration.
type ConfigMapEnvSourceMap map[string]ConfigMapEnvSourceApplyConfiguration

// ConfigMapKeySelectorApplyConfiguration represents a declarative configuration of the ConfigMapKeySelector type for use
// with apply.
type ConfigMapKeySelectorApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Key                                    *string `json:"key,omitempty"`
	Optional                               *bool   `json:"optional,omitempty"`
}

// ConfigMapKeySelectorApplyConfiguration represents a declarative configuration of the ConfigMapKeySelector type for use
// with apply.
func ConfigMapKeySelector() *ConfigMapKeySelectorApplyConfiguration {
	return &ConfigMapKeySelectorApplyConfiguration{}
}

// ConfigMapKeySelectorList represents a listAlias of ConfigMapKeySelectorApplyConfiguration.
type ConfigMapKeySelectorList []*ConfigMapKeySelectorApplyConfiguration

// ConfigMapKeySelectorMap represents a map of ConfigMapKeySelectorApplyConfiguration.
type ConfigMapKeySelectorMap map[string]ConfigMapKeySelectorApplyConfiguration

// ConfigMapListApplyConfiguration represents a declarative configuration of the ConfigMapList type for use
// with apply.
type ConfigMapListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ConfigMapApplyConfiguration `json:"items,omitempty"`
}

// ConfigMapListApplyConfiguration represents a declarative configuration of the ConfigMapList type for use
// with apply.
func ConfigMapList() *ConfigMapListApplyConfiguration {
	return &ConfigMapListApplyConfiguration{}
}

// ConfigMapListList represents a listAlias of ConfigMapListApplyConfiguration.
type ConfigMapListList []*ConfigMapListApplyConfiguration

// ConfigMapListMap represents a map of ConfigMapListApplyConfiguration.
type ConfigMapListMap map[string]ConfigMapListApplyConfiguration

// ConfigMapNodeConfigSourceApplyConfiguration represents a declarative configuration of the ConfigMapNodeConfigSource type for use
// with apply.
type ConfigMapNodeConfigSourceApplyConfiguration struct {
	Namespace        *string    `json:"namespace,omitempty"`
	Name             *string    `json:"name,omitempty"`
	UID              *types.UID `json:"uid,omitempty"`
	ResourceVersion  *string    `json:"resourceVersion,omitempty"`
	KubeletConfigKey *string    `json:"kubeletConfigKey,omitempty"`
}

// ConfigMapNodeConfigSourceApplyConfiguration represents a declarative configuration of the ConfigMapNodeConfigSource type for use
// with apply.
func ConfigMapNodeConfigSource() *ConfigMapNodeConfigSourceApplyConfiguration {
	return &ConfigMapNodeConfigSourceApplyConfiguration{}
}

// ConfigMapNodeConfigSourceList represents a listAlias of ConfigMapNodeConfigSourceApplyConfiguration.
type ConfigMapNodeConfigSourceList []*ConfigMapNodeConfigSourceApplyConfiguration

// ConfigMapNodeConfigSourceMap represents a map of ConfigMapNodeConfigSourceApplyConfiguration.
type ConfigMapNodeConfigSourceMap map[string]ConfigMapNodeConfigSourceApplyConfiguration

// ConfigMapProjectionApplyConfiguration represents a declarative configuration of the ConfigMapProjection type for use
// with apply.
type ConfigMapProjectionApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Items                                  *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	Optional                               *bool                          `json:"optional,omitempty"`
}

// ConfigMapProjectionApplyConfiguration represents a declarative configuration of the ConfigMapProjection type for use
// with apply.
func ConfigMapProjection() *ConfigMapProjectionApplyConfiguration {
	return &ConfigMapProjectionApplyConfiguration{}
}

// ConfigMapProjectionList represents a listAlias of ConfigMapProjectionApplyConfiguration.
type ConfigMapProjectionList []*ConfigMapProjectionApplyConfiguration

// ConfigMapProjectionMap represents a map of ConfigMapProjectionApplyConfiguration.
type ConfigMapProjectionMap map[string]ConfigMapProjectionApplyConfiguration

// ConfigMapVolumeSourceApplyConfiguration represents a declarative configuration of the ConfigMapVolumeSource type for use
// with apply.
type ConfigMapVolumeSourceApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Items                                  *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	DefaultMode                            *int32                         `json:"defaultMode,omitempty"`
	Optional                               *bool                          `json:"optional,omitempty"`
}

// ConfigMapVolumeSourceApplyConfiguration represents a declarative configuration of the ConfigMapVolumeSource type for use
// with apply.
func ConfigMapVolumeSource() *ConfigMapVolumeSourceApplyConfiguration {
	return &ConfigMapVolumeSourceApplyConfiguration{}
}

// ConfigMapVolumeSourceList represents a listAlias of ConfigMapVolumeSourceApplyConfiguration.
type ConfigMapVolumeSourceList []*ConfigMapVolumeSourceApplyConfiguration

// ConfigMapVolumeSourceMap represents a map of ConfigMapVolumeSourceApplyConfiguration.
type ConfigMapVolumeSourceMap map[string]ConfigMapVolumeSourceApplyConfiguration

// ContainerApplyConfiguration represents a declarative configuration of the Container type for use
// with apply.
type ContainerApplyConfiguration struct {
	Name                     *string                                 `json:"name,omitempty"`
	Image                    *string                                 `json:"image,omitempty"`
	Command                  *[]string                               `json:"command,omitempty"`
	Args                     *[]string                               `json:"args,omitempty"`
	WorkingDir               *string                                 `json:"workingDir,omitempty"`
	Ports                    *[]ContainerPortApplyConfiguration      `json:"ports,omitempty"`
	EnvFrom                  *[]EnvFromSourceApplyConfiguration      `json:"envFrom,omitempty"`
	Env                      *[]EnvVarApplyConfiguration             `json:"env,omitempty"`
	Resources                *ResourceRequirementsApplyConfiguration `json:"resources,omitempty"`
	VolumeMounts             *[]VolumeMountApplyConfiguration        `json:"volumeMounts,omitempty"`
	VolumeDevices            *[]VolumeDeviceApplyConfiguration       `json:"volumeDevices,omitempty"`
	LivenessProbe            *ProbeApplyConfiguration                `json:"livenessProbe,omitempty"`
	ReadinessProbe           *ProbeApplyConfiguration                `json:"readinessProbe,omitempty"`
	StartupProbe             *ProbeApplyConfiguration                `json:"startupProbe,omitempty"`
	Lifecycle                *LifecycleApplyConfiguration            `json:"lifecycle,omitempty"`
	TerminationMessagePath   *string                                 `json:"terminationMessagePath,omitempty"`
	TerminationMessagePolicy *corev1.TerminationMessagePolicy        `json:"terminationMessagePolicy,omitempty"`
	ImagePullPolicy          *corev1.PullPolicy                      `json:"imagePullPolicy,omitempty"`
	SecurityContext          *SecurityContextApplyConfiguration      `json:"securityContext,omitempty"`
	Stdin                    *bool                                   `json:"stdin,omitempty"`
	StdinOnce                *bool                                   `json:"stdinOnce,omitempty"`
	TTY                      *bool                                   `json:"tty,omitempty"`
}

// ContainerApplyConfiguration represents a declarative configuration of the Container type for use
// with apply.
func Container() *ContainerApplyConfiguration {
	return &ContainerApplyConfiguration{}
}

// ContainerList represents a listAlias of ContainerApplyConfiguration.
type ContainerList []*ContainerApplyConfiguration

// ContainerMap represents a map of ContainerApplyConfiguration.
type ContainerMap map[string]ContainerApplyConfiguration

// ContainerImageApplyConfiguration represents a declarative configuration of the ContainerImage type for use
// with apply.
type ContainerImageApplyConfiguration struct {
	Names     *[]string `json:"names,omitempty"`
	SizeBytes *int64    `json:"sizeBytes,omitempty"`
}

// ContainerImageApplyConfiguration represents a declarative configuration of the ContainerImage type for use
// with apply.
func ContainerImage() *ContainerImageApplyConfiguration {
	return &ContainerImageApplyConfiguration{}
}

// ContainerImageList represents a listAlias of ContainerImageApplyConfiguration.
type ContainerImageList []*ContainerImageApplyConfiguration

// ContainerImageMap represents a map of ContainerImageApplyConfiguration.
type ContainerImageMap map[string]ContainerImageApplyConfiguration

// ContainerPortApplyConfiguration represents a declarative configuration of the ContainerPort type for use
// with apply.
type ContainerPortApplyConfiguration struct {
	Name          *string          `json:"name,omitempty"`
	HostPort      *int32           `json:"hostPort,omitempty"`
	ContainerPort *int32           `json:"containerPort,omitempty"`
	Protocol      *corev1.Protocol `json:"protocol,omitempty"`
	HostIP        *string          `json:"hostIP,omitempty"`
}

// ContainerPortApplyConfiguration represents a declarative configuration of the ContainerPort type for use
// with apply.
func ContainerPort() *ContainerPortApplyConfiguration {
	return &ContainerPortApplyConfiguration{}
}

// ContainerPortList represents a listAlias of ContainerPortApplyConfiguration.
type ContainerPortList []*ContainerPortApplyConfiguration

// ContainerPortMap represents a map of ContainerPortApplyConfiguration.
type ContainerPortMap map[string]ContainerPortApplyConfiguration

// ContainerStateApplyConfiguration represents a declarative configuration of the ContainerState type for use
// with apply.
type ContainerStateApplyConfiguration struct {
	Waiting    *ContainerStateWaitingApplyConfiguration    `json:"waiting,omitempty"`
	Running    *ContainerStateRunningApplyConfiguration    `json:"running,omitempty"`
	Terminated *ContainerStateTerminatedApplyConfiguration `json:"terminated,omitempty"`
}

// ContainerStateApplyConfiguration represents a declarative configuration of the ContainerState type for use
// with apply.
func ContainerState() *ContainerStateApplyConfiguration {
	return &ContainerStateApplyConfiguration{}
}

// ContainerStateList represents a listAlias of ContainerStateApplyConfiguration.
type ContainerStateList []*ContainerStateApplyConfiguration

// ContainerStateMap represents a map of ContainerStateApplyConfiguration.
type ContainerStateMap map[string]ContainerStateApplyConfiguration

// ContainerStateRunningApplyConfiguration represents a declarative configuration of the ContainerStateRunning type for use
// with apply.
type ContainerStateRunningApplyConfiguration struct {
	StartedAt *apismetav1.Time `json:"startedAt,omitempty"`
}

// ContainerStateRunningApplyConfiguration represents a declarative configuration of the ContainerStateRunning type for use
// with apply.
func ContainerStateRunning() *ContainerStateRunningApplyConfiguration {
	return &ContainerStateRunningApplyConfiguration{}
}

// ContainerStateRunningList represents a listAlias of ContainerStateRunningApplyConfiguration.
type ContainerStateRunningList []*ContainerStateRunningApplyConfiguration

// ContainerStateRunningMap represents a map of ContainerStateRunningApplyConfiguration.
type ContainerStateRunningMap map[string]ContainerStateRunningApplyConfiguration

// ContainerStateTerminatedApplyConfiguration represents a declarative configuration of the ContainerStateTerminated type for use
// with apply.
type ContainerStateTerminatedApplyConfiguration struct {
	ExitCode    *int32           `json:"exitCode,omitempty"`
	Signal      *int32           `json:"signal,omitempty"`
	Reason      *string          `json:"reason,omitempty"`
	Message     *string          `json:"message,omitempty"`
	StartedAt   *apismetav1.Time `json:"startedAt,omitempty"`
	FinishedAt  *apismetav1.Time `json:"finishedAt,omitempty"`
	ContainerID *string          `json:"containerID,omitempty"`
}

// ContainerStateTerminatedApplyConfiguration represents a declarative configuration of the ContainerStateTerminated type for use
// with apply.
func ContainerStateTerminated() *ContainerStateTerminatedApplyConfiguration {
	return &ContainerStateTerminatedApplyConfiguration{}
}

// ContainerStateTerminatedList represents a listAlias of ContainerStateTerminatedApplyConfiguration.
type ContainerStateTerminatedList []*ContainerStateTerminatedApplyConfiguration

// ContainerStateTerminatedMap represents a map of ContainerStateTerminatedApplyConfiguration.
type ContainerStateTerminatedMap map[string]ContainerStateTerminatedApplyConfiguration

// ContainerStateWaitingApplyConfiguration represents a declarative configuration of the ContainerStateWaiting type for use
// with apply.
type ContainerStateWaitingApplyConfiguration struct {
	Reason  *string `json:"reason,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ContainerStateWaitingApplyConfiguration represents a declarative configuration of the ContainerStateWaiting type for use
// with apply.
func ContainerStateWaiting() *ContainerStateWaitingApplyConfiguration {
	return &ContainerStateWaitingApplyConfiguration{}
}

// ContainerStateWaitingList represents a listAlias of ContainerStateWaitingApplyConfiguration.
type ContainerStateWaitingList []*ContainerStateWaitingApplyConfiguration

// ContainerStateWaitingMap represents a map of ContainerStateWaitingApplyConfiguration.
type ContainerStateWaitingMap map[string]ContainerStateWaitingApplyConfiguration

// ContainerStatusApplyConfiguration represents a declarative configuration of the ContainerStatus type for use
// with apply.
type ContainerStatusApplyConfiguration struct {
	Name                 *string                           `json:"name,omitempty"`
	State                *ContainerStateApplyConfiguration `json:"state,omitempty"`
	LastTerminationState *ContainerStateApplyConfiguration `json:"lastState,omitempty"`
	Ready                *bool                             `json:"ready,omitempty"`
	RestartCount         *int32                            `json:"restartCount,omitempty"`
	Image                *string                           `json:"image,omitempty"`
	ImageID              *string                           `json:"imageID,omitempty"`
	ContainerID          *string                           `json:"containerID,omitempty"`
	Started              *bool                             `json:"started,omitempty"`
}

// ContainerStatusApplyConfiguration represents a declarative configuration of the ContainerStatus type for use
// with apply.
func ContainerStatus() *ContainerStatusApplyConfiguration {
	return &ContainerStatusApplyConfiguration{}
}

// ContainerStatusList represents a listAlias of ContainerStatusApplyConfiguration.
type ContainerStatusList []*ContainerStatusApplyConfiguration

// ContainerStatusMap represents a map of ContainerStatusApplyConfiguration.
type ContainerStatusMap map[string]ContainerStatusApplyConfiguration

// DaemonEndpointApplyConfiguration represents a declarative configuration of the DaemonEndpoint type for use
// with apply.
type DaemonEndpointApplyConfiguration struct {
	Port *int32 `json:"Port,omitempty"`
}

// DaemonEndpointApplyConfiguration represents a declarative configuration of the DaemonEndpoint type for use
// with apply.
func DaemonEndpoint() *DaemonEndpointApplyConfiguration {
	return &DaemonEndpointApplyConfiguration{}
}

// DaemonEndpointList represents a listAlias of DaemonEndpointApplyConfiguration.
type DaemonEndpointList []*DaemonEndpointApplyConfiguration

// DaemonEndpointMap represents a map of DaemonEndpointApplyConfiguration.
type DaemonEndpointMap map[string]DaemonEndpointApplyConfiguration

// DownwardAPIProjectionApplyConfiguration represents a declarative configuration of the DownwardAPIProjection type for use
// with apply.
type DownwardAPIProjectionApplyConfiguration struct {
	Items *[]DownwardAPIVolumeFileApplyConfiguration `json:"items,omitempty"`
}

// DownwardAPIProjectionApplyConfiguration represents a declarative configuration of the DownwardAPIProjection type for use
// with apply.
func DownwardAPIProjection() *DownwardAPIProjectionApplyConfiguration {
	return &DownwardAPIProjectionApplyConfiguration{}
}

// DownwardAPIProjectionList represents a listAlias of DownwardAPIProjectionApplyConfiguration.
type DownwardAPIProjectionList []*DownwardAPIProjectionApplyConfiguration

// DownwardAPIProjectionMap represents a map of DownwardAPIProjectionApplyConfiguration.
type DownwardAPIProjectionMap map[string]DownwardAPIProjectionApplyConfiguration

// DownwardAPIVolumeFileApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeFile type for use
// with apply.
type DownwardAPIVolumeFileApplyConfiguration struct {
	Path             *string                                  `json:"path,omitempty"`
	FieldRef         *ObjectFieldSelectorApplyConfiguration   `json:"fieldRef,omitempty"`
	ResourceFieldRef *ResourceFieldSelectorApplyConfiguration `json:"resourceFieldRef,omitempty"`
	Mode             *int32                                   `json:"mode,omitempty"`
}

// DownwardAPIVolumeFileApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeFile type for use
// with apply.
func DownwardAPIVolumeFile() *DownwardAPIVolumeFileApplyConfiguration {
	return &DownwardAPIVolumeFileApplyConfiguration{}
}

// DownwardAPIVolumeFileList represents a listAlias of DownwardAPIVolumeFileApplyConfiguration.
type DownwardAPIVolumeFileList []*DownwardAPIVolumeFileApplyConfiguration

// DownwardAPIVolumeFileMap represents a map of DownwardAPIVolumeFileApplyConfiguration.
type DownwardAPIVolumeFileMap map[string]DownwardAPIVolumeFileApplyConfiguration

// DownwardAPIVolumeSourceApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeSource type for use
// with apply.
type DownwardAPIVolumeSourceApplyConfiguration struct {
	Items       *[]DownwardAPIVolumeFileApplyConfiguration `json:"items,omitempty"`
	DefaultMode *int32                                     `json:"defaultMode,omitempty"`
}

// DownwardAPIVolumeSourceApplyConfiguration represents a declarative configuration of the DownwardAPIVolumeSource type for use
// with apply.
func DownwardAPIVolumeSource() *DownwardAPIVolumeSourceApplyConfiguration {
	return &DownwardAPIVolumeSourceApplyConfiguration{}
}

// DownwardAPIVolumeSourceList represents a listAlias of DownwardAPIVolumeSourceApplyConfiguration.
type DownwardAPIVolumeSourceList []*DownwardAPIVolumeSourceApplyConfiguration

// DownwardAPIVolumeSourceMap represents a map of DownwardAPIVolumeSourceApplyConfiguration.
type DownwardAPIVolumeSourceMap map[string]DownwardAPIVolumeSourceApplyConfiguration

// EmptyDirVolumeSourceApplyConfiguration represents a declarative configuration of the EmptyDirVolumeSource type for use
// with apply.
type EmptyDirVolumeSourceApplyConfiguration struct {
	Medium    *corev1.StorageMedium `json:"medium,omitempty"`
	SizeLimit *resource.Quantity    `json:"sizeLimit,omitempty"`
}

// EmptyDirVolumeSourceApplyConfiguration represents a declarative configuration of the EmptyDirVolumeSource type for use
// with apply.
func EmptyDirVolumeSource() *EmptyDirVolumeSourceApplyConfiguration {
	return &EmptyDirVolumeSourceApplyConfiguration{}
}

// EmptyDirVolumeSourceList represents a listAlias of EmptyDirVolumeSourceApplyConfiguration.
type EmptyDirVolumeSourceList []*EmptyDirVolumeSourceApplyConfiguration

// EmptyDirVolumeSourceMap represents a map of EmptyDirVolumeSourceApplyConfiguration.
type EmptyDirVolumeSourceMap map[string]EmptyDirVolumeSourceApplyConfiguration

// EndpointAddressApplyConfiguration represents a declarative configuration of the EndpointAddress type for use
// with apply.
type EndpointAddressApplyConfiguration struct {
	IP        *string                            `json:"ip,omitempty"`
	Hostname  *string                            `json:"hostname,omitempty"`
	NodeName  *string                            `json:"nodeName,omitempty"`
	TargetRef *ObjectReferenceApplyConfiguration `json:"targetRef,omitempty"`
}

// EndpointAddressApplyConfiguration represents a declarative configuration of the EndpointAddress type for use
// with apply.
func EndpointAddress() *EndpointAddressApplyConfiguration {
	return &EndpointAddressApplyConfiguration{}
}

// EndpointAddressList represents a listAlias of EndpointAddressApplyConfiguration.
type EndpointAddressList []*EndpointAddressApplyConfiguration

// EndpointAddressMap represents a map of EndpointAddressApplyConfiguration.
type EndpointAddressMap map[string]EndpointAddressApplyConfiguration

// EndpointPortApplyConfiguration represents a declarative configuration of the EndpointPort type for use
// with apply.
type EndpointPortApplyConfiguration struct {
	Name        *string          `json:"name,omitempty"`
	Port        *int32           `json:"port,omitempty"`
	Protocol    *corev1.Protocol `json:"protocol,omitempty"`
	AppProtocol *string          `json:"appProtocol,omitempty"`
}

// EndpointPortApplyConfiguration represents a declarative configuration of the EndpointPort type for use
// with apply.
func EndpointPort() *EndpointPortApplyConfiguration {
	return &EndpointPortApplyConfiguration{}
}

// EndpointPortList represents a listAlias of EndpointPortApplyConfiguration.
type EndpointPortList []*EndpointPortApplyConfiguration

// EndpointPortMap represents a map of EndpointPortApplyConfiguration.
type EndpointPortMap map[string]EndpointPortApplyConfiguration

// EndpointSubsetApplyConfiguration represents a declarative configuration of the EndpointSubset type for use
// with apply.
type EndpointSubsetApplyConfiguration struct {
	Addresses         *[]EndpointAddressApplyConfiguration `json:"addresses,omitempty"`
	NotReadyAddresses *[]EndpointAddressApplyConfiguration `json:"notReadyAddresses,omitempty"`
	Ports             *[]EndpointPortApplyConfiguration    `json:"ports,omitempty"`
}

// EndpointSubsetApplyConfiguration represents a declarative configuration of the EndpointSubset type for use
// with apply.
func EndpointSubset() *EndpointSubsetApplyConfiguration {
	return &EndpointSubsetApplyConfiguration{}
}

// EndpointSubsetList represents a listAlias of EndpointSubsetApplyConfiguration.
type EndpointSubsetList []*EndpointSubsetApplyConfiguration

// EndpointSubsetMap represents a map of EndpointSubsetApplyConfiguration.
type EndpointSubsetMap map[string]EndpointSubsetApplyConfiguration

// EndpointsApplyConfiguration represents a declarative configuration of the Endpoints type for use
// with apply.
type EndpointsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Subsets                              *[]EndpointSubsetApplyConfiguration `json:"subsets,omitempty"`
}

// EndpointsApplyConfiguration represents a declarative configuration of the Endpoints type for use
// with apply.
func Endpoints() *EndpointsApplyConfiguration {
	return &EndpointsApplyConfiguration{}
}

// EndpointsList represents a listAlias of EndpointsApplyConfiguration.
type EndpointsList []*EndpointsApplyConfiguration

// EndpointsMap represents a map of EndpointsApplyConfiguration.
type EndpointsMap map[string]EndpointsApplyConfiguration

// EndpointsListApplyConfiguration represents a declarative configuration of the EndpointsList type for use
// with apply.
type EndpointsListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]EndpointsApplyConfiguration `json:"items,omitempty"`
}

// EndpointsListApplyConfiguration represents a declarative configuration of the EndpointsList type for use
// with apply.
func EndpointsList() *EndpointsListApplyConfiguration {
	return &EndpointsListApplyConfiguration{}
}

// EndpointsListList represents a listAlias of EndpointsListApplyConfiguration.
type EndpointsListList []*EndpointsListApplyConfiguration

// EndpointsListMap represents a map of EndpointsListApplyConfiguration.
type EndpointsListMap map[string]EndpointsListApplyConfiguration

// EnvFromSourceApplyConfiguration represents a declarative configuration of the EnvFromSource type for use
// with apply.
type EnvFromSourceApplyConfiguration struct {
	Prefix       *string                               `json:"prefix,omitempty"`
	ConfigMapRef *ConfigMapEnvSourceApplyConfiguration `json:"configMapRef,omitempty"`
	SecretRef    *SecretEnvSourceApplyConfiguration    `json:"secretRef,omitempty"`
}

// EnvFromSourceApplyConfiguration represents a declarative configuration of the EnvFromSource type for use
// with apply.
func EnvFromSource() *EnvFromSourceApplyConfiguration {
	return &EnvFromSourceApplyConfiguration{}
}

// EnvFromSourceList represents a listAlias of EnvFromSourceApplyConfiguration.
type EnvFromSourceList []*EnvFromSourceApplyConfiguration

// EnvFromSourceMap represents a map of EnvFromSourceApplyConfiguration.
type EnvFromSourceMap map[string]EnvFromSourceApplyConfiguration

// EnvVarApplyConfiguration represents a declarative configuration of the EnvVar type for use
// with apply.
type EnvVarApplyConfiguration struct {
	Name      *string                         `json:"name,omitempty"`
	Value     *string                         `json:"value,omitempty"`
	ValueFrom *EnvVarSourceApplyConfiguration `json:"valueFrom,omitempty"`
}

// EnvVarApplyConfiguration represents a declarative configuration of the EnvVar type for use
// with apply.
func EnvVar() *EnvVarApplyConfiguration {
	return &EnvVarApplyConfiguration{}
}

// EnvVarList represents a listAlias of EnvVarApplyConfiguration.
type EnvVarList []*EnvVarApplyConfiguration

// EnvVarMap represents a map of EnvVarApplyConfiguration.
type EnvVarMap map[string]EnvVarApplyConfiguration

// EnvVarSourceApplyConfiguration represents a declarative configuration of the EnvVarSource type for use
// with apply.
type EnvVarSourceApplyConfiguration struct {
	FieldRef         *ObjectFieldSelectorApplyConfiguration   `json:"fieldRef,omitempty"`
	ResourceFieldRef *ResourceFieldSelectorApplyConfiguration `json:"resourceFieldRef,omitempty"`
	ConfigMapKeyRef  *ConfigMapKeySelectorApplyConfiguration  `json:"configMapKeyRef,omitempty"`
	SecretKeyRef     *SecretKeySelectorApplyConfiguration     `json:"secretKeyRef,omitempty"`
}

// EnvVarSourceApplyConfiguration represents a declarative configuration of the EnvVarSource type for use
// with apply.
func EnvVarSource() *EnvVarSourceApplyConfiguration {
	return &EnvVarSourceApplyConfiguration{}
}

// EnvVarSourceList represents a listAlias of EnvVarSourceApplyConfiguration.
type EnvVarSourceList []*EnvVarSourceApplyConfiguration

// EnvVarSourceMap represents a map of EnvVarSourceApplyConfiguration.
type EnvVarSourceMap map[string]EnvVarSourceApplyConfiguration

// EphemeralContainerApplyConfiguration represents a declarative configuration of the EphemeralContainer type for use
// with apply.
type EphemeralContainerApplyConfiguration struct {
	EphemeralContainerCommonApplyConfiguration `json:",inline"`
	TargetContainerName                        *string `json:"targetContainerName,omitempty"`
}

// EphemeralContainerApplyConfiguration represents a declarative configuration of the EphemeralContainer type for use
// with apply.
func EphemeralContainer() *EphemeralContainerApplyConfiguration {
	return &EphemeralContainerApplyConfiguration{}
}

// EphemeralContainerList represents a listAlias of EphemeralContainerApplyConfiguration.
type EphemeralContainerList []*EphemeralContainerApplyConfiguration

// EphemeralContainerMap represents a map of EphemeralContainerApplyConfiguration.
type EphemeralContainerMap map[string]EphemeralContainerApplyConfiguration

// EphemeralContainerCommonApplyConfiguration represents a declarative configuration of the EphemeralContainerCommon type for use
// with apply.
type EphemeralContainerCommonApplyConfiguration struct {
	Name                     *string                                 `json:"name,omitempty"`
	Image                    *string                                 `json:"image,omitempty"`
	Command                  *[]string                               `json:"command,omitempty"`
	Args                     *[]string                               `json:"args,omitempty"`
	WorkingDir               *string                                 `json:"workingDir,omitempty"`
	Ports                    *[]ContainerPortApplyConfiguration      `json:"ports,omitempty"`
	EnvFrom                  *[]EnvFromSourceApplyConfiguration      `json:"envFrom,omitempty"`
	Env                      *[]EnvVarApplyConfiguration             `json:"env,omitempty"`
	Resources                *ResourceRequirementsApplyConfiguration `json:"resources,omitempty"`
	VolumeMounts             *[]VolumeMountApplyConfiguration        `json:"volumeMounts,omitempty"`
	VolumeDevices            *[]VolumeDeviceApplyConfiguration       `json:"volumeDevices,omitempty"`
	LivenessProbe            *ProbeApplyConfiguration                `json:"livenessProbe,omitempty"`
	ReadinessProbe           *ProbeApplyConfiguration                `json:"readinessProbe,omitempty"`
	StartupProbe             *ProbeApplyConfiguration                `json:"startupProbe,omitempty"`
	Lifecycle                *LifecycleApplyConfiguration            `json:"lifecycle,omitempty"`
	TerminationMessagePath   *string                                 `json:"terminationMessagePath,omitempty"`
	TerminationMessagePolicy *corev1.TerminationMessagePolicy        `json:"terminationMessagePolicy,omitempty"`
	ImagePullPolicy          *corev1.PullPolicy                      `json:"imagePullPolicy,omitempty"`
	SecurityContext          *SecurityContextApplyConfiguration      `json:"securityContext,omitempty"`
	Stdin                    *bool                                   `json:"stdin,omitempty"`
	StdinOnce                *bool                                   `json:"stdinOnce,omitempty"`
	TTY                      *bool                                   `json:"tty,omitempty"`
}

// EphemeralContainerCommonApplyConfiguration represents a declarative configuration of the EphemeralContainerCommon type for use
// with apply.
func EphemeralContainerCommon() *EphemeralContainerCommonApplyConfiguration {
	return &EphemeralContainerCommonApplyConfiguration{}
}

// EphemeralContainerCommonList represents a listAlias of EphemeralContainerCommonApplyConfiguration.
type EphemeralContainerCommonList []*EphemeralContainerCommonApplyConfiguration

// EphemeralContainerCommonMap represents a map of EphemeralContainerCommonApplyConfiguration.
type EphemeralContainerCommonMap map[string]EphemeralContainerCommonApplyConfiguration

// EphemeralContainersApplyConfiguration represents a declarative configuration of the EphemeralContainers type for use
// with apply.
type EphemeralContainersApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	EphemeralContainers                  *[]EphemeralContainerApplyConfiguration `json:"ephemeralContainers,omitempty"`
}

// EphemeralContainersApplyConfiguration represents a declarative configuration of the EphemeralContainers type for use
// with apply.
func EphemeralContainers() *EphemeralContainersApplyConfiguration {
	return &EphemeralContainersApplyConfiguration{}
}

// EphemeralContainersList represents a listAlias of EphemeralContainersApplyConfiguration.
type EphemeralContainersList []*EphemeralContainersApplyConfiguration

// EphemeralContainersMap represents a map of EphemeralContainersApplyConfiguration.
type EphemeralContainersMap map[string]EphemeralContainersApplyConfiguration

// EventApplyConfiguration represents a declarative configuration of the Event type for use
// with apply.
type EventApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	InvolvedObject                       *ObjectReferenceApplyConfiguration `json:"involvedObject,omitempty"`
	Reason                               *string                            `json:"reason,omitempty"`
	Message                              *string                            `json:"message,omitempty"`
	Source                               *EventSourceApplyConfiguration     `json:"source,omitempty"`
	FirstTimestamp                       *apismetav1.Time                   `json:"firstTimestamp,omitempty"`
	LastTimestamp                        *apismetav1.Time                   `json:"lastTimestamp,omitempty"`
	Count                                *int32                             `json:"count,omitempty"`
	Type                                 *string                            `json:"type,omitempty"`
	EventTime                            *apismetav1.MicroTime              `json:"eventTime,omitempty"`
	Series                               *EventSeriesApplyConfiguration     `json:"series,omitempty"`
	Action                               *string                            `json:"action,omitempty"`
	Related                              *ObjectReferenceApplyConfiguration `json:"related,omitempty"`
	ReportingController                  *string                            `json:"reportingComponent,omitempty"`
	ReportingInstance                    *string                            `json:"reportingInstance,omitempty"`
}

// EventApplyConfiguration represents a declarative configuration of the Event type for use
// with apply.
func Event() *EventApplyConfiguration {
	return &EventApplyConfiguration{}
}

// EventList represents a listAlias of EventApplyConfiguration.
type EventList []*EventApplyConfiguration

// EventMap represents a map of EventApplyConfiguration.
type EventMap map[string]EventApplyConfiguration

// EventListApplyConfiguration represents a declarative configuration of the EventList type for use
// with apply.
type EventListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]EventApplyConfiguration `json:"items,omitempty"`
}

// EventListApplyConfiguration represents a declarative configuration of the EventList type for use
// with apply.
func EventList() *EventListApplyConfiguration {
	return &EventListApplyConfiguration{}
}

// EventListList represents a listAlias of EventListApplyConfiguration.
type EventListList []*EventListApplyConfiguration

// EventListMap represents a map of EventListApplyConfiguration.
type EventListMap map[string]EventListApplyConfiguration

// EventSeriesApplyConfiguration represents a declarative configuration of the EventSeries type for use
// with apply.
type EventSeriesApplyConfiguration struct {
	Count            *int32                   `json:"count,omitempty"`
	LastObservedTime *apismetav1.MicroTime    `json:"lastObservedTime,omitempty"`
	State            *corev1.EventSeriesState `json:"state,omitempty"`
}

// EventSeriesApplyConfiguration represents a declarative configuration of the EventSeries type for use
// with apply.
func EventSeries() *EventSeriesApplyConfiguration {
	return &EventSeriesApplyConfiguration{}
}

// EventSeriesList represents a listAlias of EventSeriesApplyConfiguration.
type EventSeriesList []*EventSeriesApplyConfiguration

// EventSeriesMap represents a map of EventSeriesApplyConfiguration.
type EventSeriesMap map[string]EventSeriesApplyConfiguration

// EventSourceApplyConfiguration represents a declarative configuration of the EventSource type for use
// with apply.
type EventSourceApplyConfiguration struct {
	Component *string `json:"component,omitempty"`
	Host      *string `json:"host,omitempty"`
}

// EventSourceApplyConfiguration represents a declarative configuration of the EventSource type for use
// with apply.
func EventSource() *EventSourceApplyConfiguration {
	return &EventSourceApplyConfiguration{}
}

// EventSourceList represents a listAlias of EventSourceApplyConfiguration.
type EventSourceList []*EventSourceApplyConfiguration

// EventSourceMap represents a map of EventSourceApplyConfiguration.
type EventSourceMap map[string]EventSourceApplyConfiguration

// ExecActionApplyConfiguration represents a declarative configuration of the ExecAction type for use
// with apply.
type ExecActionApplyConfiguration struct {
	Command *[]string `json:"command,omitempty"`
}

// ExecActionApplyConfiguration represents a declarative configuration of the ExecAction type for use
// with apply.
func ExecAction() *ExecActionApplyConfiguration {
	return &ExecActionApplyConfiguration{}
}

// ExecActionList represents a listAlias of ExecActionApplyConfiguration.
type ExecActionList []*ExecActionApplyConfiguration

// ExecActionMap represents a map of ExecActionApplyConfiguration.
type ExecActionMap map[string]ExecActionApplyConfiguration

// FCVolumeSourceApplyConfiguration represents a declarative configuration of the FCVolumeSource type for use
// with apply.
type FCVolumeSourceApplyConfiguration struct {
	TargetWWNs *[]string `json:"targetWWNs,omitempty"`
	Lun        *int32    `json:"lun,omitempty"`
	FSType     *string   `json:"fsType,omitempty"`
	ReadOnly   *bool     `json:"readOnly,omitempty"`
	WWIDs      *[]string `json:"wwids,omitempty"`
}

// FCVolumeSourceApplyConfiguration represents a declarative configuration of the FCVolumeSource type for use
// with apply.
func FCVolumeSource() *FCVolumeSourceApplyConfiguration {
	return &FCVolumeSourceApplyConfiguration{}
}

// FCVolumeSourceList represents a listAlias of FCVolumeSourceApplyConfiguration.
type FCVolumeSourceList []*FCVolumeSourceApplyConfiguration

// FCVolumeSourceMap represents a map of FCVolumeSourceApplyConfiguration.
type FCVolumeSourceMap map[string]FCVolumeSourceApplyConfiguration

// FlexPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the FlexPersistentVolumeSource type for use
// with apply.
type FlexPersistentVolumeSourceApplyConfiguration struct {
	Driver    *string                            `json:"driver,omitempty"`
	FSType    *string                            `json:"fsType,omitempty"`
	SecretRef *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly  *bool                              `json:"readOnly,omitempty"`
	Options   *map[string]string                 `json:"options,omitempty"`
}

// FlexPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the FlexPersistentVolumeSource type for use
// with apply.
func FlexPersistentVolumeSource() *FlexPersistentVolumeSourceApplyConfiguration {
	return &FlexPersistentVolumeSourceApplyConfiguration{}
}

// FlexPersistentVolumeSourceList represents a listAlias of FlexPersistentVolumeSourceApplyConfiguration.
type FlexPersistentVolumeSourceList []*FlexPersistentVolumeSourceApplyConfiguration

// FlexPersistentVolumeSourceMap represents a map of FlexPersistentVolumeSourceApplyConfiguration.
type FlexPersistentVolumeSourceMap map[string]FlexPersistentVolumeSourceApplyConfiguration

// FlexVolumeSourceApplyConfiguration represents a declarative configuration of the FlexVolumeSource type for use
// with apply.
type FlexVolumeSourceApplyConfiguration struct {
	Driver    *string                                 `json:"driver,omitempty"`
	FSType    *string                                 `json:"fsType,omitempty"`
	SecretRef *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly  *bool                                   `json:"readOnly,omitempty"`
	Options   *map[string]string                      `json:"options,omitempty"`
}

// FlexVolumeSourceApplyConfiguration represents a declarative configuration of the FlexVolumeSource type for use
// with apply.
func FlexVolumeSource() *FlexVolumeSourceApplyConfiguration {
	return &FlexVolumeSourceApplyConfiguration{}
}

// FlexVolumeSourceList represents a listAlias of FlexVolumeSourceApplyConfiguration.
type FlexVolumeSourceList []*FlexVolumeSourceApplyConfiguration

// FlexVolumeSourceMap represents a map of FlexVolumeSourceApplyConfiguration.
type FlexVolumeSourceMap map[string]FlexVolumeSourceApplyConfiguration

// FlockerVolumeSourceApplyConfiguration represents a declarative configuration of the FlockerVolumeSource type for use
// with apply.
type FlockerVolumeSourceApplyConfiguration struct {
	DatasetName *string `json:"datasetName,omitempty"`
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

// FlockerVolumeSourceApplyConfiguration represents a declarative configuration of the FlockerVolumeSource type for use
// with apply.
func FlockerVolumeSource() *FlockerVolumeSourceApplyConfiguration {
	return &FlockerVolumeSourceApplyConfiguration{}
}

// FlockerVolumeSourceList represents a listAlias of FlockerVolumeSourceApplyConfiguration.
type FlockerVolumeSourceList []*FlockerVolumeSourceApplyConfiguration

// FlockerVolumeSourceMap represents a map of FlockerVolumeSourceApplyConfiguration.
type FlockerVolumeSourceMap map[string]FlockerVolumeSourceApplyConfiguration

// GCEPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the GCEPersistentDiskVolumeSource type for use
// with apply.
type GCEPersistentDiskVolumeSourceApplyConfiguration struct {
	PDName    *string `json:"pdName,omitempty"`
	FSType    *string `json:"fsType,omitempty"`
	Partition *int32  `json:"partition,omitempty"`
	ReadOnly  *bool   `json:"readOnly,omitempty"`
}

// GCEPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the GCEPersistentDiskVolumeSource type for use
// with apply.
func GCEPersistentDiskVolumeSource() *GCEPersistentDiskVolumeSourceApplyConfiguration {
	return &GCEPersistentDiskVolumeSourceApplyConfiguration{}
}

// GCEPersistentDiskVolumeSourceList represents a listAlias of GCEPersistentDiskVolumeSourceApplyConfiguration.
type GCEPersistentDiskVolumeSourceList []*GCEPersistentDiskVolumeSourceApplyConfiguration

// GCEPersistentDiskVolumeSourceMap represents a map of GCEPersistentDiskVolumeSourceApplyConfiguration.
type GCEPersistentDiskVolumeSourceMap map[string]GCEPersistentDiskVolumeSourceApplyConfiguration

// GitRepoVolumeSourceApplyConfiguration represents a declarative configuration of the GitRepoVolumeSource type for use
// with apply.
type GitRepoVolumeSourceApplyConfiguration struct {
	Repository *string `json:"repository,omitempty"`
	Revision   *string `json:"revision,omitempty"`
	Directory  *string `json:"directory,omitempty"`
}

// GitRepoVolumeSourceApplyConfiguration represents a declarative configuration of the GitRepoVolumeSource type for use
// with apply.
func GitRepoVolumeSource() *GitRepoVolumeSourceApplyConfiguration {
	return &GitRepoVolumeSourceApplyConfiguration{}
}

// GitRepoVolumeSourceList represents a listAlias of GitRepoVolumeSourceApplyConfiguration.
type GitRepoVolumeSourceList []*GitRepoVolumeSourceApplyConfiguration

// GitRepoVolumeSourceMap represents a map of GitRepoVolumeSourceApplyConfiguration.
type GitRepoVolumeSourceMap map[string]GitRepoVolumeSourceApplyConfiguration

// GlusterfsPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsPersistentVolumeSource type for use
// with apply.
type GlusterfsPersistentVolumeSourceApplyConfiguration struct {
	EndpointsName      *string `json:"endpoints,omitempty"`
	Path               *string `json:"path,omitempty"`
	ReadOnly           *bool   `json:"readOnly,omitempty"`
	EndpointsNamespace *string `json:"endpointsNamespace,omitempty"`
}

// GlusterfsPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsPersistentVolumeSource type for use
// with apply.
func GlusterfsPersistentVolumeSource() *GlusterfsPersistentVolumeSourceApplyConfiguration {
	return &GlusterfsPersistentVolumeSourceApplyConfiguration{}
}

// GlusterfsPersistentVolumeSourceList represents a listAlias of GlusterfsPersistentVolumeSourceApplyConfiguration.
type GlusterfsPersistentVolumeSourceList []*GlusterfsPersistentVolumeSourceApplyConfiguration

// GlusterfsPersistentVolumeSourceMap represents a map of GlusterfsPersistentVolumeSourceApplyConfiguration.
type GlusterfsPersistentVolumeSourceMap map[string]GlusterfsPersistentVolumeSourceApplyConfiguration

// GlusterfsVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsVolumeSource type for use
// with apply.
type GlusterfsVolumeSourceApplyConfiguration struct {
	EndpointsName *string `json:"endpoints,omitempty"`
	Path          *string `json:"path,omitempty"`
	ReadOnly      *bool   `json:"readOnly,omitempty"`
}

// GlusterfsVolumeSourceApplyConfiguration represents a declarative configuration of the GlusterfsVolumeSource type for use
// with apply.
func GlusterfsVolumeSource() *GlusterfsVolumeSourceApplyConfiguration {
	return &GlusterfsVolumeSourceApplyConfiguration{}
}

// GlusterfsVolumeSourceList represents a listAlias of GlusterfsVolumeSourceApplyConfiguration.
type GlusterfsVolumeSourceList []*GlusterfsVolumeSourceApplyConfiguration

// GlusterfsVolumeSourceMap represents a map of GlusterfsVolumeSourceApplyConfiguration.
type GlusterfsVolumeSourceMap map[string]GlusterfsVolumeSourceApplyConfiguration

// HTTPGetActionApplyConfiguration represents a declarative configuration of the HTTPGetAction type for use
// with apply.
type HTTPGetActionApplyConfiguration struct {
	Path        *string                         `json:"path,omitempty"`
	Port        *intstr.IntOrString             `json:"port,omitempty"`
	Host        *string                         `json:"host,omitempty"`
	Scheme      *corev1.URIScheme               `json:"scheme,omitempty"`
	HTTPHeaders *[]HTTPHeaderApplyConfiguration `json:"httpHeaders,omitempty"`
}

// HTTPGetActionApplyConfiguration represents a declarative configuration of the HTTPGetAction type for use
// with apply.
func HTTPGetAction() *HTTPGetActionApplyConfiguration {
	return &HTTPGetActionApplyConfiguration{}
}

// HTTPGetActionList represents a listAlias of HTTPGetActionApplyConfiguration.
type HTTPGetActionList []*HTTPGetActionApplyConfiguration

// HTTPGetActionMap represents a map of HTTPGetActionApplyConfiguration.
type HTTPGetActionMap map[string]HTTPGetActionApplyConfiguration

// HTTPHeaderApplyConfiguration represents a declarative configuration of the HTTPHeader type for use
// with apply.
type HTTPHeaderApplyConfiguration struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// HTTPHeaderApplyConfiguration represents a declarative configuration of the HTTPHeader type for use
// with apply.
func HTTPHeader() *HTTPHeaderApplyConfiguration {
	return &HTTPHeaderApplyConfiguration{}
}

// HTTPHeaderList represents a listAlias of HTTPHeaderApplyConfiguration.
type HTTPHeaderList []*HTTPHeaderApplyConfiguration

// HTTPHeaderMap represents a map of HTTPHeaderApplyConfiguration.
type HTTPHeaderMap map[string]HTTPHeaderApplyConfiguration

// HandlerApplyConfiguration represents a declarative configuration of the Handler type for use
// with apply.
type HandlerApplyConfiguration struct {
	Exec      *ExecActionApplyConfiguration      `json:"exec,omitempty"`
	HTTPGet   *HTTPGetActionApplyConfiguration   `json:"httpGet,omitempty"`
	TCPSocket *TCPSocketActionApplyConfiguration `json:"tcpSocket,omitempty"`
}

// HandlerApplyConfiguration represents a declarative configuration of the Handler type for use
// with apply.
func Handler() *HandlerApplyConfiguration {
	return &HandlerApplyConfiguration{}
}

// HandlerList represents a listAlias of HandlerApplyConfiguration.
type HandlerList []*HandlerApplyConfiguration

// HandlerMap represents a map of HandlerApplyConfiguration.
type HandlerMap map[string]HandlerApplyConfiguration

// HostAliasApplyConfiguration represents a declarative configuration of the HostAlias type for use
// with apply.
type HostAliasApplyConfiguration struct {
	IP        *string   `json:"ip,omitempty"`
	Hostnames *[]string `json:"hostnames,omitempty"`
}

// HostAliasApplyConfiguration represents a declarative configuration of the HostAlias type for use
// with apply.
func HostAlias() *HostAliasApplyConfiguration {
	return &HostAliasApplyConfiguration{}
}

// HostAliasList represents a listAlias of HostAliasApplyConfiguration.
type HostAliasList []*HostAliasApplyConfiguration

// HostAliasMap represents a map of HostAliasApplyConfiguration.
type HostAliasMap map[string]HostAliasApplyConfiguration

// HostPathVolumeSourceApplyConfiguration represents a declarative configuration of the HostPathVolumeSource type for use
// with apply.
type HostPathVolumeSourceApplyConfiguration struct {
	Path *string              `json:"path,omitempty"`
	Type *corev1.HostPathType `json:"type,omitempty"`
}

// HostPathVolumeSourceApplyConfiguration represents a declarative configuration of the HostPathVolumeSource type for use
// with apply.
func HostPathVolumeSource() *HostPathVolumeSourceApplyConfiguration {
	return &HostPathVolumeSourceApplyConfiguration{}
}

// HostPathVolumeSourceList represents a listAlias of HostPathVolumeSourceApplyConfiguration.
type HostPathVolumeSourceList []*HostPathVolumeSourceApplyConfiguration

// HostPathVolumeSourceMap represents a map of HostPathVolumeSourceApplyConfiguration.
type HostPathVolumeSourceMap map[string]HostPathVolumeSourceApplyConfiguration

// ISCSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIPersistentVolumeSource type for use
// with apply.
type ISCSIPersistentVolumeSourceApplyConfiguration struct {
	TargetPortal      *string                            `json:"targetPortal,omitempty"`
	IQN               *string                            `json:"iqn,omitempty"`
	Lun               *int32                             `json:"lun,omitempty"`
	ISCSIInterface    *string                            `json:"iscsiInterface,omitempty"`
	FSType            *string                            `json:"fsType,omitempty"`
	ReadOnly          *bool                              `json:"readOnly,omitempty"`
	Portals           *[]string                          `json:"portals,omitempty"`
	DiscoveryCHAPAuth *bool                              `json:"chapAuthDiscovery,omitempty"`
	SessionCHAPAuth   *bool                              `json:"chapAuthSession,omitempty"`
	SecretRef         *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	InitiatorName     *string                            `json:"initiatorName,omitempty"`
}

// ISCSIPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIPersistentVolumeSource type for use
// with apply.
func ISCSIPersistentVolumeSource() *ISCSIPersistentVolumeSourceApplyConfiguration {
	return &ISCSIPersistentVolumeSourceApplyConfiguration{}
}

// ISCSIPersistentVolumeSourceList represents a listAlias of ISCSIPersistentVolumeSourceApplyConfiguration.
type ISCSIPersistentVolumeSourceList []*ISCSIPersistentVolumeSourceApplyConfiguration

// ISCSIPersistentVolumeSourceMap represents a map of ISCSIPersistentVolumeSourceApplyConfiguration.
type ISCSIPersistentVolumeSourceMap map[string]ISCSIPersistentVolumeSourceApplyConfiguration

// ISCSIVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIVolumeSource type for use
// with apply.
type ISCSIVolumeSourceApplyConfiguration struct {
	TargetPortal      *string                                 `json:"targetPortal,omitempty"`
	IQN               *string                                 `json:"iqn,omitempty"`
	Lun               *int32                                  `json:"lun,omitempty"`
	ISCSIInterface    *string                                 `json:"iscsiInterface,omitempty"`
	FSType            *string                                 `json:"fsType,omitempty"`
	ReadOnly          *bool                                   `json:"readOnly,omitempty"`
	Portals           *[]string                               `json:"portals,omitempty"`
	DiscoveryCHAPAuth *bool                                   `json:"chapAuthDiscovery,omitempty"`
	SessionCHAPAuth   *bool                                   `json:"chapAuthSession,omitempty"`
	SecretRef         *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	InitiatorName     *string                                 `json:"initiatorName,omitempty"`
}

// ISCSIVolumeSourceApplyConfiguration represents a declarative configuration of the ISCSIVolumeSource type for use
// with apply.
func ISCSIVolumeSource() *ISCSIVolumeSourceApplyConfiguration {
	return &ISCSIVolumeSourceApplyConfiguration{}
}

// ISCSIVolumeSourceList represents a listAlias of ISCSIVolumeSourceApplyConfiguration.
type ISCSIVolumeSourceList []*ISCSIVolumeSourceApplyConfiguration

// ISCSIVolumeSourceMap represents a map of ISCSIVolumeSourceApplyConfiguration.
type ISCSIVolumeSourceMap map[string]ISCSIVolumeSourceApplyConfiguration

// KeyToPathApplyConfiguration represents a declarative configuration of the KeyToPath type for use
// with apply.
type KeyToPathApplyConfiguration struct {
	Key  *string `json:"key,omitempty"`
	Path *string `json:"path,omitempty"`
	Mode *int32  `json:"mode,omitempty"`
}

// KeyToPathApplyConfiguration represents a declarative configuration of the KeyToPath type for use
// with apply.
func KeyToPath() *KeyToPathApplyConfiguration {
	return &KeyToPathApplyConfiguration{}
}

// KeyToPathList represents a listAlias of KeyToPathApplyConfiguration.
type KeyToPathList []*KeyToPathApplyConfiguration

// KeyToPathMap represents a map of KeyToPathApplyConfiguration.
type KeyToPathMap map[string]KeyToPathApplyConfiguration

// LifecycleApplyConfiguration represents a declarative configuration of the Lifecycle type for use
// with apply.
type LifecycleApplyConfiguration struct {
	PostStart *HandlerApplyConfiguration `json:"postStart,omitempty"`
	PreStop   *HandlerApplyConfiguration `json:"preStop,omitempty"`
}

// LifecycleApplyConfiguration represents a declarative configuration of the Lifecycle type for use
// with apply.
func Lifecycle() *LifecycleApplyConfiguration {
	return &LifecycleApplyConfiguration{}
}

// LifecycleList represents a listAlias of LifecycleApplyConfiguration.
type LifecycleList []*LifecycleApplyConfiguration

// LifecycleMap represents a map of LifecycleApplyConfiguration.
type LifecycleMap map[string]LifecycleApplyConfiguration

// LimitRangeApplyConfiguration represents a declarative configuration of the LimitRange type for use
// with apply.
type LimitRangeApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *LimitRangeSpecApplyConfiguration `json:"spec,omitempty"`
}

// LimitRangeApplyConfiguration represents a declarative configuration of the LimitRange type for use
// with apply.
func LimitRange() *LimitRangeApplyConfiguration {
	return &LimitRangeApplyConfiguration{}
}

// LimitRangeList represents a listAlias of LimitRangeApplyConfiguration.
type LimitRangeList []*LimitRangeApplyConfiguration

// LimitRangeMap represents a map of LimitRangeApplyConfiguration.
type LimitRangeMap map[string]LimitRangeApplyConfiguration

// LimitRangeItemApplyConfiguration represents a declarative configuration of the LimitRangeItem type for use
// with apply.
type LimitRangeItemApplyConfiguration struct {
	Type                 *corev1.LimitType    `json:"type,omitempty"`
	Max                  *corev1.ResourceList `json:"max,omitempty"`
	Min                  *corev1.ResourceList `json:"min,omitempty"`
	Default              *corev1.ResourceList `json:"default,omitempty"`
	DefaultRequest       *corev1.ResourceList `json:"defaultRequest,omitempty"`
	MaxLimitRequestRatio *corev1.ResourceList `json:"maxLimitRequestRatio,omitempty"`
}

// LimitRangeItemApplyConfiguration represents a declarative configuration of the LimitRangeItem type for use
// with apply.
func LimitRangeItem() *LimitRangeItemApplyConfiguration {
	return &LimitRangeItemApplyConfiguration{}
}

// LimitRangeItemList represents a listAlias of LimitRangeItemApplyConfiguration.
type LimitRangeItemList []*LimitRangeItemApplyConfiguration

// LimitRangeItemMap represents a map of LimitRangeItemApplyConfiguration.
type LimitRangeItemMap map[string]LimitRangeItemApplyConfiguration

// LimitRangeListApplyConfiguration represents a declarative configuration of the LimitRangeList type for use
// with apply.
type LimitRangeListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]LimitRangeApplyConfiguration `json:"items,omitempty"`
}

// LimitRangeListApplyConfiguration represents a declarative configuration of the LimitRangeList type for use
// with apply.
func LimitRangeList() *LimitRangeListApplyConfiguration {
	return &LimitRangeListApplyConfiguration{}
}

// LimitRangeListList represents a listAlias of LimitRangeListApplyConfiguration.
type LimitRangeListList []*LimitRangeListApplyConfiguration

// LimitRangeListMap represents a map of LimitRangeListApplyConfiguration.
type LimitRangeListMap map[string]LimitRangeListApplyConfiguration

// LimitRangeSpecApplyConfiguration represents a declarative configuration of the LimitRangeSpec type for use
// with apply.
type LimitRangeSpecApplyConfiguration struct {
	Limits *[]LimitRangeItemApplyConfiguration `json:"limits,omitempty"`
}

// LimitRangeSpecApplyConfiguration represents a declarative configuration of the LimitRangeSpec type for use
// with apply.
func LimitRangeSpec() *LimitRangeSpecApplyConfiguration {
	return &LimitRangeSpecApplyConfiguration{}
}

// LimitRangeSpecList represents a listAlias of LimitRangeSpecApplyConfiguration.
type LimitRangeSpecList []*LimitRangeSpecApplyConfiguration

// LimitRangeSpecMap represents a map of LimitRangeSpecApplyConfiguration.
type LimitRangeSpecMap map[string]LimitRangeSpecApplyConfiguration

// LoadBalancerIngressApplyConfiguration represents a declarative configuration of the LoadBalancerIngress type for use
// with apply.
type LoadBalancerIngressApplyConfiguration struct {
	IP       *string `json:"ip,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
}

// LoadBalancerIngressApplyConfiguration represents a declarative configuration of the LoadBalancerIngress type for use
// with apply.
func LoadBalancerIngress() *LoadBalancerIngressApplyConfiguration {
	return &LoadBalancerIngressApplyConfiguration{}
}

// LoadBalancerIngressList represents a listAlias of LoadBalancerIngressApplyConfiguration.
type LoadBalancerIngressList []*LoadBalancerIngressApplyConfiguration

// LoadBalancerIngressMap represents a map of LoadBalancerIngressApplyConfiguration.
type LoadBalancerIngressMap map[string]LoadBalancerIngressApplyConfiguration

// LoadBalancerStatusApplyConfiguration represents a declarative configuration of the LoadBalancerStatus type for use
// with apply.
type LoadBalancerStatusApplyConfiguration struct {
	Ingress *[]LoadBalancerIngressApplyConfiguration `json:"ingress,omitempty"`
}

// LoadBalancerStatusApplyConfiguration represents a declarative configuration of the LoadBalancerStatus type for use
// with apply.
func LoadBalancerStatus() *LoadBalancerStatusApplyConfiguration {
	return &LoadBalancerStatusApplyConfiguration{}
}

// LoadBalancerStatusList represents a listAlias of LoadBalancerStatusApplyConfiguration.
type LoadBalancerStatusList []*LoadBalancerStatusApplyConfiguration

// LoadBalancerStatusMap represents a map of LoadBalancerStatusApplyConfiguration.
type LoadBalancerStatusMap map[string]LoadBalancerStatusApplyConfiguration

// LocalObjectReferenceApplyConfiguration represents a declarative configuration of the LocalObjectReference type for use
// with apply.
type LocalObjectReferenceApplyConfiguration struct {
	Name *string `json:"name,omitempty"`
}

// LocalObjectReferenceApplyConfiguration represents a declarative configuration of the LocalObjectReference type for use
// with apply.
func LocalObjectReference() *LocalObjectReferenceApplyConfiguration {
	return &LocalObjectReferenceApplyConfiguration{}
}

// LocalObjectReferenceList represents a listAlias of LocalObjectReferenceApplyConfiguration.
type LocalObjectReferenceList []*LocalObjectReferenceApplyConfiguration

// LocalObjectReferenceMap represents a map of LocalObjectReferenceApplyConfiguration.
type LocalObjectReferenceMap map[string]LocalObjectReferenceApplyConfiguration

// LocalVolumeSourceApplyConfiguration represents a declarative configuration of the LocalVolumeSource type for use
// with apply.
type LocalVolumeSourceApplyConfiguration struct {
	Path   *string `json:"path,omitempty"`
	FSType *string `json:"fsType,omitempty"`
}

// LocalVolumeSourceApplyConfiguration represents a declarative configuration of the LocalVolumeSource type for use
// with apply.
func LocalVolumeSource() *LocalVolumeSourceApplyConfiguration {
	return &LocalVolumeSourceApplyConfiguration{}
}

// LocalVolumeSourceList represents a listAlias of LocalVolumeSourceApplyConfiguration.
type LocalVolumeSourceList []*LocalVolumeSourceApplyConfiguration

// LocalVolumeSourceMap represents a map of LocalVolumeSourceApplyConfiguration.
type LocalVolumeSourceMap map[string]LocalVolumeSourceApplyConfiguration

// NFSVolumeSourceApplyConfiguration represents a declarative configuration of the NFSVolumeSource type for use
// with apply.
type NFSVolumeSourceApplyConfiguration struct {
	Server   *string `json:"server,omitempty"`
	Path     *string `json:"path,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

// NFSVolumeSourceApplyConfiguration represents a declarative configuration of the NFSVolumeSource type for use
// with apply.
func NFSVolumeSource() *NFSVolumeSourceApplyConfiguration {
	return &NFSVolumeSourceApplyConfiguration{}
}

// NFSVolumeSourceList represents a listAlias of NFSVolumeSourceApplyConfiguration.
type NFSVolumeSourceList []*NFSVolumeSourceApplyConfiguration

// NFSVolumeSourceMap represents a map of NFSVolumeSourceApplyConfiguration.
type NFSVolumeSourceMap map[string]NFSVolumeSourceApplyConfiguration

// NamespaceApplyConfiguration represents a declarative configuration of the Namespace type for use
// with apply.
type NamespaceApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *NamespaceSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *NamespaceStatusApplyConfiguration `json:"status,omitempty"`
}

// NamespaceApplyConfiguration represents a declarative configuration of the Namespace type for use
// with apply.
func Namespace() *NamespaceApplyConfiguration {
	return &NamespaceApplyConfiguration{}
}

// NamespaceList represents a listAlias of NamespaceApplyConfiguration.
type NamespaceList []*NamespaceApplyConfiguration

// NamespaceMap represents a map of NamespaceApplyConfiguration.
type NamespaceMap map[string]NamespaceApplyConfiguration

// NamespaceConditionApplyConfiguration represents a declarative configuration of the NamespaceCondition type for use
// with apply.
type NamespaceConditionApplyConfiguration struct {
	Type               *corev1.NamespaceConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus        `json:"status,omitempty"`
	LastTransitionTime *apismetav1.Time               `json:"lastTransitionTime,omitempty"`
	Reason             *string                        `json:"reason,omitempty"`
	Message            *string                        `json:"message,omitempty"`
}

// NamespaceConditionApplyConfiguration represents a declarative configuration of the NamespaceCondition type for use
// with apply.
func NamespaceCondition() *NamespaceConditionApplyConfiguration {
	return &NamespaceConditionApplyConfiguration{}
}

// NamespaceConditionList represents a listAlias of NamespaceConditionApplyConfiguration.
type NamespaceConditionList []*NamespaceConditionApplyConfiguration

// NamespaceConditionMap represents a map of NamespaceConditionApplyConfiguration.
type NamespaceConditionMap map[string]NamespaceConditionApplyConfiguration

// NamespaceListApplyConfiguration represents a declarative configuration of the NamespaceList type for use
// with apply.
type NamespaceListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]NamespaceApplyConfiguration `json:"items,omitempty"`
}

// NamespaceListApplyConfiguration represents a declarative configuration of the NamespaceList type for use
// with apply.
func NamespaceList() *NamespaceListApplyConfiguration {
	return &NamespaceListApplyConfiguration{}
}

// NamespaceListList represents a listAlias of NamespaceListApplyConfiguration.
type NamespaceListList []*NamespaceListApplyConfiguration

// NamespaceListMap represents a map of NamespaceListApplyConfiguration.
type NamespaceListMap map[string]NamespaceListApplyConfiguration

// NamespaceSpecApplyConfiguration represents a declarative configuration of the NamespaceSpec type for use
// with apply.
type NamespaceSpecApplyConfiguration struct {
	Finalizers *[]corev1.FinalizerName `json:"finalizers,omitempty"`
}

// NamespaceSpecApplyConfiguration represents a declarative configuration of the NamespaceSpec type for use
// with apply.
func NamespaceSpec() *NamespaceSpecApplyConfiguration {
	return &NamespaceSpecApplyConfiguration{}
}

// NamespaceSpecList represents a listAlias of NamespaceSpecApplyConfiguration.
type NamespaceSpecList []*NamespaceSpecApplyConfiguration

// NamespaceSpecMap represents a map of NamespaceSpecApplyConfiguration.
type NamespaceSpecMap map[string]NamespaceSpecApplyConfiguration

// NamespaceStatusApplyConfiguration represents a declarative configuration of the NamespaceStatus type for use
// with apply.
type NamespaceStatusApplyConfiguration struct {
	Phase      *corev1.NamespacePhase                  `json:"phase,omitempty"`
	Conditions *[]NamespaceConditionApplyConfiguration `json:"conditions,omitempty"`
}

// NamespaceStatusApplyConfiguration represents a declarative configuration of the NamespaceStatus type for use
// with apply.
func NamespaceStatus() *NamespaceStatusApplyConfiguration {
	return &NamespaceStatusApplyConfiguration{}
}

// NamespaceStatusList represents a listAlias of NamespaceStatusApplyConfiguration.
type NamespaceStatusList []*NamespaceStatusApplyConfiguration

// NamespaceStatusMap represents a map of NamespaceStatusApplyConfiguration.
type NamespaceStatusMap map[string]NamespaceStatusApplyConfiguration

// NodeApplyConfiguration represents a declarative configuration of the Node type for use
// with apply.
type NodeApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *NodeSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *NodeStatusApplyConfiguration `json:"status,omitempty"`
}

// NodeApplyConfiguration represents a declarative configuration of the Node type for use
// with apply.
func Node() *NodeApplyConfiguration {
	return &NodeApplyConfiguration{}
}

// NodeList represents a listAlias of NodeApplyConfiguration.
type NodeList []*NodeApplyConfiguration

// NodeMap represents a map of NodeApplyConfiguration.
type NodeMap map[string]NodeApplyConfiguration

// NodeAddressApplyConfiguration represents a declarative configuration of the NodeAddress type for use
// with apply.
type NodeAddressApplyConfiguration struct {
	Type    *corev1.NodeAddressType `json:"type,omitempty"`
	Address *string                 `json:"address,omitempty"`
}

// NodeAddressApplyConfiguration represents a declarative configuration of the NodeAddress type for use
// with apply.
func NodeAddress() *NodeAddressApplyConfiguration {
	return &NodeAddressApplyConfiguration{}
}

// NodeAddressList represents a listAlias of NodeAddressApplyConfiguration.
type NodeAddressList []*NodeAddressApplyConfiguration

// NodeAddressMap represents a map of NodeAddressApplyConfiguration.
type NodeAddressMap map[string]NodeAddressApplyConfiguration

// NodeAffinityApplyConfiguration represents a declarative configuration of the NodeAffinity type for use
// with apply.
type NodeAffinityApplyConfiguration struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *NodeSelectorApplyConfiguration              `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution *[]PreferredSchedulingTermApplyConfiguration `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// NodeAffinityApplyConfiguration represents a declarative configuration of the NodeAffinity type for use
// with apply.
func NodeAffinity() *NodeAffinityApplyConfiguration {
	return &NodeAffinityApplyConfiguration{}
}

// NodeAffinityList represents a listAlias of NodeAffinityApplyConfiguration.
type NodeAffinityList []*NodeAffinityApplyConfiguration

// NodeAffinityMap represents a map of NodeAffinityApplyConfiguration.
type NodeAffinityMap map[string]NodeAffinityApplyConfiguration

// NodeConditionApplyConfiguration represents a declarative configuration of the NodeCondition type for use
// with apply.
type NodeConditionApplyConfiguration struct {
	Type               *corev1.NodeConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus   `json:"status,omitempty"`
	LastHeartbeatTime  *apismetav1.Time          `json:"lastHeartbeatTime,omitempty"`
	LastTransitionTime *apismetav1.Time          `json:"lastTransitionTime,omitempty"`
	Reason             *string                   `json:"reason,omitempty"`
	Message            *string                   `json:"message,omitempty"`
}

// NodeConditionApplyConfiguration represents a declarative configuration of the NodeCondition type for use
// with apply.
func NodeCondition() *NodeConditionApplyConfiguration {
	return &NodeConditionApplyConfiguration{}
}

// NodeConditionList represents a listAlias of NodeConditionApplyConfiguration.
type NodeConditionList []*NodeConditionApplyConfiguration

// NodeConditionMap represents a map of NodeConditionApplyConfiguration.
type NodeConditionMap map[string]NodeConditionApplyConfiguration

// NodeConfigSourceApplyConfiguration represents a declarative configuration of the NodeConfigSource type for use
// with apply.
type NodeConfigSourceApplyConfiguration struct {
	ConfigMap *ConfigMapNodeConfigSourceApplyConfiguration `json:"configMap,omitempty"`
}

// NodeConfigSourceApplyConfiguration represents a declarative configuration of the NodeConfigSource type for use
// with apply.
func NodeConfigSource() *NodeConfigSourceApplyConfiguration {
	return &NodeConfigSourceApplyConfiguration{}
}

// NodeConfigSourceList represents a listAlias of NodeConfigSourceApplyConfiguration.
type NodeConfigSourceList []*NodeConfigSourceApplyConfiguration

// NodeConfigSourceMap represents a map of NodeConfigSourceApplyConfiguration.
type NodeConfigSourceMap map[string]NodeConfigSourceApplyConfiguration

// NodeConfigStatusApplyConfiguration represents a declarative configuration of the NodeConfigStatus type for use
// with apply.
type NodeConfigStatusApplyConfiguration struct {
	Assigned      *NodeConfigSourceApplyConfiguration `json:"assigned,omitempty"`
	Active        *NodeConfigSourceApplyConfiguration `json:"active,omitempty"`
	LastKnownGood *NodeConfigSourceApplyConfiguration `json:"lastKnownGood,omitempty"`
	Error         *string                             `json:"error,omitempty"`
}

// NodeConfigStatusApplyConfiguration represents a declarative configuration of the NodeConfigStatus type for use
// with apply.
func NodeConfigStatus() *NodeConfigStatusApplyConfiguration {
	return &NodeConfigStatusApplyConfiguration{}
}

// NodeConfigStatusList represents a listAlias of NodeConfigStatusApplyConfiguration.
type NodeConfigStatusList []*NodeConfigStatusApplyConfiguration

// NodeConfigStatusMap represents a map of NodeConfigStatusApplyConfiguration.
type NodeConfigStatusMap map[string]NodeConfigStatusApplyConfiguration

// NodeDaemonEndpointsApplyConfiguration represents a declarative configuration of the NodeDaemonEndpoints type for use
// with apply.
type NodeDaemonEndpointsApplyConfiguration struct {
	KubeletEndpoint *DaemonEndpointApplyConfiguration `json:"kubeletEndpoint,omitempty"`
}

// NodeDaemonEndpointsApplyConfiguration represents a declarative configuration of the NodeDaemonEndpoints type for use
// with apply.
func NodeDaemonEndpoints() *NodeDaemonEndpointsApplyConfiguration {
	return &NodeDaemonEndpointsApplyConfiguration{}
}

// NodeDaemonEndpointsList represents a listAlias of NodeDaemonEndpointsApplyConfiguration.
type NodeDaemonEndpointsList []*NodeDaemonEndpointsApplyConfiguration

// NodeDaemonEndpointsMap represents a map of NodeDaemonEndpointsApplyConfiguration.
type NodeDaemonEndpointsMap map[string]NodeDaemonEndpointsApplyConfiguration

// NodeListApplyConfiguration represents a declarative configuration of the NodeList type for use
// with apply.
type NodeListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]NodeApplyConfiguration `json:"items,omitempty"`
}

// NodeListApplyConfiguration represents a declarative configuration of the NodeList type for use
// with apply.
func NodeList() *NodeListApplyConfiguration {
	return &NodeListApplyConfiguration{}
}

// NodeListList represents a listAlias of NodeListApplyConfiguration.
type NodeListList []*NodeListApplyConfiguration

// NodeListMap represents a map of NodeListApplyConfiguration.
type NodeListMap map[string]NodeListApplyConfiguration

// NodeProxyOptionsApplyConfiguration represents a declarative configuration of the NodeProxyOptions type for use
// with apply.
type NodeProxyOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Path                              *string `json:"path,omitempty"`
}

// NodeProxyOptionsApplyConfiguration represents a declarative configuration of the NodeProxyOptions type for use
// with apply.
func NodeProxyOptions() *NodeProxyOptionsApplyConfiguration {
	return &NodeProxyOptionsApplyConfiguration{}
}

// NodeProxyOptionsList represents a listAlias of NodeProxyOptionsApplyConfiguration.
type NodeProxyOptionsList []*NodeProxyOptionsApplyConfiguration

// NodeProxyOptionsMap represents a map of NodeProxyOptionsApplyConfiguration.
type NodeProxyOptionsMap map[string]NodeProxyOptionsApplyConfiguration

// NodeSelectorApplyConfiguration represents a declarative configuration of the NodeSelector type for use
// with apply.
type NodeSelectorApplyConfiguration struct {
	NodeSelectorTerms *[]NodeSelectorTermApplyConfiguration `json:"nodeSelectorTerms,omitempty"`
}

// NodeSelectorApplyConfiguration represents a declarative configuration of the NodeSelector type for use
// with apply.
func NodeSelector() *NodeSelectorApplyConfiguration {
	return &NodeSelectorApplyConfiguration{}
}

// NodeSelectorList represents a listAlias of NodeSelectorApplyConfiguration.
type NodeSelectorList []*NodeSelectorApplyConfiguration

// NodeSelectorMap represents a map of NodeSelectorApplyConfiguration.
type NodeSelectorMap map[string]NodeSelectorApplyConfiguration

// NodeSelectorRequirementApplyConfiguration represents a declarative configuration of the NodeSelectorRequirement type for use
// with apply.
type NodeSelectorRequirementApplyConfiguration struct {
	Key      *string                      `json:"key,omitempty"`
	Operator *corev1.NodeSelectorOperator `json:"operator,omitempty"`
	Values   *[]string                    `json:"values,omitempty"`
}

// NodeSelectorRequirementApplyConfiguration represents a declarative configuration of the NodeSelectorRequirement type for use
// with apply.
func NodeSelectorRequirement() *NodeSelectorRequirementApplyConfiguration {
	return &NodeSelectorRequirementApplyConfiguration{}
}

// NodeSelectorRequirementList represents a listAlias of NodeSelectorRequirementApplyConfiguration.
type NodeSelectorRequirementList []*NodeSelectorRequirementApplyConfiguration

// NodeSelectorRequirementMap represents a map of NodeSelectorRequirementApplyConfiguration.
type NodeSelectorRequirementMap map[string]NodeSelectorRequirementApplyConfiguration

// NodeSelectorTermApplyConfiguration represents a declarative configuration of the NodeSelectorTerm type for use
// with apply.
type NodeSelectorTermApplyConfiguration struct {
	MatchExpressions *[]NodeSelectorRequirementApplyConfiguration `json:"matchExpressions,omitempty"`
	MatchFields      *[]NodeSelectorRequirementApplyConfiguration `json:"matchFields,omitempty"`
}

// NodeSelectorTermApplyConfiguration represents a declarative configuration of the NodeSelectorTerm type for use
// with apply.
func NodeSelectorTerm() *NodeSelectorTermApplyConfiguration {
	return &NodeSelectorTermApplyConfiguration{}
}

// NodeSelectorTermList represents a listAlias of NodeSelectorTermApplyConfiguration.
type NodeSelectorTermList []*NodeSelectorTermApplyConfiguration

// NodeSelectorTermMap represents a map of NodeSelectorTermApplyConfiguration.
type NodeSelectorTermMap map[string]NodeSelectorTermApplyConfiguration

// NodeSpecApplyConfiguration represents a declarative configuration of the NodeSpec type for use
// with apply.
type NodeSpecApplyConfiguration struct {
	PodCIDR            *string                             `json:"podCIDR,omitempty"`
	PodCIDRs           *[]string                           `json:"podCIDRs,omitempty"`
	ProviderID         *string                             `json:"providerID,omitempty"`
	Unschedulable      *bool                               `json:"unschedulable,omitempty"`
	Taints             *[]TaintApplyConfiguration          `json:"taints,omitempty"`
	ConfigSource       *NodeConfigSourceApplyConfiguration `json:"configSource,omitempty"`
	DoNotUseExternalID *string                             `json:"externalID,omitempty"`
}

// NodeSpecApplyConfiguration represents a declarative configuration of the NodeSpec type for use
// with apply.
func NodeSpec() *NodeSpecApplyConfiguration {
	return &NodeSpecApplyConfiguration{}
}

// NodeSpecList represents a listAlias of NodeSpecApplyConfiguration.
type NodeSpecList []*NodeSpecApplyConfiguration

// NodeSpecMap represents a map of NodeSpecApplyConfiguration.
type NodeSpecMap map[string]NodeSpecApplyConfiguration

// NodeStatusApplyConfiguration represents a declarative configuration of the NodeStatus type for use
// with apply.
type NodeStatusApplyConfiguration struct {
	Capacity        *corev1.ResourceList                   `json:"capacity,omitempty"`
	Allocatable     *corev1.ResourceList                   `json:"allocatable,omitempty"`
	Phase           *corev1.NodePhase                      `json:"phase,omitempty"`
	Conditions      *[]NodeConditionApplyConfiguration     `json:"conditions,omitempty"`
	Addresses       *[]NodeAddressApplyConfiguration       `json:"addresses,omitempty"`
	DaemonEndpoints *NodeDaemonEndpointsApplyConfiguration `json:"daemonEndpoints,omitempty"`
	NodeInfo        *NodeSystemInfoApplyConfiguration      `json:"nodeInfo,omitempty"`
	Images          *[]ContainerImageApplyConfiguration    `json:"images,omitempty"`
	VolumesInUse    *[]corev1.UniqueVolumeName             `json:"volumesInUse,omitempty"`
	VolumesAttached *[]AttachedVolumeApplyConfiguration    `json:"volumesAttached,omitempty"`
	Config          *NodeConfigStatusApplyConfiguration    `json:"config,omitempty"`
}

// NodeStatusApplyConfiguration represents a declarative configuration of the NodeStatus type for use
// with apply.
func NodeStatus() *NodeStatusApplyConfiguration {
	return &NodeStatusApplyConfiguration{}
}

// NodeStatusList represents a listAlias of NodeStatusApplyConfiguration.
type NodeStatusList []*NodeStatusApplyConfiguration

// NodeStatusMap represents a map of NodeStatusApplyConfiguration.
type NodeStatusMap map[string]NodeStatusApplyConfiguration

// NodeSystemInfoApplyConfiguration represents a declarative configuration of the NodeSystemInfo type for use
// with apply.
type NodeSystemInfoApplyConfiguration struct {
	MachineID               *string `json:"machineID,omitempty"`
	SystemUUID              *string `json:"systemUUID,omitempty"`
	BootID                  *string `json:"bootID,omitempty"`
	KernelVersion           *string `json:"kernelVersion,omitempty"`
	OSImage                 *string `json:"osImage,omitempty"`
	ContainerRuntimeVersion *string `json:"containerRuntimeVersion,omitempty"`
	KubeletVersion          *string `json:"kubeletVersion,omitempty"`
	KubeProxyVersion        *string `json:"kubeProxyVersion,omitempty"`
	OperatingSystem         *string `json:"operatingSystem,omitempty"`
	Architecture            *string `json:"architecture,omitempty"`
}

// NodeSystemInfoApplyConfiguration represents a declarative configuration of the NodeSystemInfo type for use
// with apply.
func NodeSystemInfo() *NodeSystemInfoApplyConfiguration {
	return &NodeSystemInfoApplyConfiguration{}
}

// NodeSystemInfoList represents a listAlias of NodeSystemInfoApplyConfiguration.
type NodeSystemInfoList []*NodeSystemInfoApplyConfiguration

// NodeSystemInfoMap represents a map of NodeSystemInfoApplyConfiguration.
type NodeSystemInfoMap map[string]NodeSystemInfoApplyConfiguration

// ObjectFieldSelectorApplyConfiguration represents a declarative configuration of the ObjectFieldSelector type for use
// with apply.
type ObjectFieldSelectorApplyConfiguration struct {
	APIVersion *string `json:"apiVersion,omitempty"`
	FieldPath  *string `json:"fieldPath,omitempty"`
}

// ObjectFieldSelectorApplyConfiguration represents a declarative configuration of the ObjectFieldSelector type for use
// with apply.
func ObjectFieldSelector() *ObjectFieldSelectorApplyConfiguration {
	return &ObjectFieldSelectorApplyConfiguration{}
}

// ObjectFieldSelectorList represents a listAlias of ObjectFieldSelectorApplyConfiguration.
type ObjectFieldSelectorList []*ObjectFieldSelectorApplyConfiguration

// ObjectFieldSelectorMap represents a map of ObjectFieldSelectorApplyConfiguration.
type ObjectFieldSelectorMap map[string]ObjectFieldSelectorApplyConfiguration

// ObjectReferenceApplyConfiguration represents a declarative configuration of the ObjectReference type for use
// with apply.
type ObjectReferenceApplyConfiguration struct {
	Kind            *string    `json:"kind,omitempty"`
	Namespace       *string    `json:"namespace,omitempty"`
	Name            *string    `json:"name,omitempty"`
	UID             *types.UID `json:"uid,omitempty"`
	APIVersion      *string    `json:"apiVersion,omitempty"`
	ResourceVersion *string    `json:"resourceVersion,omitempty"`
	FieldPath       *string    `json:"fieldPath,omitempty"`
}

// ObjectReferenceApplyConfiguration represents a declarative configuration of the ObjectReference type for use
// with apply.
func ObjectReference() *ObjectReferenceApplyConfiguration {
	return &ObjectReferenceApplyConfiguration{}
}

// ObjectReferenceList represents a listAlias of ObjectReferenceApplyConfiguration.
type ObjectReferenceList []*ObjectReferenceApplyConfiguration

// ObjectReferenceMap represents a map of ObjectReferenceApplyConfiguration.
type ObjectReferenceMap map[string]ObjectReferenceApplyConfiguration

// PersistentVolumeApplyConfiguration represents a declarative configuration of the PersistentVolume type for use
// with apply.
type PersistentVolumeApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PersistentVolumeSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *PersistentVolumeStatusApplyConfiguration `json:"status,omitempty"`
}

// PersistentVolumeApplyConfiguration represents a declarative configuration of the PersistentVolume type for use
// with apply.
func PersistentVolume() *PersistentVolumeApplyConfiguration {
	return &PersistentVolumeApplyConfiguration{}
}

// PersistentVolumeList represents a listAlias of PersistentVolumeApplyConfiguration.
type PersistentVolumeList []*PersistentVolumeApplyConfiguration

// PersistentVolumeMap represents a map of PersistentVolumeApplyConfiguration.
type PersistentVolumeMap map[string]PersistentVolumeApplyConfiguration

// PersistentVolumeClaimApplyConfiguration represents a declarative configuration of the PersistentVolumeClaim type for use
// with apply.
type PersistentVolumeClaimApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PersistentVolumeClaimSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *PersistentVolumeClaimStatusApplyConfiguration `json:"status,omitempty"`
}

// PersistentVolumeClaimApplyConfiguration represents a declarative configuration of the PersistentVolumeClaim type for use
// with apply.
func PersistentVolumeClaim() *PersistentVolumeClaimApplyConfiguration {
	return &PersistentVolumeClaimApplyConfiguration{}
}

// PersistentVolumeClaimList represents a listAlias of PersistentVolumeClaimApplyConfiguration.
type PersistentVolumeClaimList []*PersistentVolumeClaimApplyConfiguration

// PersistentVolumeClaimMap represents a map of PersistentVolumeClaimApplyConfiguration.
type PersistentVolumeClaimMap map[string]PersistentVolumeClaimApplyConfiguration

// PersistentVolumeClaimConditionApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimCondition type for use
// with apply.
type PersistentVolumeClaimConditionApplyConfiguration struct {
	Type               *corev1.PersistentVolumeClaimConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus                    `json:"status,omitempty"`
	LastProbeTime      *apismetav1.Time                           `json:"lastProbeTime,omitempty"`
	LastTransitionTime *apismetav1.Time                           `json:"lastTransitionTime,omitempty"`
	Reason             *string                                    `json:"reason,omitempty"`
	Message            *string                                    `json:"message,omitempty"`
}

// PersistentVolumeClaimConditionApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimCondition type for use
// with apply.
func PersistentVolumeClaimCondition() *PersistentVolumeClaimConditionApplyConfiguration {
	return &PersistentVolumeClaimConditionApplyConfiguration{}
}

// PersistentVolumeClaimConditionList represents a listAlias of PersistentVolumeClaimConditionApplyConfiguration.
type PersistentVolumeClaimConditionList []*PersistentVolumeClaimConditionApplyConfiguration

// PersistentVolumeClaimConditionMap represents a map of PersistentVolumeClaimConditionApplyConfiguration.
type PersistentVolumeClaimConditionMap map[string]PersistentVolumeClaimConditionApplyConfiguration

// PersistentVolumeClaimListApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimList type for use
// with apply.
type PersistentVolumeClaimListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PersistentVolumeClaimApplyConfiguration `json:"items,omitempty"`
}

// PersistentVolumeClaimListApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimList type for use
// with apply.
func PersistentVolumeClaimList() *PersistentVolumeClaimListApplyConfiguration {
	return &PersistentVolumeClaimListApplyConfiguration{}
}

// PersistentVolumeClaimListList represents a listAlias of PersistentVolumeClaimListApplyConfiguration.
type PersistentVolumeClaimListList []*PersistentVolumeClaimListApplyConfiguration

// PersistentVolumeClaimListMap represents a map of PersistentVolumeClaimListApplyConfiguration.
type PersistentVolumeClaimListMap map[string]PersistentVolumeClaimListApplyConfiguration

// PersistentVolumeClaimSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimSpec type for use
// with apply.
type PersistentVolumeClaimSpecApplyConfiguration struct {
	AccessModes      *[]corev1.PersistentVolumeAccessMode         `json:"accessModes,omitempty"`
	Selector         *metav1.LabelSelectorApplyConfiguration      `json:"selector,omitempty"`
	Resources        *ResourceRequirementsApplyConfiguration      `json:"resources,omitempty"`
	VolumeName       *string                                      `json:"volumeName,omitempty"`
	StorageClassName *string                                      `json:"storageClassName,omitempty"`
	VolumeMode       *corev1.PersistentVolumeMode                 `json:"volumeMode,omitempty"`
	DataSource       *TypedLocalObjectReferenceApplyConfiguration `json:"dataSource,omitempty"`
}

// PersistentVolumeClaimSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimSpec type for use
// with apply.
func PersistentVolumeClaimSpec() *PersistentVolumeClaimSpecApplyConfiguration {
	return &PersistentVolumeClaimSpecApplyConfiguration{}
}

// PersistentVolumeClaimSpecList represents a listAlias of PersistentVolumeClaimSpecApplyConfiguration.
type PersistentVolumeClaimSpecList []*PersistentVolumeClaimSpecApplyConfiguration

// PersistentVolumeClaimSpecMap represents a map of PersistentVolumeClaimSpecApplyConfiguration.
type PersistentVolumeClaimSpecMap map[string]PersistentVolumeClaimSpecApplyConfiguration

// PersistentVolumeClaimStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimStatus type for use
// with apply.
type PersistentVolumeClaimStatusApplyConfiguration struct {
	Phase       *corev1.PersistentVolumeClaimPhase                  `json:"phase,omitempty"`
	AccessModes *[]corev1.PersistentVolumeAccessMode                `json:"accessModes,omitempty"`
	Capacity    *corev1.ResourceList                                `json:"capacity,omitempty"`
	Conditions  *[]PersistentVolumeClaimConditionApplyConfiguration `json:"conditions,omitempty"`
}

// PersistentVolumeClaimStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimStatus type for use
// with apply.
func PersistentVolumeClaimStatus() *PersistentVolumeClaimStatusApplyConfiguration {
	return &PersistentVolumeClaimStatusApplyConfiguration{}
}

// PersistentVolumeClaimStatusList represents a listAlias of PersistentVolumeClaimStatusApplyConfiguration.
type PersistentVolumeClaimStatusList []*PersistentVolumeClaimStatusApplyConfiguration

// PersistentVolumeClaimStatusMap represents a map of PersistentVolumeClaimStatusApplyConfiguration.
type PersistentVolumeClaimStatusMap map[string]PersistentVolumeClaimStatusApplyConfiguration

// PersistentVolumeClaimVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimVolumeSource type for use
// with apply.
type PersistentVolumeClaimVolumeSourceApplyConfiguration struct {
	ClaimName *string `json:"claimName,omitempty"`
	ReadOnly  *bool   `json:"readOnly,omitempty"`
}

// PersistentVolumeClaimVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeClaimVolumeSource type for use
// with apply.
func PersistentVolumeClaimVolumeSource() *PersistentVolumeClaimVolumeSourceApplyConfiguration {
	return &PersistentVolumeClaimVolumeSourceApplyConfiguration{}
}

// PersistentVolumeClaimVolumeSourceList represents a listAlias of PersistentVolumeClaimVolumeSourceApplyConfiguration.
type PersistentVolumeClaimVolumeSourceList []*PersistentVolumeClaimVolumeSourceApplyConfiguration

// PersistentVolumeClaimVolumeSourceMap represents a map of PersistentVolumeClaimVolumeSourceApplyConfiguration.
type PersistentVolumeClaimVolumeSourceMap map[string]PersistentVolumeClaimVolumeSourceApplyConfiguration

// PersistentVolumeListApplyConfiguration represents a declarative configuration of the PersistentVolumeList type for use
// with apply.
type PersistentVolumeListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PersistentVolumeApplyConfiguration `json:"items,omitempty"`
}

// PersistentVolumeListApplyConfiguration represents a declarative configuration of the PersistentVolumeList type for use
// with apply.
func PersistentVolumeList() *PersistentVolumeListApplyConfiguration {
	return &PersistentVolumeListApplyConfiguration{}
}

// PersistentVolumeListList represents a listAlias of PersistentVolumeListApplyConfiguration.
type PersistentVolumeListList []*PersistentVolumeListApplyConfiguration

// PersistentVolumeListMap represents a map of PersistentVolumeListApplyConfiguration.
type PersistentVolumeListMap map[string]PersistentVolumeListApplyConfiguration

// PersistentVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeSource type for use
// with apply.
type PersistentVolumeSourceApplyConfiguration struct {
	GCEPersistentDisk    *GCEPersistentDiskVolumeSourceApplyConfiguration    `json:"gcePersistentDisk,omitempty"`
	AWSElasticBlockStore *AWSElasticBlockStoreVolumeSourceApplyConfiguration `json:"awsElasticBlockStore,omitempty"`
	HostPath             *HostPathVolumeSourceApplyConfiguration             `json:"hostPath,omitempty"`
	Glusterfs            *GlusterfsPersistentVolumeSourceApplyConfiguration  `json:"glusterfs,omitempty"`
	NFS                  *NFSVolumeSourceApplyConfiguration                  `json:"nfs,omitempty"`
	RBD                  *RBDPersistentVolumeSourceApplyConfiguration        `json:"rbd,omitempty"`
	ISCSI                *ISCSIPersistentVolumeSourceApplyConfiguration      `json:"iscsi,omitempty"`
	Cinder               *CinderPersistentVolumeSourceApplyConfiguration     `json:"cinder,omitempty"`
	CephFS               *CephFSPersistentVolumeSourceApplyConfiguration     `json:"cephfs,omitempty"`
	FC                   *FCVolumeSourceApplyConfiguration                   `json:"fc,omitempty"`
	Flocker              *FlockerVolumeSourceApplyConfiguration              `json:"flocker,omitempty"`
	FlexVolume           *FlexPersistentVolumeSourceApplyConfiguration       `json:"flexVolume,omitempty"`
	AzureFile            *AzureFilePersistentVolumeSourceApplyConfiguration  `json:"azureFile,omitempty"`
	VsphereVolume        *VsphereVirtualDiskVolumeSourceApplyConfiguration   `json:"vsphereVolume,omitempty"`
	Quobyte              *QuobyteVolumeSourceApplyConfiguration              `json:"quobyte,omitempty"`
	AzureDisk            *AzureDiskVolumeSourceApplyConfiguration            `json:"azureDisk,omitempty"`
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSourceApplyConfiguration `json:"photonPersistentDisk,omitempty"`
	PortworxVolume       *PortworxVolumeSourceApplyConfiguration             `json:"portworxVolume,omitempty"`
	ScaleIO              *ScaleIOPersistentVolumeSourceApplyConfiguration    `json:"scaleIO,omitempty"`
	Local                *LocalVolumeSourceApplyConfiguration                `json:"local,omitempty"`
	StorageOS            *StorageOSPersistentVolumeSourceApplyConfiguration  `json:"storageos,omitempty"`
	CSI                  *CSIPersistentVolumeSourceApplyConfiguration        `json:"csi,omitempty"`
}

// PersistentVolumeSourceApplyConfiguration represents a declarative configuration of the PersistentVolumeSource type for use
// with apply.
func PersistentVolumeSource() *PersistentVolumeSourceApplyConfiguration {
	return &PersistentVolumeSourceApplyConfiguration{}
}

// PersistentVolumeSourceList represents a listAlias of PersistentVolumeSourceApplyConfiguration.
type PersistentVolumeSourceList []*PersistentVolumeSourceApplyConfiguration

// PersistentVolumeSourceMap represents a map of PersistentVolumeSourceApplyConfiguration.
type PersistentVolumeSourceMap map[string]PersistentVolumeSourceApplyConfiguration

// PersistentVolumeSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeSpec type for use
// with apply.
type PersistentVolumeSpecApplyConfiguration struct {
	Capacity                                 *corev1.ResourceList `json:"capacity,omitempty"`
	PersistentVolumeSourceApplyConfiguration `json:",inline"`
	AccessModes                              *[]corev1.PersistentVolumeAccessMode  `json:"accessModes,omitempty"`
	ClaimRef                                 *ObjectReferenceApplyConfiguration    `json:"claimRef,omitempty"`
	PersistentVolumeReclaimPolicy            *corev1.PersistentVolumeReclaimPolicy `json:"persistentVolumeReclaimPolicy,omitempty"`
	StorageClassName                         *string                               `json:"storageClassName,omitempty"`
	MountOptions                             *[]string                             `json:"mountOptions,omitempty"`
	VolumeMode                               *corev1.PersistentVolumeMode          `json:"volumeMode,omitempty"`
	NodeAffinity                             *VolumeNodeAffinityApplyConfiguration `json:"nodeAffinity,omitempty"`
}

// PersistentVolumeSpecApplyConfiguration represents a declarative configuration of the PersistentVolumeSpec type for use
// with apply.
func PersistentVolumeSpec() *PersistentVolumeSpecApplyConfiguration {
	return &PersistentVolumeSpecApplyConfiguration{}
}

// PersistentVolumeSpecList represents a listAlias of PersistentVolumeSpecApplyConfiguration.
type PersistentVolumeSpecList []*PersistentVolumeSpecApplyConfiguration

// PersistentVolumeSpecMap represents a map of PersistentVolumeSpecApplyConfiguration.
type PersistentVolumeSpecMap map[string]PersistentVolumeSpecApplyConfiguration

// PersistentVolumeStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeStatus type for use
// with apply.
type PersistentVolumeStatusApplyConfiguration struct {
	Phase   *corev1.PersistentVolumePhase `json:"phase,omitempty"`
	Message *string                       `json:"message,omitempty"`
	Reason  *string                       `json:"reason,omitempty"`
}

// PersistentVolumeStatusApplyConfiguration represents a declarative configuration of the PersistentVolumeStatus type for use
// with apply.
func PersistentVolumeStatus() *PersistentVolumeStatusApplyConfiguration {
	return &PersistentVolumeStatusApplyConfiguration{}
}

// PersistentVolumeStatusList represents a listAlias of PersistentVolumeStatusApplyConfiguration.
type PersistentVolumeStatusList []*PersistentVolumeStatusApplyConfiguration

// PersistentVolumeStatusMap represents a map of PersistentVolumeStatusApplyConfiguration.
type PersistentVolumeStatusMap map[string]PersistentVolumeStatusApplyConfiguration

// PhotonPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the PhotonPersistentDiskVolumeSource type for use
// with apply.
type PhotonPersistentDiskVolumeSourceApplyConfiguration struct {
	PdID   *string `json:"pdID,omitempty"`
	FSType *string `json:"fsType,omitempty"`
}

// PhotonPersistentDiskVolumeSourceApplyConfiguration represents a declarative configuration of the PhotonPersistentDiskVolumeSource type for use
// with apply.
func PhotonPersistentDiskVolumeSource() *PhotonPersistentDiskVolumeSourceApplyConfiguration {
	return &PhotonPersistentDiskVolumeSourceApplyConfiguration{}
}

// PhotonPersistentDiskVolumeSourceList represents a listAlias of PhotonPersistentDiskVolumeSourceApplyConfiguration.
type PhotonPersistentDiskVolumeSourceList []*PhotonPersistentDiskVolumeSourceApplyConfiguration

// PhotonPersistentDiskVolumeSourceMap represents a map of PhotonPersistentDiskVolumeSourceApplyConfiguration.
type PhotonPersistentDiskVolumeSourceMap map[string]PhotonPersistentDiskVolumeSourceApplyConfiguration

// PodApplyConfiguration represents a declarative configuration of the Pod type for use
// with apply.
type PodApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PodSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *PodStatusApplyConfiguration `json:"status,omitempty"`
}

// PodApplyConfiguration represents a declarative configuration of the Pod type for use
// with apply.
func Pod() *PodApplyConfiguration {
	return &PodApplyConfiguration{}
}

// PodList represents a listAlias of PodApplyConfiguration.
type PodList []*PodApplyConfiguration

// PodMap represents a map of PodApplyConfiguration.
type PodMap map[string]PodApplyConfiguration

// PodAffinityApplyConfiguration represents a declarative configuration of the PodAffinity type for use
// with apply.
type PodAffinityApplyConfiguration struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *[]PodAffinityTermApplyConfiguration         `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution *[]WeightedPodAffinityTermApplyConfiguration `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodAffinityApplyConfiguration represents a declarative configuration of the PodAffinity type for use
// with apply.
func PodAffinity() *PodAffinityApplyConfiguration {
	return &PodAffinityApplyConfiguration{}
}

// PodAffinityList represents a listAlias of PodAffinityApplyConfiguration.
type PodAffinityList []*PodAffinityApplyConfiguration

// PodAffinityMap represents a map of PodAffinityApplyConfiguration.
type PodAffinityMap map[string]PodAffinityApplyConfiguration

// PodAffinityTermApplyConfiguration represents a declarative configuration of the PodAffinityTerm type for use
// with apply.
type PodAffinityTermApplyConfiguration struct {
	LabelSelector *metav1.LabelSelectorApplyConfiguration `json:"labelSelector,omitempty"`
	Namespaces    *[]string                               `json:"namespaces,omitempty"`
	TopologyKey   *string                                 `json:"topologyKey,omitempty"`
}

// PodAffinityTermApplyConfiguration represents a declarative configuration of the PodAffinityTerm type for use
// with apply.
func PodAffinityTerm() *PodAffinityTermApplyConfiguration {
	return &PodAffinityTermApplyConfiguration{}
}

// PodAffinityTermList represents a listAlias of PodAffinityTermApplyConfiguration.
type PodAffinityTermList []*PodAffinityTermApplyConfiguration

// PodAffinityTermMap represents a map of PodAffinityTermApplyConfiguration.
type PodAffinityTermMap map[string]PodAffinityTermApplyConfiguration

// PodAntiAffinityApplyConfiguration represents a declarative configuration of the PodAntiAffinity type for use
// with apply.
type PodAntiAffinityApplyConfiguration struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *[]PodAffinityTermApplyConfiguration         `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution *[]WeightedPodAffinityTermApplyConfiguration `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodAntiAffinityApplyConfiguration represents a declarative configuration of the PodAntiAffinity type for use
// with apply.
func PodAntiAffinity() *PodAntiAffinityApplyConfiguration {
	return &PodAntiAffinityApplyConfiguration{}
}

// PodAntiAffinityList represents a listAlias of PodAntiAffinityApplyConfiguration.
type PodAntiAffinityList []*PodAntiAffinityApplyConfiguration

// PodAntiAffinityMap represents a map of PodAntiAffinityApplyConfiguration.
type PodAntiAffinityMap map[string]PodAntiAffinityApplyConfiguration

// PodAttachOptionsApplyConfiguration represents a declarative configuration of the PodAttachOptions type for use
// with apply.
type PodAttachOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Stdin                             *bool   `json:"stdin,omitempty"`
	Stdout                            *bool   `json:"stdout,omitempty"`
	Stderr                            *bool   `json:"stderr,omitempty"`
	TTY                               *bool   `json:"tty,omitempty"`
	Container                         *string `json:"container,omitempty"`
}

// PodAttachOptionsApplyConfiguration represents a declarative configuration of the PodAttachOptions type for use
// with apply.
func PodAttachOptions() *PodAttachOptionsApplyConfiguration {
	return &PodAttachOptionsApplyConfiguration{}
}

// PodAttachOptionsList represents a listAlias of PodAttachOptionsApplyConfiguration.
type PodAttachOptionsList []*PodAttachOptionsApplyConfiguration

// PodAttachOptionsMap represents a map of PodAttachOptionsApplyConfiguration.
type PodAttachOptionsMap map[string]PodAttachOptionsApplyConfiguration

// PodConditionApplyConfiguration represents a declarative configuration of the PodCondition type for use
// with apply.
type PodConditionApplyConfiguration struct {
	Type               *corev1.PodConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus  `json:"status,omitempty"`
	LastProbeTime      *apismetav1.Time         `json:"lastProbeTime,omitempty"`
	LastTransitionTime *apismetav1.Time         `json:"lastTransitionTime,omitempty"`
	Reason             *string                  `json:"reason,omitempty"`
	Message            *string                  `json:"message,omitempty"`
}

// PodConditionApplyConfiguration represents a declarative configuration of the PodCondition type for use
// with apply.
func PodCondition() *PodConditionApplyConfiguration {
	return &PodConditionApplyConfiguration{}
}

// PodConditionList represents a listAlias of PodConditionApplyConfiguration.
type PodConditionList []*PodConditionApplyConfiguration

// PodConditionMap represents a map of PodConditionApplyConfiguration.
type PodConditionMap map[string]PodConditionApplyConfiguration

// PodDNSConfigApplyConfiguration represents a declarative configuration of the PodDNSConfig type for use
// with apply.
type PodDNSConfigApplyConfiguration struct {
	Nameservers *[]string                               `json:"nameservers,omitempty"`
	Searches    *[]string                               `json:"searches,omitempty"`
	Options     *[]PodDNSConfigOptionApplyConfiguration `json:"options,omitempty"`
}

// PodDNSConfigApplyConfiguration represents a declarative configuration of the PodDNSConfig type for use
// with apply.
func PodDNSConfig() *PodDNSConfigApplyConfiguration {
	return &PodDNSConfigApplyConfiguration{}
}

// PodDNSConfigList represents a listAlias of PodDNSConfigApplyConfiguration.
type PodDNSConfigList []*PodDNSConfigApplyConfiguration

// PodDNSConfigMap represents a map of PodDNSConfigApplyConfiguration.
type PodDNSConfigMap map[string]PodDNSConfigApplyConfiguration

// PodDNSConfigOptionApplyConfiguration represents a declarative configuration of the PodDNSConfigOption type for use
// with apply.
type PodDNSConfigOptionApplyConfiguration struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PodDNSConfigOptionApplyConfiguration represents a declarative configuration of the PodDNSConfigOption type for use
// with apply.
func PodDNSConfigOption() *PodDNSConfigOptionApplyConfiguration {
	return &PodDNSConfigOptionApplyConfiguration{}
}

// PodDNSConfigOptionList represents a listAlias of PodDNSConfigOptionApplyConfiguration.
type PodDNSConfigOptionList []*PodDNSConfigOptionApplyConfiguration

// PodDNSConfigOptionMap represents a map of PodDNSConfigOptionApplyConfiguration.
type PodDNSConfigOptionMap map[string]PodDNSConfigOptionApplyConfiguration

// PodExecOptionsApplyConfiguration represents a declarative configuration of the PodExecOptions type for use
// with apply.
type PodExecOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Stdin                             *bool     `json:"stdin,omitempty"`
	Stdout                            *bool     `json:"stdout,omitempty"`
	Stderr                            *bool     `json:"stderr,omitempty"`
	TTY                               *bool     `json:"tty,omitempty"`
	Container                         *string   `json:"container,omitempty"`
	Command                           *[]string `json:"command,omitempty"`
}

// PodExecOptionsApplyConfiguration represents a declarative configuration of the PodExecOptions type for use
// with apply.
func PodExecOptions() *PodExecOptionsApplyConfiguration {
	return &PodExecOptionsApplyConfiguration{}
}

// PodExecOptionsList represents a listAlias of PodExecOptionsApplyConfiguration.
type PodExecOptionsList []*PodExecOptionsApplyConfiguration

// PodExecOptionsMap represents a map of PodExecOptionsApplyConfiguration.
type PodExecOptionsMap map[string]PodExecOptionsApplyConfiguration

// PodIPApplyConfiguration represents a declarative configuration of the PodIP type for use
// with apply.
type PodIPApplyConfiguration struct {
	IP *string `json:"ip,omitempty"`
}

// PodIPApplyConfiguration represents a declarative configuration of the PodIP type for use
// with apply.
func PodIP() *PodIPApplyConfiguration {
	return &PodIPApplyConfiguration{}
}

// PodIPList represents a listAlias of PodIPApplyConfiguration.
type PodIPList []*PodIPApplyConfiguration

// PodIPMap represents a map of PodIPApplyConfiguration.
type PodIPMap map[string]PodIPApplyConfiguration

// PodListApplyConfiguration represents a declarative configuration of the PodList type for use
// with apply.
type PodListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PodApplyConfiguration `json:"items,omitempty"`
}

// PodListApplyConfiguration represents a declarative configuration of the PodList type for use
// with apply.
func PodList() *PodListApplyConfiguration {
	return &PodListApplyConfiguration{}
}

// PodListList represents a listAlias of PodListApplyConfiguration.
type PodListList []*PodListApplyConfiguration

// PodListMap represents a map of PodListApplyConfiguration.
type PodListMap map[string]PodListApplyConfiguration

// PodLogOptionsApplyConfiguration represents a declarative configuration of the PodLogOptions type for use
// with apply.
type PodLogOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Container                         *string          `json:"container,omitempty"`
	Follow                            *bool            `json:"follow,omitempty"`
	Previous                          *bool            `json:"previous,omitempty"`
	SinceSeconds                      *int64           `json:"sinceSeconds,omitempty"`
	SinceTime                         *apismetav1.Time `json:"sinceTime,omitempty"`
	Timestamps                        *bool            `json:"timestamps,omitempty"`
	TailLines                         *int64           `json:"tailLines,omitempty"`
	LimitBytes                        *int64           `json:"limitBytes,omitempty"`
	InsecureSkipTLSVerifyBackend      *bool            `json:"insecureSkipTLSVerifyBackend,omitempty"`
}

// PodLogOptionsApplyConfiguration represents a declarative configuration of the PodLogOptions type for use
// with apply.
func PodLogOptions() *PodLogOptionsApplyConfiguration {
	return &PodLogOptionsApplyConfiguration{}
}

// PodLogOptionsList represents a listAlias of PodLogOptionsApplyConfiguration.
type PodLogOptionsList []*PodLogOptionsApplyConfiguration

// PodLogOptionsMap represents a map of PodLogOptionsApplyConfiguration.
type PodLogOptionsMap map[string]PodLogOptionsApplyConfiguration

// PodPortForwardOptionsApplyConfiguration represents a declarative configuration of the PodPortForwardOptions type for use
// with apply.
type PodPortForwardOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Ports                             *[]int32 `json:"ports,omitempty"`
}

// PodPortForwardOptionsApplyConfiguration represents a declarative configuration of the PodPortForwardOptions type for use
// with apply.
func PodPortForwardOptions() *PodPortForwardOptionsApplyConfiguration {
	return &PodPortForwardOptionsApplyConfiguration{}
}

// PodPortForwardOptionsList represents a listAlias of PodPortForwardOptionsApplyConfiguration.
type PodPortForwardOptionsList []*PodPortForwardOptionsApplyConfiguration

// PodPortForwardOptionsMap represents a map of PodPortForwardOptionsApplyConfiguration.
type PodPortForwardOptionsMap map[string]PodPortForwardOptionsApplyConfiguration

// PodProxyOptionsApplyConfiguration represents a declarative configuration of the PodProxyOptions type for use
// with apply.
type PodProxyOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Path                              *string `json:"path,omitempty"`
}

// PodProxyOptionsApplyConfiguration represents a declarative configuration of the PodProxyOptions type for use
// with apply.
func PodProxyOptions() *PodProxyOptionsApplyConfiguration {
	return &PodProxyOptionsApplyConfiguration{}
}

// PodProxyOptionsList represents a listAlias of PodProxyOptionsApplyConfiguration.
type PodProxyOptionsList []*PodProxyOptionsApplyConfiguration

// PodProxyOptionsMap represents a map of PodProxyOptionsApplyConfiguration.
type PodProxyOptionsMap map[string]PodProxyOptionsApplyConfiguration

// PodReadinessGateApplyConfiguration represents a declarative configuration of the PodReadinessGate type for use
// with apply.
type PodReadinessGateApplyConfiguration struct {
	ConditionType *corev1.PodConditionType `json:"conditionType,omitempty"`
}

// PodReadinessGateApplyConfiguration represents a declarative configuration of the PodReadinessGate type for use
// with apply.
func PodReadinessGate() *PodReadinessGateApplyConfiguration {
	return &PodReadinessGateApplyConfiguration{}
}

// PodReadinessGateList represents a listAlias of PodReadinessGateApplyConfiguration.
type PodReadinessGateList []*PodReadinessGateApplyConfiguration

// PodReadinessGateMap represents a map of PodReadinessGateApplyConfiguration.
type PodReadinessGateMap map[string]PodReadinessGateApplyConfiguration

// PodSecurityContextApplyConfiguration represents a declarative configuration of the PodSecurityContext type for use
// with apply.
type PodSecurityContextApplyConfiguration struct {
	SELinuxOptions      *SELinuxOptionsApplyConfiguration                `json:"seLinuxOptions,omitempty"`
	WindowsOptions      *WindowsSecurityContextOptionsApplyConfiguration `json:"windowsOptions,omitempty"`
	RunAsUser           *int64                                           `json:"runAsUser,omitempty"`
	RunAsGroup          *int64                                           `json:"runAsGroup,omitempty"`
	RunAsNonRoot        *bool                                            `json:"runAsNonRoot,omitempty"`
	SupplementalGroups  *[]int64                                         `json:"supplementalGroups,omitempty"`
	FSGroup             *int64                                           `json:"fsGroup,omitempty"`
	Sysctls             *[]SysctlApplyConfiguration                      `json:"sysctls,omitempty"`
	FSGroupChangePolicy *corev1.PodFSGroupChangePolicy                   `json:"fsGroupChangePolicy,omitempty"`
}

// PodSecurityContextApplyConfiguration represents a declarative configuration of the PodSecurityContext type for use
// with apply.
func PodSecurityContext() *PodSecurityContextApplyConfiguration {
	return &PodSecurityContextApplyConfiguration{}
}

// PodSecurityContextList represents a listAlias of PodSecurityContextApplyConfiguration.
type PodSecurityContextList []*PodSecurityContextApplyConfiguration

// PodSecurityContextMap represents a map of PodSecurityContextApplyConfiguration.
type PodSecurityContextMap map[string]PodSecurityContextApplyConfiguration

// PodSignatureApplyConfiguration represents a declarative configuration of the PodSignature type for use
// with apply.
type PodSignatureApplyConfiguration struct {
	PodController *metav1.OwnerReferenceApplyConfiguration `json:"podController,omitempty"`
}

// PodSignatureApplyConfiguration represents a declarative configuration of the PodSignature type for use
// with apply.
func PodSignature() *PodSignatureApplyConfiguration {
	return &PodSignatureApplyConfiguration{}
}

// PodSignatureList represents a listAlias of PodSignatureApplyConfiguration.
type PodSignatureList []*PodSignatureApplyConfiguration

// PodSignatureMap represents a map of PodSignatureApplyConfiguration.
type PodSignatureMap map[string]PodSignatureApplyConfiguration

// PodSpecApplyConfiguration represents a declarative configuration of the PodSpec type for use
// with apply.
type PodSpecApplyConfiguration struct {
	Volumes                       *[]VolumeApplyConfiguration                   `json:"volumes,omitempty"`
	InitContainers                *[]ContainerApplyConfiguration                `json:"initContainers,omitempty"`
	Containers                    *[]ContainerApplyConfiguration                `json:"containers,omitempty"`
	EphemeralContainers           *[]EphemeralContainerApplyConfiguration       `json:"ephemeralContainers,omitempty"`
	RestartPolicy                 *corev1.RestartPolicy                         `json:"restartPolicy,omitempty"`
	TerminationGracePeriodSeconds *int64                                        `json:"terminationGracePeriodSeconds,omitempty"`
	ActiveDeadlineSeconds         *int64                                        `json:"activeDeadlineSeconds,omitempty"`
	DNSPolicy                     *corev1.DNSPolicy                             `json:"dnsPolicy,omitempty"`
	NodeSelector                  *map[string]string                            `json:"nodeSelector,omitempty"`
	ServiceAccountName            *string                                       `json:"serviceAccountName,omitempty"`
	DeprecatedServiceAccount      *string                                       `json:"serviceAccount,omitempty"`
	AutomountServiceAccountToken  *bool                                         `json:"automountServiceAccountToken,omitempty"`
	NodeName                      *string                                       `json:"nodeName,omitempty"`
	HostNetwork                   *bool                                         `json:"hostNetwork,omitempty"`
	HostPID                       *bool                                         `json:"hostPID,omitempty"`
	HostIPC                       *bool                                         `json:"hostIPC,omitempty"`
	ShareProcessNamespace         *bool                                         `json:"shareProcessNamespace,omitempty"`
	SecurityContext               *PodSecurityContextApplyConfiguration         `json:"securityContext,omitempty"`
	ImagePullSecrets              *[]LocalObjectReferenceApplyConfiguration     `json:"imagePullSecrets,omitempty"`
	Hostname                      *string                                       `json:"hostname,omitempty"`
	Subdomain                     *string                                       `json:"subdomain,omitempty"`
	Affinity                      *AffinityApplyConfiguration                   `json:"affinity,omitempty"`
	SchedulerName                 *string                                       `json:"schedulerName,omitempty"`
	Tolerations                   *[]TolerationApplyConfiguration               `json:"tolerations,omitempty"`
	HostAliases                   *[]HostAliasApplyConfiguration                `json:"hostAliases,omitempty"`
	PriorityClassName             *string                                       `json:"priorityClassName,omitempty"`
	Priority                      *int32                                        `json:"priority,omitempty"`
	DNSConfig                     *PodDNSConfigApplyConfiguration               `json:"dnsConfig,omitempty"`
	ReadinessGates                *[]PodReadinessGateApplyConfiguration         `json:"readinessGates,omitempty"`
	RuntimeClassName              *string                                       `json:"runtimeClassName,omitempty"`
	EnableServiceLinks            *bool                                         `json:"enableServiceLinks,omitempty"`
	PreemptionPolicy              *corev1.PreemptionPolicy                      `json:"preemptionPolicy,omitempty"`
	Overhead                      *corev1.ResourceList                          `json:"overhead,omitempty"`
	TopologySpreadConstraints     *[]TopologySpreadConstraintApplyConfiguration `json:"topologySpreadConstraints,omitempty"`
}

// PodSpecApplyConfiguration represents a declarative configuration of the PodSpec type for use
// with apply.
func PodSpec() *PodSpecApplyConfiguration {
	return &PodSpecApplyConfiguration{}
}

// PodSpecList represents a listAlias of PodSpecApplyConfiguration.
type PodSpecList []*PodSpecApplyConfiguration

// PodSpecMap represents a map of PodSpecApplyConfiguration.
type PodSpecMap map[string]PodSpecApplyConfiguration

// PodStatusApplyConfiguration represents a declarative configuration of the PodStatus type for use
// with apply.
type PodStatusApplyConfiguration struct {
	Phase                      *corev1.PodPhase                     `json:"phase,omitempty"`
	Conditions                 *[]PodConditionApplyConfiguration    `json:"conditions,omitempty"`
	Message                    *string                              `json:"message,omitempty"`
	Reason                     *string                              `json:"reason,omitempty"`
	NominatedNodeName          *string                              `json:"nominatedNodeName,omitempty"`
	HostIP                     *string                              `json:"hostIP,omitempty"`
	PodIP                      *string                              `json:"podIP,omitempty"`
	PodIPs                     *[]PodIPApplyConfiguration           `json:"podIPs,omitempty"`
	StartTime                  *apismetav1.Time                     `json:"startTime,omitempty"`
	InitContainerStatuses      *[]ContainerStatusApplyConfiguration `json:"initContainerStatuses,omitempty"`
	ContainerStatuses          *[]ContainerStatusApplyConfiguration `json:"containerStatuses,omitempty"`
	QOSClass                   *corev1.PodQOSClass                  `json:"qosClass,omitempty"`
	EphemeralContainerStatuses *[]ContainerStatusApplyConfiguration `json:"ephemeralContainerStatuses,omitempty"`
}

// PodStatusApplyConfiguration represents a declarative configuration of the PodStatus type for use
// with apply.
func PodStatus() *PodStatusApplyConfiguration {
	return &PodStatusApplyConfiguration{}
}

// PodStatusList represents a listAlias of PodStatusApplyConfiguration.
type PodStatusList []*PodStatusApplyConfiguration

// PodStatusMap represents a map of PodStatusApplyConfiguration.
type PodStatusMap map[string]PodStatusApplyConfiguration

// PodStatusResultApplyConfiguration represents a declarative configuration of the PodStatusResult type for use
// with apply.
type PodStatusResultApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Status                               *PodStatusApplyConfiguration `json:"status,omitempty"`
}

// PodStatusResultApplyConfiguration represents a declarative configuration of the PodStatusResult type for use
// with apply.
func PodStatusResult() *PodStatusResultApplyConfiguration {
	return &PodStatusResultApplyConfiguration{}
}

// PodStatusResultList represents a listAlias of PodStatusResultApplyConfiguration.
type PodStatusResultList []*PodStatusResultApplyConfiguration

// PodStatusResultMap represents a map of PodStatusResultApplyConfiguration.
type PodStatusResultMap map[string]PodStatusResultApplyConfiguration

// PodTemplateApplyConfiguration represents a declarative configuration of the PodTemplate type for use
// with apply.
type PodTemplateApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Template                             *PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
}

// PodTemplateApplyConfiguration represents a declarative configuration of the PodTemplate type for use
// with apply.
func PodTemplate() *PodTemplateApplyConfiguration {
	return &PodTemplateApplyConfiguration{}
}

// PodTemplateList represents a listAlias of PodTemplateApplyConfiguration.
type PodTemplateList []*PodTemplateApplyConfiguration

// PodTemplateMap represents a map of PodTemplateApplyConfiguration.
type PodTemplateMap map[string]PodTemplateApplyConfiguration

// PodTemplateListApplyConfiguration represents a declarative configuration of the PodTemplateList type for use
// with apply.
type PodTemplateListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]PodTemplateApplyConfiguration `json:"items,omitempty"`
}

// PodTemplateListApplyConfiguration represents a declarative configuration of the PodTemplateList type for use
// with apply.
func PodTemplateList() *PodTemplateListApplyConfiguration {
	return &PodTemplateListApplyConfiguration{}
}

// PodTemplateListList represents a listAlias of PodTemplateListApplyConfiguration.
type PodTemplateListList []*PodTemplateListApplyConfiguration

// PodTemplateListMap represents a map of PodTemplateListApplyConfiguration.
type PodTemplateListMap map[string]PodTemplateListApplyConfiguration

// PodTemplateSpecApplyConfiguration represents a declarative configuration of the PodTemplateSpec type for use
// with apply.
type PodTemplateSpecApplyConfiguration struct {
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *PodSpecApplyConfiguration `json:"spec,omitempty"`
}

// PodTemplateSpecApplyConfiguration represents a declarative configuration of the PodTemplateSpec type for use
// with apply.
func PodTemplateSpec() *PodTemplateSpecApplyConfiguration {
	return &PodTemplateSpecApplyConfiguration{}
}

// PodTemplateSpecList represents a listAlias of PodTemplateSpecApplyConfiguration.
type PodTemplateSpecList []*PodTemplateSpecApplyConfiguration

// PodTemplateSpecMap represents a map of PodTemplateSpecApplyConfiguration.
type PodTemplateSpecMap map[string]PodTemplateSpecApplyConfiguration

// PortworxVolumeSourceApplyConfiguration represents a declarative configuration of the PortworxVolumeSource type for use
// with apply.
type PortworxVolumeSourceApplyConfiguration struct {
	VolumeID *string `json:"volumeID,omitempty"`
	FSType   *string `json:"fsType,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

// PortworxVolumeSourceApplyConfiguration represents a declarative configuration of the PortworxVolumeSource type for use
// with apply.
func PortworxVolumeSource() *PortworxVolumeSourceApplyConfiguration {
	return &PortworxVolumeSourceApplyConfiguration{}
}

// PortworxVolumeSourceList represents a listAlias of PortworxVolumeSourceApplyConfiguration.
type PortworxVolumeSourceList []*PortworxVolumeSourceApplyConfiguration

// PortworxVolumeSourceMap represents a map of PortworxVolumeSourceApplyConfiguration.
type PortworxVolumeSourceMap map[string]PortworxVolumeSourceApplyConfiguration

// PreconditionsApplyConfiguration represents a declarative configuration of the Preconditions type for use
// with apply.
type PreconditionsApplyConfiguration struct {
	UID *types.UID `json:"uid,omitempty"`
}

// PreconditionsApplyConfiguration represents a declarative configuration of the Preconditions type for use
// with apply.
func Preconditions() *PreconditionsApplyConfiguration {
	return &PreconditionsApplyConfiguration{}
}

// PreconditionsList represents a listAlias of PreconditionsApplyConfiguration.
type PreconditionsList []*PreconditionsApplyConfiguration

// PreconditionsMap represents a map of PreconditionsApplyConfiguration.
type PreconditionsMap map[string]PreconditionsApplyConfiguration

// PreferAvoidPodsEntryApplyConfiguration represents a declarative configuration of the PreferAvoidPodsEntry type for use
// with apply.
type PreferAvoidPodsEntryApplyConfiguration struct {
	PodSignature *PodSignatureApplyConfiguration `json:"podSignature,omitempty"`
	EvictionTime *apismetav1.Time                `json:"evictionTime,omitempty"`
	Reason       *string                         `json:"reason,omitempty"`
	Message      *string                         `json:"message,omitempty"`
}

// PreferAvoidPodsEntryApplyConfiguration represents a declarative configuration of the PreferAvoidPodsEntry type for use
// with apply.
func PreferAvoidPodsEntry() *PreferAvoidPodsEntryApplyConfiguration {
	return &PreferAvoidPodsEntryApplyConfiguration{}
}

// PreferAvoidPodsEntryList represents a listAlias of PreferAvoidPodsEntryApplyConfiguration.
type PreferAvoidPodsEntryList []*PreferAvoidPodsEntryApplyConfiguration

// PreferAvoidPodsEntryMap represents a map of PreferAvoidPodsEntryApplyConfiguration.
type PreferAvoidPodsEntryMap map[string]PreferAvoidPodsEntryApplyConfiguration

// PreferredSchedulingTermApplyConfiguration represents a declarative configuration of the PreferredSchedulingTerm type for use
// with apply.
type PreferredSchedulingTermApplyConfiguration struct {
	Weight     *int32                              `json:"weight,omitempty"`
	Preference *NodeSelectorTermApplyConfiguration `json:"preference,omitempty"`
}

// PreferredSchedulingTermApplyConfiguration represents a declarative configuration of the PreferredSchedulingTerm type for use
// with apply.
func PreferredSchedulingTerm() *PreferredSchedulingTermApplyConfiguration {
	return &PreferredSchedulingTermApplyConfiguration{}
}

// PreferredSchedulingTermList represents a listAlias of PreferredSchedulingTermApplyConfiguration.
type PreferredSchedulingTermList []*PreferredSchedulingTermApplyConfiguration

// PreferredSchedulingTermMap represents a map of PreferredSchedulingTermApplyConfiguration.
type PreferredSchedulingTermMap map[string]PreferredSchedulingTermApplyConfiguration

// ProbeApplyConfiguration represents a declarative configuration of the Probe type for use
// with apply.
type ProbeApplyConfiguration struct {
	HandlerApplyConfiguration `json:",inline"`
	InitialDelaySeconds       *int32 `json:"initialDelaySeconds,omitempty"`
	TimeoutSeconds            *int32 `json:"timeoutSeconds,omitempty"`
	PeriodSeconds             *int32 `json:"periodSeconds,omitempty"`
	SuccessThreshold          *int32 `json:"successThreshold,omitempty"`
	FailureThreshold          *int32 `json:"failureThreshold,omitempty"`
}

// ProbeApplyConfiguration represents a declarative configuration of the Probe type for use
// with apply.
func Probe() *ProbeApplyConfiguration {
	return &ProbeApplyConfiguration{}
}

// ProbeList represents a listAlias of ProbeApplyConfiguration.
type ProbeList []*ProbeApplyConfiguration

// ProbeMap represents a map of ProbeApplyConfiguration.
type ProbeMap map[string]ProbeApplyConfiguration

// ProjectedVolumeSourceApplyConfiguration represents a declarative configuration of the ProjectedVolumeSource type for use
// with apply.
type ProjectedVolumeSourceApplyConfiguration struct {
	Sources     *[]VolumeProjectionApplyConfiguration `json:"sources,omitempty"`
	DefaultMode *int32                                `json:"defaultMode,omitempty"`
}

// ProjectedVolumeSourceApplyConfiguration represents a declarative configuration of the ProjectedVolumeSource type for use
// with apply.
func ProjectedVolumeSource() *ProjectedVolumeSourceApplyConfiguration {
	return &ProjectedVolumeSourceApplyConfiguration{}
}

// ProjectedVolumeSourceList represents a listAlias of ProjectedVolumeSourceApplyConfiguration.
type ProjectedVolumeSourceList []*ProjectedVolumeSourceApplyConfiguration

// ProjectedVolumeSourceMap represents a map of ProjectedVolumeSourceApplyConfiguration.
type ProjectedVolumeSourceMap map[string]ProjectedVolumeSourceApplyConfiguration

// QuobyteVolumeSourceApplyConfiguration represents a declarative configuration of the QuobyteVolumeSource type for use
// with apply.
type QuobyteVolumeSourceApplyConfiguration struct {
	Registry *string `json:"registry,omitempty"`
	Volume   *string `json:"volume,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
	User     *string `json:"user,omitempty"`
	Group    *string `json:"group,omitempty"`
	Tenant   *string `json:"tenant,omitempty"`
}

// QuobyteVolumeSourceApplyConfiguration represents a declarative configuration of the QuobyteVolumeSource type for use
// with apply.
func QuobyteVolumeSource() *QuobyteVolumeSourceApplyConfiguration {
	return &QuobyteVolumeSourceApplyConfiguration{}
}

// QuobyteVolumeSourceList represents a listAlias of QuobyteVolumeSourceApplyConfiguration.
type QuobyteVolumeSourceList []*QuobyteVolumeSourceApplyConfiguration

// QuobyteVolumeSourceMap represents a map of QuobyteVolumeSourceApplyConfiguration.
type QuobyteVolumeSourceMap map[string]QuobyteVolumeSourceApplyConfiguration

// RBDPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the RBDPersistentVolumeSource type for use
// with apply.
type RBDPersistentVolumeSourceApplyConfiguration struct {
	CephMonitors *[]string                          `json:"monitors,omitempty"`
	RBDImage     *string                            `json:"image,omitempty"`
	FSType       *string                            `json:"fsType,omitempty"`
	RBDPool      *string                            `json:"pool,omitempty"`
	RadosUser    *string                            `json:"user,omitempty"`
	Keyring      *string                            `json:"keyring,omitempty"`
	SecretRef    *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly     *bool                              `json:"readOnly,omitempty"`
}

// RBDPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the RBDPersistentVolumeSource type for use
// with apply.
func RBDPersistentVolumeSource() *RBDPersistentVolumeSourceApplyConfiguration {
	return &RBDPersistentVolumeSourceApplyConfiguration{}
}

// RBDPersistentVolumeSourceList represents a listAlias of RBDPersistentVolumeSourceApplyConfiguration.
type RBDPersistentVolumeSourceList []*RBDPersistentVolumeSourceApplyConfiguration

// RBDPersistentVolumeSourceMap represents a map of RBDPersistentVolumeSourceApplyConfiguration.
type RBDPersistentVolumeSourceMap map[string]RBDPersistentVolumeSourceApplyConfiguration

// RBDVolumeSourceApplyConfiguration represents a declarative configuration of the RBDVolumeSource type for use
// with apply.
type RBDVolumeSourceApplyConfiguration struct {
	CephMonitors *[]string                               `json:"monitors,omitempty"`
	RBDImage     *string                                 `json:"image,omitempty"`
	FSType       *string                                 `json:"fsType,omitempty"`
	RBDPool      *string                                 `json:"pool,omitempty"`
	RadosUser    *string                                 `json:"user,omitempty"`
	Keyring      *string                                 `json:"keyring,omitempty"`
	SecretRef    *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly     *bool                                   `json:"readOnly,omitempty"`
}

// RBDVolumeSourceApplyConfiguration represents a declarative configuration of the RBDVolumeSource type for use
// with apply.
func RBDVolumeSource() *RBDVolumeSourceApplyConfiguration {
	return &RBDVolumeSourceApplyConfiguration{}
}

// RBDVolumeSourceList represents a listAlias of RBDVolumeSourceApplyConfiguration.
type RBDVolumeSourceList []*RBDVolumeSourceApplyConfiguration

// RBDVolumeSourceMap represents a map of RBDVolumeSourceApplyConfiguration.
type RBDVolumeSourceMap map[string]RBDVolumeSourceApplyConfiguration

// RangeAllocationApplyConfiguration represents a declarative configuration of the RangeAllocation type for use
// with apply.
type RangeAllocationApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Range                                *string `json:"range,omitempty"`
	Data                                 *[]byte `json:"data,omitempty"`
}

// RangeAllocationApplyConfiguration represents a declarative configuration of the RangeAllocation type for use
// with apply.
func RangeAllocation() *RangeAllocationApplyConfiguration {
	return &RangeAllocationApplyConfiguration{}
}

// RangeAllocationList represents a listAlias of RangeAllocationApplyConfiguration.
type RangeAllocationList []*RangeAllocationApplyConfiguration

// RangeAllocationMap represents a map of RangeAllocationApplyConfiguration.
type RangeAllocationMap map[string]RangeAllocationApplyConfiguration

// ReplicationControllerApplyConfiguration represents a declarative configuration of the ReplicationController type for use
// with apply.
type ReplicationControllerApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *ReplicationControllerSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *ReplicationControllerStatusApplyConfiguration `json:"status,omitempty"`
}

// ReplicationControllerApplyConfiguration represents a declarative configuration of the ReplicationController type for use
// with apply.
func ReplicationController() *ReplicationControllerApplyConfiguration {
	return &ReplicationControllerApplyConfiguration{}
}

// ReplicationControllerList represents a listAlias of ReplicationControllerApplyConfiguration.
type ReplicationControllerList []*ReplicationControllerApplyConfiguration

// ReplicationControllerMap represents a map of ReplicationControllerApplyConfiguration.
type ReplicationControllerMap map[string]ReplicationControllerApplyConfiguration

// ReplicationControllerConditionApplyConfiguration represents a declarative configuration of the ReplicationControllerCondition type for use
// with apply.
type ReplicationControllerConditionApplyConfiguration struct {
	Type               *corev1.ReplicationControllerConditionType `json:"type,omitempty"`
	Status             *corev1.ConditionStatus                    `json:"status,omitempty"`
	LastTransitionTime *apismetav1.Time                           `json:"lastTransitionTime,omitempty"`
	Reason             *string                                    `json:"reason,omitempty"`
	Message            *string                                    `json:"message,omitempty"`
}

// ReplicationControllerConditionApplyConfiguration represents a declarative configuration of the ReplicationControllerCondition type for use
// with apply.
func ReplicationControllerCondition() *ReplicationControllerConditionApplyConfiguration {
	return &ReplicationControllerConditionApplyConfiguration{}
}

// ReplicationControllerConditionList represents a listAlias of ReplicationControllerConditionApplyConfiguration.
type ReplicationControllerConditionList []*ReplicationControllerConditionApplyConfiguration

// ReplicationControllerConditionMap represents a map of ReplicationControllerConditionApplyConfiguration.
type ReplicationControllerConditionMap map[string]ReplicationControllerConditionApplyConfiguration

// ReplicationControllerListApplyConfiguration represents a declarative configuration of the ReplicationControllerList type for use
// with apply.
type ReplicationControllerListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ReplicationControllerApplyConfiguration `json:"items,omitempty"`
}

// ReplicationControllerListApplyConfiguration represents a declarative configuration of the ReplicationControllerList type for use
// with apply.
func ReplicationControllerList() *ReplicationControllerListApplyConfiguration {
	return &ReplicationControllerListApplyConfiguration{}
}

// ReplicationControllerListList represents a listAlias of ReplicationControllerListApplyConfiguration.
type ReplicationControllerListList []*ReplicationControllerListApplyConfiguration

// ReplicationControllerListMap represents a map of ReplicationControllerListApplyConfiguration.
type ReplicationControllerListMap map[string]ReplicationControllerListApplyConfiguration

// ReplicationControllerSpecApplyConfiguration represents a declarative configuration of the ReplicationControllerSpec type for use
// with apply.
type ReplicationControllerSpecApplyConfiguration struct {
	Replicas        *int32                             `json:"replicas,omitempty"`
	MinReadySeconds *int32                             `json:"minReadySeconds,omitempty"`
	Selector        *map[string]string                 `json:"selector,omitempty"`
	Template        *PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
}

// ReplicationControllerSpecApplyConfiguration represents a declarative configuration of the ReplicationControllerSpec type for use
// with apply.
func ReplicationControllerSpec() *ReplicationControllerSpecApplyConfiguration {
	return &ReplicationControllerSpecApplyConfiguration{}
}

// ReplicationControllerSpecList represents a listAlias of ReplicationControllerSpecApplyConfiguration.
type ReplicationControllerSpecList []*ReplicationControllerSpecApplyConfiguration

// ReplicationControllerSpecMap represents a map of ReplicationControllerSpecApplyConfiguration.
type ReplicationControllerSpecMap map[string]ReplicationControllerSpecApplyConfiguration

// ReplicationControllerStatusApplyConfiguration represents a declarative configuration of the ReplicationControllerStatus type for use
// with apply.
type ReplicationControllerStatusApplyConfiguration struct {
	Replicas             *int32                                              `json:"replicas,omitempty"`
	FullyLabeledReplicas *int32                                              `json:"fullyLabeledReplicas,omitempty"`
	ReadyReplicas        *int32                                              `json:"readyReplicas,omitempty"`
	AvailableReplicas    *int32                                              `json:"availableReplicas,omitempty"`
	ObservedGeneration   *int64                                              `json:"observedGeneration,omitempty"`
	Conditions           *[]ReplicationControllerConditionApplyConfiguration `json:"conditions,omitempty"`
}

// ReplicationControllerStatusApplyConfiguration represents a declarative configuration of the ReplicationControllerStatus type for use
// with apply.
func ReplicationControllerStatus() *ReplicationControllerStatusApplyConfiguration {
	return &ReplicationControllerStatusApplyConfiguration{}
}

// ReplicationControllerStatusList represents a listAlias of ReplicationControllerStatusApplyConfiguration.
type ReplicationControllerStatusList []*ReplicationControllerStatusApplyConfiguration

// ReplicationControllerStatusMap represents a map of ReplicationControllerStatusApplyConfiguration.
type ReplicationControllerStatusMap map[string]ReplicationControllerStatusApplyConfiguration

// ResourceFieldSelectorApplyConfiguration represents a declarative configuration of the ResourceFieldSelector type for use
// with apply.
type ResourceFieldSelectorApplyConfiguration struct {
	ContainerName *string            `json:"containerName,omitempty"`
	Resource      *string            `json:"resource,omitempty"`
	Divisor       *resource.Quantity `json:"divisor,omitempty"`
}

// ResourceFieldSelectorApplyConfiguration represents a declarative configuration of the ResourceFieldSelector type for use
// with apply.
func ResourceFieldSelector() *ResourceFieldSelectorApplyConfiguration {
	return &ResourceFieldSelectorApplyConfiguration{}
}

// ResourceFieldSelectorList represents a listAlias of ResourceFieldSelectorApplyConfiguration.
type ResourceFieldSelectorList []*ResourceFieldSelectorApplyConfiguration

// ResourceFieldSelectorMap represents a map of ResourceFieldSelectorApplyConfiguration.
type ResourceFieldSelectorMap map[string]ResourceFieldSelectorApplyConfiguration

// ResourceQuotaApplyConfiguration represents a declarative configuration of the ResourceQuota type for use
// with apply.
type ResourceQuotaApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *ResourceQuotaSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *ResourceQuotaStatusApplyConfiguration `json:"status,omitempty"`
}

// ResourceQuotaApplyConfiguration represents a declarative configuration of the ResourceQuota type for use
// with apply.
func ResourceQuota() *ResourceQuotaApplyConfiguration {
	return &ResourceQuotaApplyConfiguration{}
}

// ResourceQuotaList represents a listAlias of ResourceQuotaApplyConfiguration.
type ResourceQuotaList []*ResourceQuotaApplyConfiguration

// ResourceQuotaMap represents a map of ResourceQuotaApplyConfiguration.
type ResourceQuotaMap map[string]ResourceQuotaApplyConfiguration

// ResourceQuotaListApplyConfiguration represents a declarative configuration of the ResourceQuotaList type for use
// with apply.
type ResourceQuotaListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ResourceQuotaApplyConfiguration `json:"items,omitempty"`
}

// ResourceQuotaListApplyConfiguration represents a declarative configuration of the ResourceQuotaList type for use
// with apply.
func ResourceQuotaList() *ResourceQuotaListApplyConfiguration {
	return &ResourceQuotaListApplyConfiguration{}
}

// ResourceQuotaListList represents a listAlias of ResourceQuotaListApplyConfiguration.
type ResourceQuotaListList []*ResourceQuotaListApplyConfiguration

// ResourceQuotaListMap represents a map of ResourceQuotaListApplyConfiguration.
type ResourceQuotaListMap map[string]ResourceQuotaListApplyConfiguration

// ResourceQuotaSpecApplyConfiguration represents a declarative configuration of the ResourceQuotaSpec type for use
// with apply.
type ResourceQuotaSpecApplyConfiguration struct {
	Hard          *corev1.ResourceList             `json:"hard,omitempty"`
	Scopes        *[]corev1.ResourceQuotaScope     `json:"scopes,omitempty"`
	ScopeSelector *ScopeSelectorApplyConfiguration `json:"scopeSelector,omitempty"`
}

// ResourceQuotaSpecApplyConfiguration represents a declarative configuration of the ResourceQuotaSpec type for use
// with apply.
func ResourceQuotaSpec() *ResourceQuotaSpecApplyConfiguration {
	return &ResourceQuotaSpecApplyConfiguration{}
}

// ResourceQuotaSpecList represents a listAlias of ResourceQuotaSpecApplyConfiguration.
type ResourceQuotaSpecList []*ResourceQuotaSpecApplyConfiguration

// ResourceQuotaSpecMap represents a map of ResourceQuotaSpecApplyConfiguration.
type ResourceQuotaSpecMap map[string]ResourceQuotaSpecApplyConfiguration

// ResourceQuotaStatusApplyConfiguration represents a declarative configuration of the ResourceQuotaStatus type for use
// with apply.
type ResourceQuotaStatusApplyConfiguration struct {
	Hard *corev1.ResourceList `json:"hard,omitempty"`
	Used *corev1.ResourceList `json:"used,omitempty"`
}

// ResourceQuotaStatusApplyConfiguration represents a declarative configuration of the ResourceQuotaStatus type for use
// with apply.
func ResourceQuotaStatus() *ResourceQuotaStatusApplyConfiguration {
	return &ResourceQuotaStatusApplyConfiguration{}
}

// ResourceQuotaStatusList represents a listAlias of ResourceQuotaStatusApplyConfiguration.
type ResourceQuotaStatusList []*ResourceQuotaStatusApplyConfiguration

// ResourceQuotaStatusMap represents a map of ResourceQuotaStatusApplyConfiguration.
type ResourceQuotaStatusMap map[string]ResourceQuotaStatusApplyConfiguration

// ResourceRequirementsApplyConfiguration represents a declarative configuration of the ResourceRequirements type for use
// with apply.
type ResourceRequirementsApplyConfiguration struct {
	Limits   *corev1.ResourceList `json:"limits,omitempty"`
	Requests *corev1.ResourceList `json:"requests,omitempty"`
}

// ResourceRequirementsApplyConfiguration represents a declarative configuration of the ResourceRequirements type for use
// with apply.
func ResourceRequirements() *ResourceRequirementsApplyConfiguration {
	return &ResourceRequirementsApplyConfiguration{}
}

// ResourceRequirementsList represents a listAlias of ResourceRequirementsApplyConfiguration.
type ResourceRequirementsList []*ResourceRequirementsApplyConfiguration

// ResourceRequirementsMap represents a map of ResourceRequirementsApplyConfiguration.
type ResourceRequirementsMap map[string]ResourceRequirementsApplyConfiguration

// SELinuxOptionsApplyConfiguration represents a declarative configuration of the SELinuxOptions type for use
// with apply.
type SELinuxOptionsApplyConfiguration struct {
	User  *string `json:"user,omitempty"`
	Role  *string `json:"role,omitempty"`
	Type  *string `json:"type,omitempty"`
	Level *string `json:"level,omitempty"`
}

// SELinuxOptionsApplyConfiguration represents a declarative configuration of the SELinuxOptions type for use
// with apply.
func SELinuxOptions() *SELinuxOptionsApplyConfiguration {
	return &SELinuxOptionsApplyConfiguration{}
}

// SELinuxOptionsList represents a listAlias of SELinuxOptionsApplyConfiguration.
type SELinuxOptionsList []*SELinuxOptionsApplyConfiguration

// SELinuxOptionsMap represents a map of SELinuxOptionsApplyConfiguration.
type SELinuxOptionsMap map[string]SELinuxOptionsApplyConfiguration

// ScaleIOPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOPersistentVolumeSource type for use
// with apply.
type ScaleIOPersistentVolumeSourceApplyConfiguration struct {
	Gateway          *string                            `json:"gateway,omitempty"`
	System           *string                            `json:"system,omitempty"`
	SecretRef        *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	SSLEnabled       *bool                              `json:"sslEnabled,omitempty"`
	ProtectionDomain *string                            `json:"protectionDomain,omitempty"`
	StoragePool      *string                            `json:"storagePool,omitempty"`
	StorageMode      *string                            `json:"storageMode,omitempty"`
	VolumeName       *string                            `json:"volumeName,omitempty"`
	FSType           *string                            `json:"fsType,omitempty"`
	ReadOnly         *bool                              `json:"readOnly,omitempty"`
}

// ScaleIOPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOPersistentVolumeSource type for use
// with apply.
func ScaleIOPersistentVolumeSource() *ScaleIOPersistentVolumeSourceApplyConfiguration {
	return &ScaleIOPersistentVolumeSourceApplyConfiguration{}
}

// ScaleIOPersistentVolumeSourceList represents a listAlias of ScaleIOPersistentVolumeSourceApplyConfiguration.
type ScaleIOPersistentVolumeSourceList []*ScaleIOPersistentVolumeSourceApplyConfiguration

// ScaleIOPersistentVolumeSourceMap represents a map of ScaleIOPersistentVolumeSourceApplyConfiguration.
type ScaleIOPersistentVolumeSourceMap map[string]ScaleIOPersistentVolumeSourceApplyConfiguration

// ScaleIOVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOVolumeSource type for use
// with apply.
type ScaleIOVolumeSourceApplyConfiguration struct {
	Gateway          *string                                 `json:"gateway,omitempty"`
	System           *string                                 `json:"system,omitempty"`
	SecretRef        *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
	SSLEnabled       *bool                                   `json:"sslEnabled,omitempty"`
	ProtectionDomain *string                                 `json:"protectionDomain,omitempty"`
	StoragePool      *string                                 `json:"storagePool,omitempty"`
	StorageMode      *string                                 `json:"storageMode,omitempty"`
	VolumeName       *string                                 `json:"volumeName,omitempty"`
	FSType           *string                                 `json:"fsType,omitempty"`
	ReadOnly         *bool                                   `json:"readOnly,omitempty"`
}

// ScaleIOVolumeSourceApplyConfiguration represents a declarative configuration of the ScaleIOVolumeSource type for use
// with apply.
func ScaleIOVolumeSource() *ScaleIOVolumeSourceApplyConfiguration {
	return &ScaleIOVolumeSourceApplyConfiguration{}
}

// ScaleIOVolumeSourceList represents a listAlias of ScaleIOVolumeSourceApplyConfiguration.
type ScaleIOVolumeSourceList []*ScaleIOVolumeSourceApplyConfiguration

// ScaleIOVolumeSourceMap represents a map of ScaleIOVolumeSourceApplyConfiguration.
type ScaleIOVolumeSourceMap map[string]ScaleIOVolumeSourceApplyConfiguration

// ScopeSelectorApplyConfiguration represents a declarative configuration of the ScopeSelector type for use
// with apply.
type ScopeSelectorApplyConfiguration struct {
	MatchExpressions *[]ScopedResourceSelectorRequirementApplyConfiguration `json:"matchExpressions,omitempty"`
}

// ScopeSelectorApplyConfiguration represents a declarative configuration of the ScopeSelector type for use
// with apply.
func ScopeSelector() *ScopeSelectorApplyConfiguration {
	return &ScopeSelectorApplyConfiguration{}
}

// ScopeSelectorList represents a listAlias of ScopeSelectorApplyConfiguration.
type ScopeSelectorList []*ScopeSelectorApplyConfiguration

// ScopeSelectorMap represents a map of ScopeSelectorApplyConfiguration.
type ScopeSelectorMap map[string]ScopeSelectorApplyConfiguration

// ScopedResourceSelectorRequirementApplyConfiguration represents a declarative configuration of the ScopedResourceSelectorRequirement type for use
// with apply.
type ScopedResourceSelectorRequirementApplyConfiguration struct {
	ScopeName *corev1.ResourceQuotaScope    `json:"scopeName,omitempty"`
	Operator  *corev1.ScopeSelectorOperator `json:"operator,omitempty"`
	Values    *[]string                     `json:"values,omitempty"`
}

// ScopedResourceSelectorRequirementApplyConfiguration represents a declarative configuration of the ScopedResourceSelectorRequirement type for use
// with apply.
func ScopedResourceSelectorRequirement() *ScopedResourceSelectorRequirementApplyConfiguration {
	return &ScopedResourceSelectorRequirementApplyConfiguration{}
}

// ScopedResourceSelectorRequirementList represents a listAlias of ScopedResourceSelectorRequirementApplyConfiguration.
type ScopedResourceSelectorRequirementList []*ScopedResourceSelectorRequirementApplyConfiguration

// ScopedResourceSelectorRequirementMap represents a map of ScopedResourceSelectorRequirementApplyConfiguration.
type ScopedResourceSelectorRequirementMap map[string]ScopedResourceSelectorRequirementApplyConfiguration

// SecretApplyConfiguration represents a declarative configuration of the Secret type for use
// with apply.
type SecretApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Immutable                            *bool              `json:"immutable,omitempty"`
	Data                                 *map[string][]byte `json:"data,omitempty"`
	StringData                           *map[string]string `json:"stringData,omitempty"`
	Type                                 *corev1.SecretType `json:"type,omitempty"`
}

// SecretApplyConfiguration represents a declarative configuration of the Secret type for use
// with apply.
func Secret() *SecretApplyConfiguration {
	return &SecretApplyConfiguration{}
}

// SecretList represents a listAlias of SecretApplyConfiguration.
type SecretList []*SecretApplyConfiguration

// SecretMap represents a map of SecretApplyConfiguration.
type SecretMap map[string]SecretApplyConfiguration

// SecretEnvSourceApplyConfiguration represents a declarative configuration of the SecretEnvSource type for use
// with apply.
type SecretEnvSourceApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Optional                               *bool `json:"optional,omitempty"`
}

// SecretEnvSourceApplyConfiguration represents a declarative configuration of the SecretEnvSource type for use
// with apply.
func SecretEnvSource() *SecretEnvSourceApplyConfiguration {
	return &SecretEnvSourceApplyConfiguration{}
}

// SecretEnvSourceList represents a listAlias of SecretEnvSourceApplyConfiguration.
type SecretEnvSourceList []*SecretEnvSourceApplyConfiguration

// SecretEnvSourceMap represents a map of SecretEnvSourceApplyConfiguration.
type SecretEnvSourceMap map[string]SecretEnvSourceApplyConfiguration

// SecretKeySelectorApplyConfiguration represents a declarative configuration of the SecretKeySelector type for use
// with apply.
type SecretKeySelectorApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Key                                    *string `json:"key,omitempty"`
	Optional                               *bool   `json:"optional,omitempty"`
}

// SecretKeySelectorApplyConfiguration represents a declarative configuration of the SecretKeySelector type for use
// with apply.
func SecretKeySelector() *SecretKeySelectorApplyConfiguration {
	return &SecretKeySelectorApplyConfiguration{}
}

// SecretKeySelectorList represents a listAlias of SecretKeySelectorApplyConfiguration.
type SecretKeySelectorList []*SecretKeySelectorApplyConfiguration

// SecretKeySelectorMap represents a map of SecretKeySelectorApplyConfiguration.
type SecretKeySelectorMap map[string]SecretKeySelectorApplyConfiguration

// SecretListApplyConfiguration represents a declarative configuration of the SecretList type for use
// with apply.
type SecretListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]SecretApplyConfiguration `json:"items,omitempty"`
}

// SecretListApplyConfiguration represents a declarative configuration of the SecretList type for use
// with apply.
func SecretList() *SecretListApplyConfiguration {
	return &SecretListApplyConfiguration{}
}

// SecretListList represents a listAlias of SecretListApplyConfiguration.
type SecretListList []*SecretListApplyConfiguration

// SecretListMap represents a map of SecretListApplyConfiguration.
type SecretListMap map[string]SecretListApplyConfiguration

// SecretProjectionApplyConfiguration represents a declarative configuration of the SecretProjection type for use
// with apply.
type SecretProjectionApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Items                                  *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	Optional                               *bool                          `json:"optional,omitempty"`
}

// SecretProjectionApplyConfiguration represents a declarative configuration of the SecretProjection type for use
// with apply.
func SecretProjection() *SecretProjectionApplyConfiguration {
	return &SecretProjectionApplyConfiguration{}
}

// SecretProjectionList represents a listAlias of SecretProjectionApplyConfiguration.
type SecretProjectionList []*SecretProjectionApplyConfiguration

// SecretProjectionMap represents a map of SecretProjectionApplyConfiguration.
type SecretProjectionMap map[string]SecretProjectionApplyConfiguration

// SecretReferenceApplyConfiguration represents a declarative configuration of the SecretReference type for use
// with apply.
type SecretReferenceApplyConfiguration struct {
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// SecretReferenceApplyConfiguration represents a declarative configuration of the SecretReference type for use
// with apply.
func SecretReference() *SecretReferenceApplyConfiguration {
	return &SecretReferenceApplyConfiguration{}
}

// SecretReferenceList represents a listAlias of SecretReferenceApplyConfiguration.
type SecretReferenceList []*SecretReferenceApplyConfiguration

// SecretReferenceMap represents a map of SecretReferenceApplyConfiguration.
type SecretReferenceMap map[string]SecretReferenceApplyConfiguration

// SecretVolumeSourceApplyConfiguration represents a declarative configuration of the SecretVolumeSource type for use
// with apply.
type SecretVolumeSourceApplyConfiguration struct {
	SecretName  *string                        `json:"secretName,omitempty"`
	Items       *[]KeyToPathApplyConfiguration `json:"items,omitempty"`
	DefaultMode *int32                         `json:"defaultMode,omitempty"`
	Optional    *bool                          `json:"optional,omitempty"`
}

// SecretVolumeSourceApplyConfiguration represents a declarative configuration of the SecretVolumeSource type for use
// with apply.
func SecretVolumeSource() *SecretVolumeSourceApplyConfiguration {
	return &SecretVolumeSourceApplyConfiguration{}
}

// SecretVolumeSourceList represents a listAlias of SecretVolumeSourceApplyConfiguration.
type SecretVolumeSourceList []*SecretVolumeSourceApplyConfiguration

// SecretVolumeSourceMap represents a map of SecretVolumeSourceApplyConfiguration.
type SecretVolumeSourceMap map[string]SecretVolumeSourceApplyConfiguration

// SecurityContextApplyConfiguration represents a declarative configuration of the SecurityContext type for use
// with apply.
type SecurityContextApplyConfiguration struct {
	Capabilities             *CapabilitiesApplyConfiguration                  `json:"capabilities,omitempty"`
	Privileged               *bool                                            `json:"privileged,omitempty"`
	SELinuxOptions           *SELinuxOptionsApplyConfiguration                `json:"seLinuxOptions,omitempty"`
	WindowsOptions           *WindowsSecurityContextOptionsApplyConfiguration `json:"windowsOptions,omitempty"`
	RunAsUser                *int64                                           `json:"runAsUser,omitempty"`
	RunAsGroup               *int64                                           `json:"runAsGroup,omitempty"`
	RunAsNonRoot             *bool                                            `json:"runAsNonRoot,omitempty"`
	ReadOnlyRootFilesystem   *bool                                            `json:"readOnlyRootFilesystem,omitempty"`
	AllowPrivilegeEscalation *bool                                            `json:"allowPrivilegeEscalation,omitempty"`
	ProcMount                *corev1.ProcMountType                            `json:"procMount,omitempty"`
}

// SecurityContextApplyConfiguration represents a declarative configuration of the SecurityContext type for use
// with apply.
func SecurityContext() *SecurityContextApplyConfiguration {
	return &SecurityContextApplyConfiguration{}
}

// SecurityContextList represents a listAlias of SecurityContextApplyConfiguration.
type SecurityContextList []*SecurityContextApplyConfiguration

// SecurityContextMap represents a map of SecurityContextApplyConfiguration.
type SecurityContextMap map[string]SecurityContextApplyConfiguration

// SerializedReferenceApplyConfiguration represents a declarative configuration of the SerializedReference type for use
// with apply.
type SerializedReferenceApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Reference                         *ObjectReferenceApplyConfiguration `json:"reference,omitempty"`
}

// SerializedReferenceApplyConfiguration represents a declarative configuration of the SerializedReference type for use
// with apply.
func SerializedReference() *SerializedReferenceApplyConfiguration {
	return &SerializedReferenceApplyConfiguration{}
}

// SerializedReferenceList represents a listAlias of SerializedReferenceApplyConfiguration.
type SerializedReferenceList []*SerializedReferenceApplyConfiguration

// SerializedReferenceMap represents a map of SerializedReferenceApplyConfiguration.
type SerializedReferenceMap map[string]SerializedReferenceApplyConfiguration

// ServiceApplyConfiguration represents a declarative configuration of the Service type for use
// with apply.
type ServiceApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                 *ServiceSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                               *ServiceStatusApplyConfiguration `json:"status,omitempty"`
}

// ServiceApplyConfiguration represents a declarative configuration of the Service type for use
// with apply.
func Service() *ServiceApplyConfiguration {
	return &ServiceApplyConfiguration{}
}

// ServiceList represents a listAlias of ServiceApplyConfiguration.
type ServiceList []*ServiceApplyConfiguration

// ServiceMap represents a map of ServiceApplyConfiguration.
type ServiceMap map[string]ServiceApplyConfiguration

// ServiceAccountApplyConfiguration represents a declarative configuration of the ServiceAccount type for use
// with apply.
type ServiceAccountApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Secrets                              *[]ObjectReferenceApplyConfiguration      `json:"secrets,omitempty"`
	ImagePullSecrets                     *[]LocalObjectReferenceApplyConfiguration `json:"imagePullSecrets,omitempty"`
	AutomountServiceAccountToken         *bool                                     `json:"automountServiceAccountToken,omitempty"`
}

// ServiceAccountApplyConfiguration represents a declarative configuration of the ServiceAccount type for use
// with apply.
func ServiceAccount() *ServiceAccountApplyConfiguration {
	return &ServiceAccountApplyConfiguration{}
}

// ServiceAccountList represents a listAlias of ServiceAccountApplyConfiguration.
type ServiceAccountList []*ServiceAccountApplyConfiguration

// ServiceAccountMap represents a map of ServiceAccountApplyConfiguration.
type ServiceAccountMap map[string]ServiceAccountApplyConfiguration

// ServiceAccountListApplyConfiguration represents a declarative configuration of the ServiceAccountList type for use
// with apply.
type ServiceAccountListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ServiceAccountApplyConfiguration `json:"items,omitempty"`
}

// ServiceAccountListApplyConfiguration represents a declarative configuration of the ServiceAccountList type for use
// with apply.
func ServiceAccountList() *ServiceAccountListApplyConfiguration {
	return &ServiceAccountListApplyConfiguration{}
}

// ServiceAccountListList represents a listAlias of ServiceAccountListApplyConfiguration.
type ServiceAccountListList []*ServiceAccountListApplyConfiguration

// ServiceAccountListMap represents a map of ServiceAccountListApplyConfiguration.
type ServiceAccountListMap map[string]ServiceAccountListApplyConfiguration

// ServiceAccountTokenProjectionApplyConfiguration represents a declarative configuration of the ServiceAccountTokenProjection type for use
// with apply.
type ServiceAccountTokenProjectionApplyConfiguration struct {
	Audience          *string `json:"audience,omitempty"`
	ExpirationSeconds *int64  `json:"expirationSeconds,omitempty"`
	Path              *string `json:"path,omitempty"`
}

// ServiceAccountTokenProjectionApplyConfiguration represents a declarative configuration of the ServiceAccountTokenProjection type for use
// with apply.
func ServiceAccountTokenProjection() *ServiceAccountTokenProjectionApplyConfiguration {
	return &ServiceAccountTokenProjectionApplyConfiguration{}
}

// ServiceAccountTokenProjectionList represents a listAlias of ServiceAccountTokenProjectionApplyConfiguration.
type ServiceAccountTokenProjectionList []*ServiceAccountTokenProjectionApplyConfiguration

// ServiceAccountTokenProjectionMap represents a map of ServiceAccountTokenProjectionApplyConfiguration.
type ServiceAccountTokenProjectionMap map[string]ServiceAccountTokenProjectionApplyConfiguration

// ServiceListApplyConfiguration represents a declarative configuration of the ServiceList type for use
// with apply.
type ServiceListApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration  `json:",inline"`
	*metav1.ListMetaApplyConfiguration `json:"metadata,omitempty"`
	Items                              *[]ServiceApplyConfiguration `json:"items,omitempty"`
}

// ServiceListApplyConfiguration represents a declarative configuration of the ServiceList type for use
// with apply.
func ServiceList() *ServiceListApplyConfiguration {
	return &ServiceListApplyConfiguration{}
}

// ServiceListList represents a listAlias of ServiceListApplyConfiguration.
type ServiceListList []*ServiceListApplyConfiguration

// ServiceListMap represents a map of ServiceListApplyConfiguration.
type ServiceListMap map[string]ServiceListApplyConfiguration

// ServicePortApplyConfiguration represents a declarative configuration of the ServicePort type for use
// with apply.
type ServicePortApplyConfiguration struct {
	Name        *string             `json:"name,omitempty"`
	Protocol    *corev1.Protocol    `json:"protocol,omitempty"`
	AppProtocol *string             `json:"appProtocol,omitempty"`
	Port        *int32              `json:"port,omitempty"`
	TargetPort  *intstr.IntOrString `json:"targetPort,omitempty"`
	NodePort    *int32              `json:"nodePort,omitempty"`
}

// ServicePortApplyConfiguration represents a declarative configuration of the ServicePort type for use
// with apply.
func ServicePort() *ServicePortApplyConfiguration {
	return &ServicePortApplyConfiguration{}
}

// ServicePortList represents a listAlias of ServicePortApplyConfiguration.
type ServicePortList []*ServicePortApplyConfiguration

// ServicePortMap represents a map of ServicePortApplyConfiguration.
type ServicePortMap map[string]ServicePortApplyConfiguration

// ServiceProxyOptionsApplyConfiguration represents a declarative configuration of the ServiceProxyOptions type for use
// with apply.
type ServiceProxyOptionsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Path                              *string `json:"path,omitempty"`
}

// ServiceProxyOptionsApplyConfiguration represents a declarative configuration of the ServiceProxyOptions type for use
// with apply.
func ServiceProxyOptions() *ServiceProxyOptionsApplyConfiguration {
	return &ServiceProxyOptionsApplyConfiguration{}
}

// ServiceProxyOptionsList represents a listAlias of ServiceProxyOptionsApplyConfiguration.
type ServiceProxyOptionsList []*ServiceProxyOptionsApplyConfiguration

// ServiceProxyOptionsMap represents a map of ServiceProxyOptionsApplyConfiguration.
type ServiceProxyOptionsMap map[string]ServiceProxyOptionsApplyConfiguration

// ServiceSpecApplyConfiguration represents a declarative configuration of the ServiceSpec type for use
// with apply.
type ServiceSpecApplyConfiguration struct {
	Ports                    *[]ServicePortApplyConfiguration         `json:"ports,omitempty"`
	Selector                 *map[string]string                       `json:"selector,omitempty"`
	ClusterIP                *string                                  `json:"clusterIP,omitempty"`
	Type                     *corev1.ServiceType                      `json:"type,omitempty"`
	ExternalIPs              *[]string                                `json:"externalIPs,omitempty"`
	SessionAffinity          *corev1.ServiceAffinity                  `json:"sessionAffinity,omitempty"`
	LoadBalancerIP           *string                                  `json:"loadBalancerIP,omitempty"`
	LoadBalancerSourceRanges *[]string                                `json:"loadBalancerSourceRanges,omitempty"`
	ExternalName             *string                                  `json:"externalName,omitempty"`
	ExternalTrafficPolicy    *corev1.ServiceExternalTrafficPolicyType `json:"externalTrafficPolicy,omitempty"`
	HealthCheckNodePort      *int32                                   `json:"healthCheckNodePort,omitempty"`
	PublishNotReadyAddresses *bool                                    `json:"publishNotReadyAddresses,omitempty"`
	SessionAffinityConfig    *SessionAffinityConfigApplyConfiguration `json:"sessionAffinityConfig,omitempty"`
	IPFamily                 *corev1.IPFamily                         `json:"ipFamily,omitempty"`
	TopologyKeys             *[]string                                `json:"topologyKeys,omitempty"`
}

// ServiceSpecApplyConfiguration represents a declarative configuration of the ServiceSpec type for use
// with apply.
func ServiceSpec() *ServiceSpecApplyConfiguration {
	return &ServiceSpecApplyConfiguration{}
}

// ServiceSpecList represents a listAlias of ServiceSpecApplyConfiguration.
type ServiceSpecList []*ServiceSpecApplyConfiguration

// ServiceSpecMap represents a map of ServiceSpecApplyConfiguration.
type ServiceSpecMap map[string]ServiceSpecApplyConfiguration

// ServiceStatusApplyConfiguration represents a declarative configuration of the ServiceStatus type for use
// with apply.
type ServiceStatusApplyConfiguration struct {
	LoadBalancer *LoadBalancerStatusApplyConfiguration `json:"loadBalancer,omitempty"`
}

// ServiceStatusApplyConfiguration represents a declarative configuration of the ServiceStatus type for use
// with apply.
func ServiceStatus() *ServiceStatusApplyConfiguration {
	return &ServiceStatusApplyConfiguration{}
}

// ServiceStatusList represents a listAlias of ServiceStatusApplyConfiguration.
type ServiceStatusList []*ServiceStatusApplyConfiguration

// ServiceStatusMap represents a map of ServiceStatusApplyConfiguration.
type ServiceStatusMap map[string]ServiceStatusApplyConfiguration

// SessionAffinityConfigApplyConfiguration represents a declarative configuration of the SessionAffinityConfig type for use
// with apply.
type SessionAffinityConfigApplyConfiguration struct {
	ClientIP *ClientIPConfigApplyConfiguration `json:"clientIP,omitempty"`
}

// SessionAffinityConfigApplyConfiguration represents a declarative configuration of the SessionAffinityConfig type for use
// with apply.
func SessionAffinityConfig() *SessionAffinityConfigApplyConfiguration {
	return &SessionAffinityConfigApplyConfiguration{}
}

// SessionAffinityConfigList represents a listAlias of SessionAffinityConfigApplyConfiguration.
type SessionAffinityConfigList []*SessionAffinityConfigApplyConfiguration

// SessionAffinityConfigMap represents a map of SessionAffinityConfigApplyConfiguration.
type SessionAffinityConfigMap map[string]SessionAffinityConfigApplyConfiguration

// StorageOSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSPersistentVolumeSource type for use
// with apply.
type StorageOSPersistentVolumeSourceApplyConfiguration struct {
	VolumeName      *string                            `json:"volumeName,omitempty"`
	VolumeNamespace *string                            `json:"volumeNamespace,omitempty"`
	FSType          *string                            `json:"fsType,omitempty"`
	ReadOnly        *bool                              `json:"readOnly,omitempty"`
	SecretRef       *ObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// StorageOSPersistentVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSPersistentVolumeSource type for use
// with apply.
func StorageOSPersistentVolumeSource() *StorageOSPersistentVolumeSourceApplyConfiguration {
	return &StorageOSPersistentVolumeSourceApplyConfiguration{}
}

// StorageOSPersistentVolumeSourceList represents a listAlias of StorageOSPersistentVolumeSourceApplyConfiguration.
type StorageOSPersistentVolumeSourceList []*StorageOSPersistentVolumeSourceApplyConfiguration

// StorageOSPersistentVolumeSourceMap represents a map of StorageOSPersistentVolumeSourceApplyConfiguration.
type StorageOSPersistentVolumeSourceMap map[string]StorageOSPersistentVolumeSourceApplyConfiguration

// StorageOSVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSVolumeSource type for use
// with apply.
type StorageOSVolumeSourceApplyConfiguration struct {
	VolumeName      *string                                 `json:"volumeName,omitempty"`
	VolumeNamespace *string                                 `json:"volumeNamespace,omitempty"`
	FSType          *string                                 `json:"fsType,omitempty"`
	ReadOnly        *bool                                   `json:"readOnly,omitempty"`
	SecretRef       *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// StorageOSVolumeSourceApplyConfiguration represents a declarative configuration of the StorageOSVolumeSource type for use
// with apply.
func StorageOSVolumeSource() *StorageOSVolumeSourceApplyConfiguration {
	return &StorageOSVolumeSourceApplyConfiguration{}
}

// StorageOSVolumeSourceList represents a listAlias of StorageOSVolumeSourceApplyConfiguration.
type StorageOSVolumeSourceList []*StorageOSVolumeSourceApplyConfiguration

// StorageOSVolumeSourceMap represents a map of StorageOSVolumeSourceApplyConfiguration.
type StorageOSVolumeSourceMap map[string]StorageOSVolumeSourceApplyConfiguration

// SysctlApplyConfiguration represents a declarative configuration of the Sysctl type for use
// with apply.
type SysctlApplyConfiguration struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// SysctlApplyConfiguration represents a declarative configuration of the Sysctl type for use
// with apply.
func Sysctl() *SysctlApplyConfiguration {
	return &SysctlApplyConfiguration{}
}

// SysctlList represents a listAlias of SysctlApplyConfiguration.
type SysctlList []*SysctlApplyConfiguration

// SysctlMap represents a map of SysctlApplyConfiguration.
type SysctlMap map[string]SysctlApplyConfiguration

// TCPSocketActionApplyConfiguration represents a declarative configuration of the TCPSocketAction type for use
// with apply.
type TCPSocketActionApplyConfiguration struct {
	Port *intstr.IntOrString `json:"port,omitempty"`
	Host *string             `json:"host,omitempty"`
}

// TCPSocketActionApplyConfiguration represents a declarative configuration of the TCPSocketAction type for use
// with apply.
func TCPSocketAction() *TCPSocketActionApplyConfiguration {
	return &TCPSocketActionApplyConfiguration{}
}

// TCPSocketActionList represents a listAlias of TCPSocketActionApplyConfiguration.
type TCPSocketActionList []*TCPSocketActionApplyConfiguration

// TCPSocketActionMap represents a map of TCPSocketActionApplyConfiguration.
type TCPSocketActionMap map[string]TCPSocketActionApplyConfiguration

// TaintApplyConfiguration represents a declarative configuration of the Taint type for use
// with apply.
type TaintApplyConfiguration struct {
	Key       *string             `json:"key,omitempty"`
	Value     *string             `json:"value,omitempty"`
	Effect    *corev1.TaintEffect `json:"effect,omitempty"`
	TimeAdded *apismetav1.Time    `json:"timeAdded,omitempty"`
}

// TaintApplyConfiguration represents a declarative configuration of the Taint type for use
// with apply.
func Taint() *TaintApplyConfiguration {
	return &TaintApplyConfiguration{}
}

// TaintList represents a listAlias of TaintApplyConfiguration.
type TaintList []*TaintApplyConfiguration

// TaintMap represents a map of TaintApplyConfiguration.
type TaintMap map[string]TaintApplyConfiguration

// TolerationApplyConfiguration represents a declarative configuration of the Toleration type for use
// with apply.
type TolerationApplyConfiguration struct {
	Key               *string                    `json:"key,omitempty"`
	Operator          *corev1.TolerationOperator `json:"operator,omitempty"`
	Value             *string                    `json:"value,omitempty"`
	Effect            *corev1.TaintEffect        `json:"effect,omitempty"`
	TolerationSeconds *int64                     `json:"tolerationSeconds,omitempty"`
}

// TolerationApplyConfiguration represents a declarative configuration of the Toleration type for use
// with apply.
func Toleration() *TolerationApplyConfiguration {
	return &TolerationApplyConfiguration{}
}

// TolerationList represents a listAlias of TolerationApplyConfiguration.
type TolerationList []*TolerationApplyConfiguration

// TolerationMap represents a map of TolerationApplyConfiguration.
type TolerationMap map[string]TolerationApplyConfiguration

// TopologySelectorLabelRequirementApplyConfiguration represents a declarative configuration of the TopologySelectorLabelRequirement type for use
// with apply.
type TopologySelectorLabelRequirementApplyConfiguration struct {
	Key    *string   `json:"key,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// TopologySelectorLabelRequirementApplyConfiguration represents a declarative configuration of the TopologySelectorLabelRequirement type for use
// with apply.
func TopologySelectorLabelRequirement() *TopologySelectorLabelRequirementApplyConfiguration {
	return &TopologySelectorLabelRequirementApplyConfiguration{}
}

// TopologySelectorLabelRequirementList represents a listAlias of TopologySelectorLabelRequirementApplyConfiguration.
type TopologySelectorLabelRequirementList []*TopologySelectorLabelRequirementApplyConfiguration

// TopologySelectorLabelRequirementMap represents a map of TopologySelectorLabelRequirementApplyConfiguration.
type TopologySelectorLabelRequirementMap map[string]TopologySelectorLabelRequirementApplyConfiguration

// TopologySelectorTermApplyConfiguration represents a declarative configuration of the TopologySelectorTerm type for use
// with apply.
type TopologySelectorTermApplyConfiguration struct {
	MatchLabelExpressions *[]TopologySelectorLabelRequirementApplyConfiguration `json:"matchLabelExpressions,omitempty"`
}

// TopologySelectorTermApplyConfiguration represents a declarative configuration of the TopologySelectorTerm type for use
// with apply.
func TopologySelectorTerm() *TopologySelectorTermApplyConfiguration {
	return &TopologySelectorTermApplyConfiguration{}
}

// TopologySelectorTermList represents a listAlias of TopologySelectorTermApplyConfiguration.
type TopologySelectorTermList []*TopologySelectorTermApplyConfiguration

// TopologySelectorTermMap represents a map of TopologySelectorTermApplyConfiguration.
type TopologySelectorTermMap map[string]TopologySelectorTermApplyConfiguration

// TopologySpreadConstraintApplyConfiguration represents a declarative configuration of the TopologySpreadConstraint type for use
// with apply.
type TopologySpreadConstraintApplyConfiguration struct {
	MaxSkew           *int32                                  `json:"maxSkew,omitempty"`
	TopologyKey       *string                                 `json:"topologyKey,omitempty"`
	WhenUnsatisfiable *corev1.UnsatisfiableConstraintAction   `json:"whenUnsatisfiable,omitempty"`
	LabelSelector     *metav1.LabelSelectorApplyConfiguration `json:"labelSelector,omitempty"`
}

// TopologySpreadConstraintApplyConfiguration represents a declarative configuration of the TopologySpreadConstraint type for use
// with apply.
func TopologySpreadConstraint() *TopologySpreadConstraintApplyConfiguration {
	return &TopologySpreadConstraintApplyConfiguration{}
}

// TopologySpreadConstraintList represents a listAlias of TopologySpreadConstraintApplyConfiguration.
type TopologySpreadConstraintList []*TopologySpreadConstraintApplyConfiguration

// TopologySpreadConstraintMap represents a map of TopologySpreadConstraintApplyConfiguration.
type TopologySpreadConstraintMap map[string]TopologySpreadConstraintApplyConfiguration

// TypedLocalObjectReferenceApplyConfiguration represents a declarative configuration of the TypedLocalObjectReference type for use
// with apply.
type TypedLocalObjectReferenceApplyConfiguration struct {
	APIGroup *string `json:"apiGroup,omitempty"`
	Kind     *string `json:"kind,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// TypedLocalObjectReferenceApplyConfiguration represents a declarative configuration of the TypedLocalObjectReference type for use
// with apply.
func TypedLocalObjectReference() *TypedLocalObjectReferenceApplyConfiguration {
	return &TypedLocalObjectReferenceApplyConfiguration{}
}

// TypedLocalObjectReferenceList represents a listAlias of TypedLocalObjectReferenceApplyConfiguration.
type TypedLocalObjectReferenceList []*TypedLocalObjectReferenceApplyConfiguration

// TypedLocalObjectReferenceMap represents a map of TypedLocalObjectReferenceApplyConfiguration.
type TypedLocalObjectReferenceMap map[string]TypedLocalObjectReferenceApplyConfiguration

// VolumeApplyConfiguration represents a declarative configuration of the Volume type for use
// with apply.
type VolumeApplyConfiguration struct {
	Name                           *string `json:"name,omitempty"`
	VolumeSourceApplyConfiguration `json:",inline"`
}

// VolumeApplyConfiguration represents a declarative configuration of the Volume type for use
// with apply.
func Volume() *VolumeApplyConfiguration {
	return &VolumeApplyConfiguration{}
}

// VolumeList represents a listAlias of VolumeApplyConfiguration.
type VolumeList []*VolumeApplyConfiguration

// VolumeMap represents a map of VolumeApplyConfiguration.
type VolumeMap map[string]VolumeApplyConfiguration

// VolumeDeviceApplyConfiguration represents a declarative configuration of the VolumeDevice type for use
// with apply.
type VolumeDeviceApplyConfiguration struct {
	Name       *string `json:"name,omitempty"`
	DevicePath *string `json:"devicePath,omitempty"`
}

// VolumeDeviceApplyConfiguration represents a declarative configuration of the VolumeDevice type for use
// with apply.
func VolumeDevice() *VolumeDeviceApplyConfiguration {
	return &VolumeDeviceApplyConfiguration{}
}

// VolumeDeviceList represents a listAlias of VolumeDeviceApplyConfiguration.
type VolumeDeviceList []*VolumeDeviceApplyConfiguration

// VolumeDeviceMap represents a map of VolumeDeviceApplyConfiguration.
type VolumeDeviceMap map[string]VolumeDeviceApplyConfiguration

// VolumeMountApplyConfiguration represents a declarative configuration of the VolumeMount type for use
// with apply.
type VolumeMountApplyConfiguration struct {
	Name             *string                      `json:"name,omitempty"`
	ReadOnly         *bool                        `json:"readOnly,omitempty"`
	MountPath        *string                      `json:"mountPath,omitempty"`
	SubPath          *string                      `json:"subPath,omitempty"`
	MountPropagation *corev1.MountPropagationMode `json:"mountPropagation,omitempty"`
	SubPathExpr      *string                      `json:"subPathExpr,omitempty"`
}

// VolumeMountApplyConfiguration represents a declarative configuration of the VolumeMount type for use
// with apply.
func VolumeMount() *VolumeMountApplyConfiguration {
	return &VolumeMountApplyConfiguration{}
}

// VolumeMountList represents a listAlias of VolumeMountApplyConfiguration.
type VolumeMountList []*VolumeMountApplyConfiguration

// VolumeMountMap represents a map of VolumeMountApplyConfiguration.
type VolumeMountMap map[string]VolumeMountApplyConfiguration

// VolumeNodeAffinityApplyConfiguration represents a declarative configuration of the VolumeNodeAffinity type for use
// with apply.
type VolumeNodeAffinityApplyConfiguration struct {
	Required *NodeSelectorApplyConfiguration `json:"required,omitempty"`
}

// VolumeNodeAffinityApplyConfiguration represents a declarative configuration of the VolumeNodeAffinity type for use
// with apply.
func VolumeNodeAffinity() *VolumeNodeAffinityApplyConfiguration {
	return &VolumeNodeAffinityApplyConfiguration{}
}

// VolumeNodeAffinityList represents a listAlias of VolumeNodeAffinityApplyConfiguration.
type VolumeNodeAffinityList []*VolumeNodeAffinityApplyConfiguration

// VolumeNodeAffinityMap represents a map of VolumeNodeAffinityApplyConfiguration.
type VolumeNodeAffinityMap map[string]VolumeNodeAffinityApplyConfiguration

// VolumeProjectionApplyConfiguration represents a declarative configuration of the VolumeProjection type for use
// with apply.
type VolumeProjectionApplyConfiguration struct {
	Secret              *SecretProjectionApplyConfiguration              `json:"secret,omitempty"`
	DownwardAPI         *DownwardAPIProjectionApplyConfiguration         `json:"downwardAPI,omitempty"`
	ConfigMap           *ConfigMapProjectionApplyConfiguration           `json:"configMap,omitempty"`
	ServiceAccountToken *ServiceAccountTokenProjectionApplyConfiguration `json:"serviceAccountToken,omitempty"`
}

// VolumeProjectionApplyConfiguration represents a declarative configuration of the VolumeProjection type for use
// with apply.
func VolumeProjection() *VolumeProjectionApplyConfiguration {
	return &VolumeProjectionApplyConfiguration{}
}

// VolumeProjectionList represents a listAlias of VolumeProjectionApplyConfiguration.
type VolumeProjectionList []*VolumeProjectionApplyConfiguration

// VolumeProjectionMap represents a map of VolumeProjectionApplyConfiguration.
type VolumeProjectionMap map[string]VolumeProjectionApplyConfiguration

// VolumeSourceApplyConfiguration represents a declarative configuration of the VolumeSource type for use
// with apply.
type VolumeSourceApplyConfiguration struct {
	HostPath              *HostPathVolumeSourceApplyConfiguration              `json:"hostPath,omitempty"`
	EmptyDir              *EmptyDirVolumeSourceApplyConfiguration              `json:"emptyDir,omitempty"`
	GCEPersistentDisk     *GCEPersistentDiskVolumeSourceApplyConfiguration     `json:"gcePersistentDisk,omitempty"`
	AWSElasticBlockStore  *AWSElasticBlockStoreVolumeSourceApplyConfiguration  `json:"awsElasticBlockStore,omitempty"`
	GitRepo               *GitRepoVolumeSourceApplyConfiguration               `json:"gitRepo,omitempty"`
	Secret                *SecretVolumeSourceApplyConfiguration                `json:"secret,omitempty"`
	NFS                   *NFSVolumeSourceApplyConfiguration                   `json:"nfs,omitempty"`
	ISCSI                 *ISCSIVolumeSourceApplyConfiguration                 `json:"iscsi,omitempty"`
	Glusterfs             *GlusterfsVolumeSourceApplyConfiguration             `json:"glusterfs,omitempty"`
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSourceApplyConfiguration `json:"persistentVolumeClaim,omitempty"`
	RBD                   *RBDVolumeSourceApplyConfiguration                   `json:"rbd,omitempty"`
	FlexVolume            *FlexVolumeSourceApplyConfiguration                  `json:"flexVolume,omitempty"`
	Cinder                *CinderVolumeSourceApplyConfiguration                `json:"cinder,omitempty"`
	CephFS                *CephFSVolumeSourceApplyConfiguration                `json:"cephfs,omitempty"`
	Flocker               *FlockerVolumeSourceApplyConfiguration               `json:"flocker,omitempty"`
	DownwardAPI           *DownwardAPIVolumeSourceApplyConfiguration           `json:"downwardAPI,omitempty"`
	FC                    *FCVolumeSourceApplyConfiguration                    `json:"fc,omitempty"`
	AzureFile             *AzureFileVolumeSourceApplyConfiguration             `json:"azureFile,omitempty"`
	ConfigMap             *ConfigMapVolumeSourceApplyConfiguration             `json:"configMap,omitempty"`
	VsphereVolume         *VsphereVirtualDiskVolumeSourceApplyConfiguration    `json:"vsphereVolume,omitempty"`
	Quobyte               *QuobyteVolumeSourceApplyConfiguration               `json:"quobyte,omitempty"`
	AzureDisk             *AzureDiskVolumeSourceApplyConfiguration             `json:"azureDisk,omitempty"`
	PhotonPersistentDisk  *PhotonPersistentDiskVolumeSourceApplyConfiguration  `json:"photonPersistentDisk,omitempty"`
	Projected             *ProjectedVolumeSourceApplyConfiguration             `json:"projected,omitempty"`
	PortworxVolume        *PortworxVolumeSourceApplyConfiguration              `json:"portworxVolume,omitempty"`
	ScaleIO               *ScaleIOVolumeSourceApplyConfiguration               `json:"scaleIO,omitempty"`
	StorageOS             *StorageOSVolumeSourceApplyConfiguration             `json:"storageos,omitempty"`
	CSI                   *CSIVolumeSourceApplyConfiguration                   `json:"csi,omitempty"`
}

// VolumeSourceApplyConfiguration represents a declarative configuration of the VolumeSource type for use
// with apply.
func VolumeSource() *VolumeSourceApplyConfiguration {
	return &VolumeSourceApplyConfiguration{}
}

// VolumeSourceList represents a listAlias of VolumeSourceApplyConfiguration.
type VolumeSourceList []*VolumeSourceApplyConfiguration

// VolumeSourceMap represents a map of VolumeSourceApplyConfiguration.
type VolumeSourceMap map[string]VolumeSourceApplyConfiguration

// VsphereVirtualDiskVolumeSourceApplyConfiguration represents a declarative configuration of the VsphereVirtualDiskVolumeSource type for use
// with apply.
type VsphereVirtualDiskVolumeSourceApplyConfiguration struct {
	VolumePath        *string `json:"volumePath,omitempty"`
	FSType            *string `json:"fsType,omitempty"`
	StoragePolicyName *string `json:"storagePolicyName,omitempty"`
	StoragePolicyID   *string `json:"storagePolicyID,omitempty"`
}

// VsphereVirtualDiskVolumeSourceApplyConfiguration represents a declarative configuration of the VsphereVirtualDiskVolumeSource type for use
// with apply.
func VsphereVirtualDiskVolumeSource() *VsphereVirtualDiskVolumeSourceApplyConfiguration {
	return &VsphereVirtualDiskVolumeSourceApplyConfiguration{}
}

// VsphereVirtualDiskVolumeSourceList represents a listAlias of VsphereVirtualDiskVolumeSourceApplyConfiguration.
type VsphereVirtualDiskVolumeSourceList []*VsphereVirtualDiskVolumeSourceApplyConfiguration

// VsphereVirtualDiskVolumeSourceMap represents a map of VsphereVirtualDiskVolumeSourceApplyConfiguration.
type VsphereVirtualDiskVolumeSourceMap map[string]VsphereVirtualDiskVolumeSourceApplyConfiguration

// WeightedPodAffinityTermApplyConfiguration represents a declarative configuration of the WeightedPodAffinityTerm type for use
// with apply.
type WeightedPodAffinityTermApplyConfiguration struct {
	Weight          *int32                             `json:"weight,omitempty"`
	PodAffinityTerm *PodAffinityTermApplyConfiguration `json:"podAffinityTerm,omitempty"`
}

// WeightedPodAffinityTermApplyConfiguration represents a declarative configuration of the WeightedPodAffinityTerm type for use
// with apply.
func WeightedPodAffinityTerm() *WeightedPodAffinityTermApplyConfiguration {
	return &WeightedPodAffinityTermApplyConfiguration{}
}

// WeightedPodAffinityTermList represents a listAlias of WeightedPodAffinityTermApplyConfiguration.
type WeightedPodAffinityTermList []*WeightedPodAffinityTermApplyConfiguration

// WeightedPodAffinityTermMap represents a map of WeightedPodAffinityTermApplyConfiguration.
type WeightedPodAffinityTermMap map[string]WeightedPodAffinityTermApplyConfiguration

// WindowsSecurityContextOptionsApplyConfiguration represents a declarative configuration of the WindowsSecurityContextOptions type for use
// with apply.
type WindowsSecurityContextOptionsApplyConfiguration struct {
	GMSACredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`
	GMSACredentialSpec     *string `json:"gmsaCredentialSpec,omitempty"`
	RunAsUserName          *string `json:"runAsUserName,omitempty"`
}

// WindowsSecurityContextOptionsApplyConfiguration represents a declarative configuration of the WindowsSecurityContextOptions type for use
// with apply.
func WindowsSecurityContextOptions() *WindowsSecurityContextOptionsApplyConfiguration {
	return &WindowsSecurityContextOptionsApplyConfiguration{}
}

// WindowsSecurityContextOptionsList represents a listAlias of WindowsSecurityContextOptionsApplyConfiguration.
type WindowsSecurityContextOptionsList []*WindowsSecurityContextOptionsApplyConfiguration

// WindowsSecurityContextOptionsMap represents a map of WindowsSecurityContextOptionsApplyConfiguration.
type WindowsSecurityContextOptionsMap map[string]WindowsSecurityContextOptionsApplyConfiguration
